import pickle

import tifffile
from data_manager import *
import matplotlib.pyplot as plt
import os
from layers import FigureLayer
from utility import *
from os import path
import pathlib
from image_emulator import ImageEmulator2Channel
from image_process import SpotCountLocationsDoughnut, CellDetectorCellMask
from distributed_computing import DistributedComputeDaskTask, Task
import numpy as np
import scipy
class FigureLayerPA(FigureLayer):
    def __init__(self):
        self.dLayer=DataManager()
        self.dLayer.storage=DataStorageLocal(os.path.join('data','analysis'))

    def runAndSave(self,key):
        if not isinstance(key,str):
            raise TypeError
        command='self.'+key+'()'
        fig=eval(command)
        path=os.path.join('data','figures',key+'.eps')
        fig.savefig(path,format='eps')

        path = os.path.join('data', 'figures', key + '.svg')
        fig.savefig(path, format='svg')


    def Figure0(self):
        x=[1,2,3]
        y=[1,2,3]
        fig,ax=plt.subplots(1,1)
        ax.plot(x,y)
        return fig

    def Figure1(self):
        im = tifffile.imread('data/analysis/exampleMileStone1_Part1_NDTiffStack11x11.tif')
        print(im.shape)
        fig, ax = plt.subplots(2,1)
        fig.set_figwidth=15
        fig.set_figheight = 15
        image=np.zeros([512,512,3])
        image1=image
        image2=image
        image1[:,:,1]=im[0]/np.max(im[0])
        ax[0].imshow(image1)
        image2[:, :, 1] = im[2]/np.max(im[2])
        ax[1].imshow(image2)
        return fig
    def Figure2(self):
        fig,ax=plt.subplots(1,1)
        numcells=[1, 4, 5, 0, 0, 2, 0, 0, 1, 0, 0, 4, 5, 1, 1, 5, 0, 4, 2, 1, 0, 2, 6, 1, 3, 0, 2, 1, 0, 3, 1, 4, 2,
                     1, 4, 4, 0, 0, 3, 4, 1, 0, 4, 0, 4, 4, 3, 3, 7, 2, 0, 0, 0, 0, 0, 6, 2, 0, 1, 0, 1, 7, 6, 7, 1, 1,
                     0, 12, 0, 0, 2, 4, 4, 3, 0, 0, 0, 3, 2, 4, 3, 4, 0, 3, 0, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 0, 1, 0, 4,
                     4]
        data=np.array(numcells).reshape(10,10)
        im=ax.imshow(data)
        plt.colorbar(im)
        return fig

    def Figure3(self):
        im = tifffile.imread('data/analysis/exampleMileStone1_Part2_NDTiffStack11x11.tif')
        print(im.shape)
        fig, ax = plt.subplots(1,3)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.zeros([512, 512, 3])
        image1 = image
        image2 = image
        image3 = image
        image1[:, :, 1] = im[0] / np.max(im[0])
        image1[:, :, 0] = im[1] / np.max(im[1])
        ax[0].imshow(image1)
        image1[:, :, 1] = im[0+14] / np.max(im[0+14])
        image1[:, :, 0] = im[1+14] / np.max(im[1+14])
        ax[1].imshow(image2)
        image1[:, :, 1] = im[0 + 14] / np.max(im[0 + 14])
        image1[:, :, 0] = im[1 + 14] / np.max(im[1 + 14])
        ax[1].imshow(image3)
        image1[:, :, 1] = im[0 + 14] / np.max(im[0 + 14])
        image1[:, :, 0] = im[1 + 14] / np.max(im[1 + 14])
        return fig

    def Figure4(self):
        im = tifffile.imread('data/analysis/exampleMileStone1_Part2_NDTiffStack2.tif')
        print(im.shape)
        fig, ax = plt.subplots(1, 3)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.zeros([512, 512, 3])
        image1 = image
        image2 = image
        image3 = image
        image1[:, :, 1] = im[0] / np.max(im[0])
        image1[:, :, 0] = im[1] / np.max(im[1])
        ax[0].imshow(image1)
        image1[:, :, 1] = im[0 + 14] / np.max(im[0 ])
        image1[:, :, 0] = im[1 + 14] / np.max(im[1 ])
        ax[1].imshow(image2)
        image1[:, :, 1] = im[0 + 28] / np.max(im[0])
        image1[:, :, 0] = im[1 + 28] / np.max(im[1])
        ax[2].imshow(image3)
        return fig

    def Figure5(self):
        data={'cellDetectSpotLocationsInRoi': {'spotLocationData': [[{'positions': [[0, 426], [391, 135], [244, 229], [59, 0], [390, 167], [143, 192], [0, 417], [136, 347], [416, 27], [113, 192], [352, 398], [321, 422], [471, 492], [239, 356], [0, 65], [429, 316], [139, 0], [244, 230], [267, 0], [157, 189], [378, 363], [0, 266], [144, 192], [420, 12], [136, 346], [245, 229], [342, 193], [296, 425], [452, 0], [144, 348], [93, 103], [9, 115], [132, 506], [337, 179], [184, 194], [510, 119], [11, 157], [183, 0], [166, 81], [161, 322], [497, 52], [370, 203], [202, 23], [449, 164], [465, 493], [295, 30], [209, 173], [304, 340], [49, 155], [443, 75], [443, 500], [292, 280], [365, 28], [27, 43], [4, 344], [213, 338], [220, 181], [144, 327], [272, 77], [368, 82], [226, 194], [509, 271], [117, 303], [133, 432], [16, 33], [210, 322], [379, 287], [269, 7], [467, 40], [443, 214], [408, 370], [76, 450], [270, 400], [279, 465], [227, 329], [195, 291], [128, 98], [0, 438], [335, 79], [398, 23], [431, 229], [139, 315], [215, 268], [151, 403], [273, 216], [151, 475], [197, 91], [166, 423], [68, 67], [107, 147], [306, 3], [319, 168], [20, 322], [20, 0], [68, 279], [141, 318], [59, 158], [175, 399], [384, 275], [9, 10], [156, 504], [211, 116], [34, 18], [430, 229], [437, 314], [205, 97], [499, 173], [251, 0], [45, 414], [384, 260], [160, 288], [33, 18], [232, 368], [222, 254], [502, 245], [246, 42], [147, 508], [162, 62], [289, 19], [392, 444], [370, 202], [28, 76], [129, 92], [231, 455], [76, 195], [111, 165], [252, 0], [0, 244], [396, 38], [151, 155], [428, 132], [35, 312], [225, 79], [50, 58], [281, 326], [166, 313], [167, 318], [228, 269], [189, 239], [104, 6], [69, 448], [288, 127], [73, 343], [119, 477], [121, 381], [261, 330], [273, 229], [254, 267], [321, 197], [121, 143]], 'threshholds': [73.81157620149295, 72.18985183761221, 69.88016610132827, 68.97930431086901, 68.91194872482575, 67.20492746898289, 66.77683013076252, 64.98926086241364, 64.4389912162413, 63.92747438120447, 63.90669336569562, 62.8039816717617, 62.64799222541513, 61.77700641811192, 61.654896802925734, 61.648269671648976, 61.59477296339414, 61.508653744866905, 61.25985568428807, 61.16056035499581, 60.82826635916212, 60.67463610768965, 60.28867406933898, 60.18345026315359, 59.54954469384715, 59.25442026377192, 59.138968697907885, 59.03999886476713, 58.87415438863651, 58.85275287053254, 58.83651891050981, 58.82975221969133, 58.71935999874972, 58.3783437651634, 58.2874911262028, 58.25699464045162, 58.252866263590704, 58.198702247335135, 57.98938699865829, 57.94715765963992, 57.772761851681324, 57.70554539684224, 57.628567523030256, 57.394777447969076, 57.1335637670996, 57.12617657368599, 57.107087016713, 56.832945426116595, 56.68854970183307, 56.63765996115285, 56.47024812700539, 56.317161083014646, 56.279385617008685, 56.04343859938089, 56.020252011929905, 55.802462726538536, 55.80181087756052, 55.73339979459922, 55.62305395072565, 55.50224803349553, 55.24390583693651, 54.818089113464254, 54.70161339706508, 54.696662693639, 54.659709554198194, 54.539819574344406, 54.30638634181763, 54.29833184040329, 54.27562619600573, 54.21469548893167, 54.067971487819406, 54.012379673088674, 53.988044406246004, 53.964283693267944, 53.78639589840378, 53.70418777374478, 53.405975004703954, 53.364164772648245, 53.353999277397854, 53.303544531040494, 53.20733711237633, 53.19394371861864, 53.12247521473711, 53.11100602153065, 53.1047670791712, 53.08889039002037, 52.986676771012085, 52.97803225671045, 52.95503203420678, 52.89793469754998, 52.802115467803084, 52.73489944130152, 52.71726902918658, 52.674900130626455, 52.589572320619, 52.55095906902521, 52.345259479435484, 52.34259024743258, 52.3260617093037, 52.22049609126909, 52.1451628705874, 52.04408290028562, 51.991672178656636, 51.97652506193483, 51.95158475151968, 51.83344849463003, 51.805388498866435, 51.751627702213305, 51.67191833197013, 51.6562121204064, 51.6320013824203, 51.615224643253356, 51.59152576636602, 51.580165214655885, 51.5102331507458, 51.500254020442746, 51.48956077673331, 51.38103092025216, 51.368785777548624, 51.3552214778663, 51.33326129325796, 51.21518644412153, 51.14216561290837, 51.14120372680149, 51.09438052689147, 51.06538956306637, 51.05596909926767, 50.89900230779158, 50.88774996924027, 50.867108513273166, 50.83074581505714, 50.822411766221855, 50.802996284759864, 50.62990417475735, 50.56846117824696, 50.56690927925282, 50.555859621346556, 50.5272873361466, 50.520582909756435, 50.396983231666866, 50.39572591077884, 50.36502802939523, 50.359642759983814, 50.33189322968652, 50.30088488283655, 50.209597249553056, 50.08669622584712, 50.07750850406381, 50.071067737734346, 50.066675700812695]}], [{'positions': [[307, 353], [205, 0], [151, 406], [365, 363], [321, 21], [404, 0], [304, 462], [60, 370], [32, 252], [102, 307], [0, 96], [511, 146], [183, 225], [312, 0], [429, 137], [312, 7], [304, 461], [160, 233], [506, 424], [374, 233], [188, 332], [35, 480], [398, 4], [262, 257], [414, 343], [326, 33], [208, 431], [270, 268], [349, 86], [210, 372], [66, 7], [229, 50], [467, 492], [158, 468], [125, 313], [498, 203], [289, 485], [502, 36], [397, 198], [428, 351], [231, 298], [158, 327], [288, 253], [180, 314], [314, 198], [476, 393], [71, 69], [447, 312], [117, 163], [417, 0], [0, 386], [350, 86], [413, 23], [427, 274], [210, 257], [79, 216], [497, 203], [95, 154], [51, 463], [168, 33], [465, 295], [25, 194], [276, 38], [34, 357], [313, 0], [157, 276], [447, 34], [487, 213], [451, 496], [45, 149], [364, 300], [107, 25], [491, 80], [232, 362], [187, 497], [435, 475], [422, 162], [499, 163], [318, 499], [107, 8], [0, 385], [72, 64], [121, 39], [271, 68], [390, 391], [465, 14], [103, 138], [47, 506], [97, 486], [0, 192], [438, 74], [309, 245], [434, 396], [95, 162], [306, 293], [150, 447], [9, 447], [137, 29], [182, 279], [431, 69], [224, 342], [275, 131], [222, 298], [174, 281], [166, 202], [293, 8], [18, 417], [218, 405], [119, 136], [150, 236], [230, 298], [66, 6], [161, 486], [175, 0], [452, 430], [295, 107], [240, 398], [164, 218], [97, 363], [399, 28], [155, 49], [94, 334], [352, 140], [502, 296], [457, 311], [366, 175], [397, 87], [325, 444], [215, 0], [318, 302], [277, 345], [373, 154], [84, 294], [250, 471], [100, 497], [245, 186], [111, 454], [0, 60], [183, 310], [270, 364], [494, 403], [23, 406], [228, 398], [371, 324], [374, 4], [26, 194], [78, 16], [106, 277], [36, 353], [204, 202], [250, 388], [196, 289], [190, 95], [414, 199], [83, 509], [469, 444], [312, 215], [211, 378], [293, 181], [55, 500], [18, 296], [280, 373]], 'threshholds': [74.17186835699952, 66.62054524963482, 63.910790824511196, 62.938879637133105, 61.86340475572257, 61.712723283673995, 60.11964850010661, 60.11784797173694, 60.04057509148129, 59.715497383136594, 59.67929013182252, 59.51401978121897, 59.43164075063536, 59.30517001657285, 59.27797915277999, 59.25595670374335, 59.218957615572, 58.8852512802859, 58.84919861919869, 58.72739946947887, 58.59535710105767, 58.49946014785984, 58.47635128385977, 58.37749052055289, 58.338473621019126, 58.28443370528258, 57.97094929066339, 57.71153613816362, 57.50665973181408, 57.41487569645447, 57.28734946547398, 57.22939845586919, 57.164665724760745, 57.007465762931744, 56.932473925761734, 56.926452266394975, 56.89306926564819, 56.826566924215435, 56.612176443256025, 56.553806755026024, 56.448194331585874, 56.42635824749654, 56.37993869552649, 56.2082121195708, 56.17090256593312, 56.084348781420495, 55.88079110371221, 55.47083603870559, 55.41662564538194, 55.39201125945585, 55.28448966614958, 55.252162162320865, 55.225499046986975, 55.12466727772327, 55.10006835081985, 55.07446073240398, 55.06493162710895, 54.908942180762374, 54.8402983557857, 54.78583933308647, 54.67302565284247, 54.51390149046223, 54.41271245032664, 54.29179789160019, 54.237897535405324, 54.15266290787153, 54.06444858286841, 53.98579428120576, 53.94826744457541, 53.91676226731177, 53.86747123103131, 53.843384593564224, 53.82409364095877, 53.81512320216811, 53.79639091606704, 53.721973204424145, 53.64262067671535, 53.62326745968166, 53.47499155957523, 53.473268754656466, 53.387506807001174, 53.36799814306551, 53.31398914537436, 53.272815303274, 53.25080831326004, 53.23120646685076, 53.16037435292456, 53.13939151344576, 52.8937754026437, 52.87662636191966, 52.75209528743114, 52.605681751785184, 52.60054468341181, 52.58538167932979, 52.48507723018755, 52.48307530618538, 52.43035454742761, 52.24658508107589, 52.232694856904565, 52.206528143646786, 52.16471791159108, 52.10398902848705, 52.092038892227144, 51.98782334921668, 51.90299236962283, 51.85862111872301, 51.846220957455074, 51.73783066051562, 51.71633595993799, 51.71594777102072, 51.70174708138303, 51.69060381266559, 51.65891269879222, 51.63758847580169, 51.54931188637033, 51.492307732187214, 51.46929205066083, 51.45245304706562, 51.27999689868094, 51.27305973027538, 51.15470576205554, 51.142988367811014, 51.11916539040466, 51.02325297818411, 51.014329344799066, 50.90483717387352, 50.89838094852138, 50.80759057398901, 50.795329972262806, 50.76300204009655, 50.715961557193864, 50.707612049335836, 50.69106762384676, 50.654130371766165, 50.61044231622729, 50.58973902416945, 50.5318348199702, 50.52935152457707, 50.52509904719713, 50.51238842046285, 50.51178294855286, 50.50936234592551, 50.471943722453986, 50.45864308283241, 50.43680699874308, 50.40803331791068, 50.40331535649999, 50.39397261615226, 50.37690087054169, 50.371981085160975, 50.36018596746548, 50.33703029805987, 50.323015973369536, 50.29251948761838, 50.263808071214214, 50.248769595988726, 50.19126861139196, 50.10331794644964, 50.08048820153305, 50.047462043320685, 50.02503594634405, 50.00880241465885]}], [{'positions': [[0, 143], [0, 144], [357, 258], [54, 0], [295, 185], [366, 117], [84, 128], [92, 145], [142, 230], [431, 442], [484, 217], [216, 229], [233, 174], [407, 372], [33, 357], [234, 0], [338, 216], [159, 285], [447, 229], [357, 257], [267, 226], [275, 335], [210, 429], [83, 36], [43, 453], [433, 339], [37, 321], [488, 211], [367, 448], [3, 65], [506, 0], [1, 439], [357, 21], [487, 281], [344, 36], [205, 338], [309, 150], [383, 431], [406, 312], [96, 46], [109, 250], [429, 296], [24, 364], [179, 325], [469, 91], [505, 59], [431, 243], [161, 233], [497, 378], [177, 22], [260, 340], [323, 219], [318, 282], [156, 42], [81, 77], [47, 234], [280, 168], [305, 280], [258, 0], [8, 428], [397, 109], [120, 132], [505, 60], [497, 318], [293, 148], [128, 170], [267, 193], [496, 431], [51, 446], [286, 455], [455, 136], [0, 501], [495, 431], [353, 212], [247, 337], [223, 25], [43, 278], [315, 176], [96, 225], [493, 391], [495, 412], [156, 58], [268, 226], [287, 486], [28, 276], [233, 478], [67, 179], [154, 390], [351, 269], [365, 268], [244, 435], [366, 4], [470, 90], [216, 317], [437, 44], [25, 188], [410, 41], [129, 237], [426, 178], [485, 241], [215, 423], [53, 128], [246, 118], [338, 27], [77, 276], [15, 164], [185, 410], [242, 263], [215, 198], [242, 32], [40, 405], [209, 256], [403, 369], [236, 98], [121, 206], [270, 49], [6, 186], [243, 144], [3, 467], [257, 206], [322, 310], [456, 136], [363, 144], [2, 438], [159, 404], [239, 244], [24, 46], [215, 229], [133, 104], [273, 421], [171, 54], [310, 40], [368, 448], [425, 115], [92, 376], [221, 16], [457, 401], [326, 306], [233, 107], [116, 291], [163, 441], [308, 20], [313, 209], [304, 118], [26, 85], [364, 141], [122, 214], [25, 428], [192, 421], [307, 103], [89, 22], [483, 70], [117, 105], [469, 90], [269, 395], [419, 3], [342, 74], [401, 54], [224, 44], [411, 41], [22, 451], [461, 281], [194, 200], [139, 499], [121, 223], [181, 288], [493, 469], [510, 141]], 'threshholds': [100.50203944205795, 80.35108705928995, 74.38577746656797, 69.6182855407956, 65.69766143847643, 65.24055724907076, 64.80648420021416, 64.76576038312186, 63.59898283774268, 63.493587697295155, 63.401540001874814, 63.187025420396374, 62.19189672752188, 62.04658506586203, 61.67736927697043, 61.57177274089044, 61.455607061620064, 61.360843328791205, 61.34653399765722, 60.98684731406064, 60.983743516072366, 60.7875734601152, 60.08285080756774, 60.08049204103114, 59.775264380133805, 59.66165929137006, 59.52598537650155, 59.3966281274435, 59.31117621691698, 59.0871947945718, 59.02724186096479, 58.90122072357285, 58.680886735035145, 58.664497756448, 58.65568233622176, 57.980432018890326, 57.7621154133775, 57.63539604993949, 57.585764058484784, 57.55366886833392, 57.44254750330077, 57.272900574798264, 57.04029009717409, 56.94077705655165, 56.76001820571459, 56.64048464005769, 56.61268873269234, 56.56117848941699, 56.48294329471699, 56.31497279406514, 56.277384121344, 56.01160749762828, 55.95682255044003, 55.94083721979284, 55.826363427395876, 55.7149311685589, 55.42075359390534, 55.418767128925836, 55.364944496181955, 55.22892919780176, 55.15235454359227, 55.05243785502983, 54.97289939071126, 54.91696619246885, 54.89199453567084, 54.871244438207405, 54.8130920329701, 54.63916170904227, 54.61540099606421, 54.586006384299104, 54.53607938640077, 54.522530545741176, 54.503208246752834, 54.44409352707116, 54.251570476583986, 54.14629986499304, 54.124246497911, 54.012364214066, 53.672217112450426, 53.61162778888809, 53.56058302964349, 53.52350621802115, 53.44555057074209, 53.41624914145066, 53.17393865260689, 53.0862984531309, 53.05400186734751, 53.00250708309485, 53.00050515909267, 52.925172366748484, 52.92447371236486, 52.92199041697171, 52.906781035821616, 52.8030314051794, 52.790367155513195, 52.7512261554604, 52.6317857722772, 52.59436800548064, 52.50551686218469, 52.50110936624035, 52.475625848343505, 52.390965346336756, 52.34608223433816, 52.312264667606016, 52.29857626740467, 52.277826169941235, 52.24700375970106, 52.21577812985841, 52.06256698534863, 52.05747629404332, 52.01856846434343, 51.99620420345757, 51.96808237160316, 51.86003345817545, 51.66906273501991, 51.663506559683874, 51.57566453623789, 51.56712866343261, 51.50781211978095, 51.48038851397271, 51.42620903869444, 51.42552584333348, 51.349851667477594, 51.32176075366859, 51.32048797375788, 51.218461148034436, 51.21274995413398, 51.19201531569324, 51.116620258920776, 51.041628850088294, 51.03461395823178, 51.02176334361826, 50.99333104629755, 50.90226112434426, 50.898101829437934, 50.88759495067588, 50.86509113024827, 50.83031124907177, 50.82262904921452, 50.795112260932626, 50.763638430051905, 50.75952551221365, 50.75916866967927, 50.72552158053425, 50.72376828590762, 50.70741022536586, 50.69760157264987, 50.63204608663875, 50.61578120857064, 50.562377682789425, 50.534302228003156, 50.533216241377254, 50.53067068155585, 50.48243557053088, 50.46983315695546, 50.42148897609665, 50.37156197819833, 50.31688567250639, 50.30195541043975, 50.269177881602985, 50.23684994943669, 50.233622050929384, 50.17214813637365, 50.149442491976075, 50.09852226158801, 50.09032777229443, 50.04189040896196, 50.01755557045679]}], [{'positions': [[15, 409], [14, 409], [5, 446], [14, 435], [33, 430], [4, 446], [23, 411], [26, 428], [15, 408], [33, 431], [10, 445], [7, 400], [27, 453], [4, 447], [23, 412], [14, 436], [17, 409], [14, 439], [15, 435], [7, 401], [6, 437], [27, 428], [44, 422], [13, 439], [21, 451], [34, 430], [33, 439], [33, 419], [18, 417], [23, 433], [3, 409], [20, 440], [27, 452], [34, 439], [26, 453], [0, 434], [21, 450], [6, 438], [0, 414], [4, 409], [20, 451], [18, 418], [8, 400], [6, 401], [27, 427], [44, 423], [32, 419], [4, 414], [27, 409], [7, 437], [22, 433], [0, 402], [91, 319], [4, 415], [0, 450], [193, 0], [0, 289], [11, 398], [12, 428], [0, 235], [32, 462], [11, 445], [6, 434], [10, 446], [246, 359], [203, 229], [4, 406], [52, 379], [8, 412], [13, 440], [27, 468], [6, 469], [32, 420], [430, 0], [177, 93], [22, 434], [422, 137], [18, 409], [240, 146], [45, 422], [22, 412], [159, 62], [470, 453], [329, 27], [0, 209], [33, 440], [0, 415], [345, 101], [408, 163], [33, 450], [229, 464], [482, 268], [174, 438], [425, 80], [335, 403], [469, 104], [27, 442], [14, 410], [0, 470], [147, 328], [223, 430], [133, 375], [31, 422], [52, 378], [20, 380], [34, 113], [508, 417], [120, 256], [69, 103], [431, 463], [0, 435], [34, 419], [345, 0], [262, 298], [34, 450], [347, 16], [211, 40], [260, 121], [487, 239], [33, 46], [77, 110], [4, 389], [257, 210], [391, 295], [13, 414], [24, 409], [260, 122], [464, 490], [350, 85], [16, 422], [269, 244], [1, 414], [403, 98], [497, 434], [346, 101], [27, 449], [424, 0], [102, 160], [174, 380], [233, 385], [270, 300], [39, 399], [91, 479], [16, 453], [405, 3], [332, 478], [198, 82], [48, 434], [275, 119], [79, 465], [100, 79], [396, 290], [0, 170], [224, 49], [355, 28], [225, 468], [116, 189], [15, 434], [307, 320], [469, 120], [5, 431], [139, 502], [86, 388], [16, 454], [508, 487], [219, 120], [430, 431], [411, 31], [343, 72], [437, 59], [508, 418], [22, 445], [163, 191], [38, 464], [459, 178], [345, 394], [381, 178], [325, 85], [326, 458], [76, 110], [91, 75], [110, 438], [1, 170], [24, 238], [102, 148], [228, 287], [442, 131], [19, 440], [315, 220], [27, 509], [14, 437], [32, 422], [224, 181], [273, 287], [7, 408], [181, 165], [84, 235], [378, 376], [202, 118], [61, 122], [193, 508], [443, 143], [23, 410], [211, 476], [11, 70], [175, 438], [327, 416], [39, 8], [223, 429], [310, 0], [149, 400], [317, 167], [162, 294], [337, 226], [430, 329], [429, 0], [428, 258], [430, 108], [208, 221], [59, 211], [375, 1], [449, 449], [489, 228], [458, 225], [7, 85], [388, 131], [52, 116], [214, 350], [233, 211], [215, 403], [295, 485], [153, 416], [101, 204], [21, 422], [33, 462], [196, 418], [265, 95], [245, 422], [102, 159], [132, 56], [0, 208], [252, 290], [362, 274], [198, 430], [14, 438], [97, 48], [306, 184], [26, 468], [471, 226], [146, 503], [34, 429], [2, 69], [148, 71], [409, 182], [402, 45], [84, 194], [29, 390], [502, 460], [34, 405], [166, 315], [22, 359], [23, 19], [444, 379], [0, 451], [389, 152], [18, 416], [117, 354]], 'threshholds': [212.99916628393254, 181.27251663250084, 164.19795841421882, 160.77266356398178, 153.8131261850765, 141.08972632565903, 140.81372237060214, 138.3660812480266, 135.48168152889377, 126.20220016431801, 122.91937726615085, 121.5687057255634, 121.0958493758635, 115.67846569346239, 114.62858339978263, 113.64726763596605, 112.24851471790545, 111.73197074100416, 109.41606109304593, 108.32321988791871, 107.70466368764164, 105.81221156828155, 105.12200049917563, 103.71725769646872, 101.95222402326783, 100.43148601887772, 99.99713385093767, 99.81230845933041, 99.48709161978152, 96.699800226004, 94.98886787629294, 94.79614343017329, 94.33655594537449, 93.52423440440731, 90.47732803416008, 90.12225067047785, 89.75011744854527, 88.09687202004072, 87.21098729705373, 85.39863359352918, 84.69541603457029, 84.6904189540762, 84.67357995048093, 84.005623215752, 82.36086813965967, 79.14581993449846, 78.92709925270815, 77.76635925405597, 76.65846368634307, 76.53458488917005, 76.095530218842, 74.39927950182204, 71.90822987112854, 71.60303312827659, 71.16688043196685, 70.25087195312327, 69.45070280072353, 68.83172706514624, 68.30146248498565, 68.27132327010642, 67.09956367491829, 66.22072433349567, 65.45904476050823, 65.36268232327961, 65.34967669010169, 65.23354192887672, 65.076404231476, 64.9083560073732, 64.35034146857781, 64.26552637634417, 64.13995612063533, 63.98239888793443, 63.96855589750616, 63.037337180837525, 62.657614513183816, 62.53795641867033, 61.98334196931947, 61.664550008739816, 60.98844601846037, 60.976619554381955, 60.790366792637116, 60.368663415340606, 60.34868926737425, 60.20559681270927, 60.08919839142353, 59.997693903484844, 59.74686342919602, 59.6995743169177, 59.59093581894019, 59.54645635488158, 59.31767881933719, 59.315490530387706, 59.26186972161379, 58.968871744397305, 58.94261227700342, 58.870103735226536, 58.66739973046625, 58.66519555415653, 58.56444193668137, 58.488301420119704, 58.290470823672024, 57.97203570562679, 57.897975693193274, 57.71361578561679, 57.70321754835102, 57.568630048445954, 57.561289232100414, 57.516545679643514, 57.41163191058696, 57.318839183714886, 57.139445866924625, 57.114117795929744, 56.74120819616256, 56.69859109656443, 56.657990523316094, 56.601964570937554, 56.548390139231714, 56.426730549053644, 56.39139200137274, 56.32835072880015, 56.27997562989596, 56.25503531948086, 56.196882914243574, 56.069837626316506, 55.99718952499792, 55.84944137335053, 55.821303654135946, 55.76935927321276, 55.76687597781963, 55.75148023172222, 55.588584963352986, 55.515082760748825, 55.28557608111298, 54.97774145264099, 54.92325151189637, 54.74941437044218, 54.7359273658733, 54.432252032307616, 54.431972484886685, 54.40310604991811, 54.29681085945454, 54.25822852590612, 54.20476273569662, 54.188171933139486, 54.16095057963874, 54.12153046050251, 54.06739736229228, 53.94070891689964, 53.91722775134251, 53.83262951376403, 53.72118179590438, 53.69172534804855, 53.65227431086696, 53.64226383418096, 53.60495385220576, 53.59820304874749, 53.53589092026641, 53.52254390357672, 53.515653112239264, 53.45587108455689, 53.340698637776285, 53.30085941167739, 53.204590156922436, 53.18945807088579, 53.17704245059518, 53.16684603729939, 53.05831618081823, 53.05217042093244, 53.02229486611392, 53.01203618838988, 52.9911933367903, 52.990898330346674, 52.90030935144679, 52.89628961608219, 52.88502224684572, 52.77140212739679, 52.76001022930377, 52.734526711406936, 52.60852188971272, 52.53222678292417, 52.51011072307634, 52.49009019804191, 52.48627228664731, 52.43117730233027, 52.35422991822611, 52.279316232844636, 52.211913841395756, 52.19133464985693, 52.175938903759516, 52.166797559044255, 52.05094191690269, 51.98128897207607, 51.97528362840702, 51.960896573822055, 51.94242837611925, 51.93502529534545, 51.85058207633139, 51.8119533657149, 51.75144176560352, 51.749548054760155, 51.70748962166637, 51.70595318169495, 51.62869490378696, 51.61340865586094, 51.56023787209509, 51.52780129843251, 51.49168680125456, 51.486534273858496, 51.44883695964103, 51.34333317769716, 51.290985148834, 51.28685677197308, 51.281006018530924, 51.26433749252281, 51.205936457909964, 51.1644216606354, 51.13471615506645, 51.132450571003545, 51.111390008073755, 51.06552912260808, 51.06074889676913, 51.04617590557439, 51.01051143340446, 51.00709716994986, 50.903440721781315, 50.89181608167293, 50.882814724836884, 50.861475042823685, 50.84112859330022, 50.83841255589169, 50.828045236671336, 50.811454862451725, 50.805759127573936, 50.778599181826415, 50.760580580794155, 50.759510053190965, 50.74582165298962, 50.70565650240172, 50.6859305554734, 50.663876760053874, 50.555114589894856, 50.55382635096146, 50.540386151798195, 50.514700809931384, 50.50602452090928, 50.49303520342912, 50.48490297856383, 50.40927475143848, 50.377800920557775, 50.33915675091861, 50.30239040476262, 50.302250845220904, 50.28278855835334, 50.25764685230575, 50.24940555760656, 50.16919935694976, 50.16100486765619, 50.15307446676087, 50.13873421758147, 50.084368377355915, 50.07038497071092, 50.06679980133169, 50.02720877627088, 50.02641779608864, 50.023328600448004, 50.01483953304828, 50.01328763405415]}], [{'positions': [[24, 399], [23, 457], [22, 457], [15, 403], [24, 400], [16, 433], [347, 497], [28, 468], [37, 411], [23, 433], [24, 415], [24, 416], [47, 423], [25, 399], [7, 438], [23, 465], [28, 469], [9, 471], [247, 503], [406, 489], [7, 437], [33, 419], [23, 456], [25, 412], [348, 497], [24, 444], [36, 416], [35, 404], [15, 402], [10, 399], [35, 405], [188, 507], [14, 415], [40, 416], [37, 416], [37, 410], [212, 491], [14, 403], [49, 429], [10, 400], [29, 468], [26, 440], [28, 444], [24, 443], [22, 433], [13, 415], [48, 423], [23, 444], [41, 431], [24, 412], [192, 511], [3, 421], [23, 400], [27, 440], [41, 447], [4, 421], [0, 410], [187, 507], [23, 464], [365, 465], [31, 418], [16, 439], [15, 439], [9, 412], [356, 491], [212, 492], [15, 406], [34, 419], [18, 443], [48, 422], [2, 444], [0, 409], [15, 405], [15, 408], [18, 422], [345, 476], [16, 432], [21, 436], [43, 431], [8, 395], [10, 433], [28, 445], [40, 431], [366, 465], [9, 395], [15, 433], [8, 471], [37, 412], [15, 448], [35, 451], [30, 418], [405, 489], [8, 417], [193, 511], [6, 438], [50, 429], [334, 486], [8, 412], [7, 417], [343, 475], [246, 503], [20, 436], [356, 492], [3, 422], [48, 435], [407, 489], [23, 416], [1, 405], [43, 432], [47, 424], [332, 479], [24, 474], [12, 443], [16, 463], [3, 471], [34, 451], [19, 443], [16, 438], [15, 407], [8, 437], [333, 479], [39, 416], [3, 430], [180, 506], [49, 435], [34, 405], [8, 416], [3, 414], [27, 406], [334, 491], [38, 410], [347, 498], [2, 445], [41, 416], [346, 476], [3, 470], [50, 428], [24, 475], [41, 446], [37, 415], [22, 434], [372, 503], [16, 462], [27, 409], [23, 466], [23, 408], [16, 453], [248, 503], [348, 496], [240, 487], [366, 464], [372, 502], [14, 409], [197, 505], [9, 400], [26, 444], [357, 463], [3, 431], [333, 486], [35, 430], [40, 436], [10, 471], [15, 449], [205, 502], [29, 428], [376, 461], [347, 479], [2, 443], [26, 406], [211, 492], [372, 369], [25, 411], [9, 409], [0, 402], [14, 408], [1, 404], [30, 414], [19, 422], [29, 429], [360, 494], [223, 499], [13, 410], [15, 415], [25, 474], [333, 478], [44, 423], [0, 405], [360, 495], [7, 390], [8, 451], [191, 511], [240, 488], [17, 443], [483, 240], [49, 434], [16, 448], [188, 506], [39, 464], [187, 508], [42, 439], [206, 502], [224, 499], [10, 423], [13, 443], [180, 507], [213, 491], [343, 0], [21, 422], [50, 434], [14, 410], [33, 463], [263, 509], [24, 433], [13, 421], [421, 485], [19, 411], [199, 494], [329, 470], [25, 415], [9, 394], [24, 413], [26, 409], [33, 464], [241, 487], [411, 498], [42, 446], [384, 511], [48, 440], [358, 501], [9, 451], [33, 436], [1, 445], [12, 421], [200, 494], [25, 440], [187, 509], [28, 406], [347, 480], [26, 421], [127, 469], [376, 460], [329, 471], [228, 107], [28, 448], [207, 502], [45, 438], [35, 450], [1, 409], [0, 434], [209, 491], [127, 264], [304, 0], [11, 459], [336, 461], [41, 436], [39, 437], [27, 425], [8, 425], [365, 326], [330, 493], [3, 451], [200, 493], [20, 442], [9, 425], [421, 507], [6, 426], [34, 436], [1, 450], [0, 435], [18, 423], [27, 469], [330, 492], [217, 484], [49, 444], [40, 464], [391, 153], [27, 424], [335, 491], [359, 142], [2, 471], [259, 408], [365, 325], [184, 498], [174, 433], [197, 506], [378, 433], [421, 486], [47, 441], [40, 432], [155, 505], [28, 115], [268, 409], [500, 351], [17, 453], [128, 441], [223, 32], [29, 458], [21, 435], [344, 483], [10, 459], [376, 462], [127, 263], [405, 454], [421, 484], [51, 439], [0, 148], [19, 421], [191, 216], [333, 487], [331, 497], [22, 458], [0, 415], [62, 112], [241, 433], [390, 238], [331, 492], [11, 433], [357, 501], [181, 506], [366, 325], [405, 322], [4, 470], [336, 462], [376, 92], [26, 474], [192, 504], [172, 94], [205, 503], [375, 462], [28, 116], [492, 278], [66, 442], [400, 500], [193, 504], [355, 492], [154, 350], [202, 483], [35, 441], [493, 0], [169, 505], [442, 30], [48, 297], [26, 420], [483, 239], [245, 376], [35, 431], [348, 366], [150, 251], [3, 450], [306, 74], [172, 10], [476, 502], [28, 440], [500, 73], [164, 331], [10, 409], [37, 434], [24, 456], [287, 25], [11, 458], [499, 56], [45, 239], [291, 228], [428, 466], [482, 275], [222, 289], [105, 354], [490, 468], [347, 64], [307, 123], [357, 464], [143, 440], [15, 453], [199, 109], [469, 273], [431, 99], [208, 480], [193, 503], [500, 56], [137, 22], [25, 421], [463, 100], [265, 347], [149, 483], [22, 422], [356, 93], [451, 326], [323, 363], [407, 218], [494, 0], [106, 16], [401, 499], [284, 455], [19, 416], [40, 447], [28, 458], [342, 475], [294, 386], [341, 493], [307, 122], [225, 190], [223, 500], [62, 113], [328, 471], [49, 344], [500, 27], [124, 267], [286, 500], [248, 170], [391, 509], [19, 406], [9, 450], [423, 225], [89, 285], [180, 220], [55, 268], [291, 149], [495, 381], [476, 28], [345, 468], [157, 443], [275, 178], [281, 483], [1, 399], [487, 284], [52, 159], [399, 501], [496, 34], [289, 439], [259, 409], [32, 430], [272, 40], [208, 491], [46, 183], [499, 473], [1, 426], [223, 31], [184, 479], [348, 36], [292, 149], [41, 415], [362, 391], [207, 493], [430, 457], [313, 151], [391, 238], [19, 399], [511, 96], [323, 485], [85, 251], [226, 74], [134, 154], [173, 511], [1, 402], [17, 399], [274, 209], [37, 377]], 'threshholds': [342.71259372373, 291.43403965420924, 242.97301066083156, 240.67094443163907, 237.80731155400497, 227.40314242352662, 221.39048188243567, 216.34453405259615, 204.16002697194315, 203.91801191788056, 196.78345737174647, 193.8021678952636, 192.66096747859228, 190.62730072805053, 189.22774222746003, 187.1045273925887, 178.5420589153194, 178.36320923434835, 176.95474213105808, 174.65238175209697, 174.2471605358612, 173.2145505267494, 170.911958262448, 167.3476688446991, 166.76095834852228, 166.49099151185476, 165.5378280696005, 164.85121762889648, 164.54631589248814, 163.0113776267979, 161.65411030131656, 160.1868698618563, 158.02465272979885, 156.75004398232213, 156.578488312291, 156.47284497080548, 155.5327339671346, 153.1136187526909, 151.3695511749336, 151.05012325273606, 151.01843171052516, 150.08268182573065, 149.5519049561338, 149.2480114829003, 148.137648935492, 148.09209808715516, 147.6817552615687, 146.9080469721954, 146.68597514805379, 146.62215749764658, 144.8482607421388, 144.80126749297926, 143.27436869801815, 142.58684189160033, 142.461923913207, 141.86742214733903, 140.35023925095777, 139.7974395039867, 139.07851701847667, 137.76692464185123, 136.8048212505141, 135.58802395310045, 134.99179981065132, 134.88721282275878, 133.84558642612575, 133.43643822866161, 132.92173901551047, 132.41708291044083, 131.20286166255644, 130.79604174192102, 130.14692679146447, 129.17065405687256, 127.37437886646882, 127.16580864924373, 126.79202991750586, 125.47862112515048, 124.93320942826804, 124.82741106821814, 123.25306814241432, 123.1077564807544, 121.51957013618481, 120.61319940413267, 119.66999963315874, 118.75669130436346, 117.70567579031466, 116.34235545908369, 115.48673447983245, 114.03457889266579, 113.74763349286145, 113.3007725221571, 113.01230614140398, 111.39385605309866, 111.15553438157409, 110.04105848798994, 109.79597055398446, 109.49204616270566, 109.43128593321873, 108.389597700495, 108.15908318602166, 107.9999276772586, 107.91740823045821, 107.4475788119706, 107.36010866174419, 107.26262889150684, 106.8459225947044, 106.78891844052133, 106.77401909649997, 106.6313925542033, 106.27513559308397, 105.45513228059713, 104.52178796774474, 102.92463118438455, 102.74450872350283, 102.35145449818219, 101.31015445437569, 99.2510363889949, 98.77622363568574, 98.53715607603445, 98.20082731415104, 97.18620584470108, 96.9905012727747, 96.53800597494583, 96.42946108777952, 95.66610465860384, 95.56282051199236, 95.36519173951473, 95.16374505564241, 94.94188965781845, 94.42630628201147, 93.77379295546052, 93.5693970638269, 93.5280677748246, 93.50385660850095, 93.47458695392996, 93.4196156417944, 92.92523324513391, 92.85506758253347, 92.84955864094051, 92.47165153234165, 90.91928467850643, 90.56220624749706, 90.19578336278987, 90.13786412790549, 89.52515825273304, 89.41748121252485, 89.05273646901844, 88.97527636714045, 88.95064652219165, 88.86660695111753, 88.69425987256672, 88.63326690106445, 88.55372800840834, 88.29027966152131, 87.96461279696437, 87.5284910187, 86.67653164726642, 86.646982873612, 85.5608306358523, 84.99924681503789, 84.46710441139419, 84.41245945208513, 84.16785160445798, 84.12658500822151, 84.05610930849221, 84.05224544836705, 83.97897598777833, 83.92113404800737, 83.85523717848451, 83.6606658269271, 83.56466023223287, 82.6462457531097, 82.50163231749595, 81.94695560371676, 81.56203445993644, 81.13956887881548, 80.96942597657439, 80.9392554153122, 80.80685620435665, 80.79751346400892, 80.66064449268066, 80.14496836273752, 80.06016830118905, 79.99923759411499, 79.88549294580949, 79.32567873531949, 79.11167644327733, 78.92661916632971, 78.75802687807023, 78.70030903881832, 78.65440134794704, 78.63565317448573, 78.57090498435466, 78.56187228113573, 78.54363682544833, 78.05769669078194, 77.87403543758909, 77.57523308399848, 77.46993112602463, 77.27501839095547, 77.20760054048391, 77.1782059287188, 77.06301802291554, 76.80107519795462, 76.71034623117548, 75.3433638637894, 74.9985602085164, 74.89991672820214, 74.79896043008193, 74.72202893333802, 74.69237066151211, 73.97579105517848, 73.93949019305322, 73.8971054071329, 72.92263362924825, 72.88572815188803, 72.57101861943872, 72.52268904092759, 72.24513318687657, 71.89492923150698, 71.49004854210796, 71.35490194736093, 71.33795515894442, 71.18885650393536, 71.06539681372503, 70.86098546306874, 70.8129826657216, 70.5513812242724, 70.00342439590608, 69.81335329442915, 69.51372861427345, 69.41704025255578, 69.18789041545433, 69.13763792140452, 69.09643230458377, 68.98981118963113, 68.85238355179854, 68.8189073685781, 68.56073564960616, 68.35236725635103, 68.27956413646807, 67.48071414104709, 67.41071981270875, 67.40134572597813, 67.14711601891983, 66.93537973927815, 66.753115366515, 66.51595740506724, 66.3478159984908, 66.08027062112578, 66.04094325612564, 65.48097402707118, 65.45538186767803, 65.43084477686536, 65.22033490006633, 64.97900218468959, 64.94740382495232, 64.79793244004864, 64.58630523024088, 64.43871166882035, 64.38746508560573, 64.3487436208531, 64.2577041886077, 64.04432239916076, 64.01534732269582, 63.93174231760708, 63.74430995842519, 63.59092747965326, 63.3513175691953, 63.28071819728453, 63.211639806322445, 63.05853730330898, 62.933323461797066, 62.882325507958015, 62.76647029415402, 62.55344577557892, 62.496022514433136, 62.47038354963442, 62.288196900322205, 62.2576076604349, 62.236236632038796, 62.1791861007876, 61.33663259080508, 61.24172887009696, 61.13515456054993, 60.93403337282916, 60.60170845895015, 60.54192557459272, 60.45520131249299, 60.44435262188169, 60.25597426395314, 60.24484645425838, 60.21664689895305, 60.13723210681599, 59.99013580414662, 59.94759599966192, 59.8976376553807, 59.751161855306506, 59.676372270443984, 59.61297372699951, 59.51752722714723, 59.50821497650736, 59.45110260916542, 59.19766431062685, 59.07451508588288, 59.06222313777374, 58.97934770511402, 58.659267505600944, 58.57004448908546, 58.29712887299413, 58.236275889371086, 58.151599500004096, 57.878187481836704, 57.82226974261697, 57.74352268681815, 57.50229861293778, 57.493793658177864, 57.46959795087693, 57.2327663422557, 56.98877985389872, 56.97664335269157, 56.97135083741626, 56.91169291025288, 56.87467836305885, 56.826970572155446, 56.742620107277475, 56.504546636790934, 56.41027973437571, 56.36598620692686, 56.348868084248245, 56.30154805392455, 56.284088119396685, 56.16765878006559, 56.16354629056487, 56.106588085112286, 56.01284893115604, 55.93854028934702, 55.88482629809948, 55.8225300569786, 55.79900208601585, 55.73723316501648, 55.64946886502145, 55.644021331181754, 55.60615311103966, 55.56718301691151, 55.47238793769974, 55.38471724851587, 55.32344472959258, 55.11977841038796, 55.03971134093534, 55.01113991241045, 54.95149744426977, 54.833919425547, 54.72723647450362, 54.70834874150064, 54.619699850512184, 54.557481332842286, 54.48829430038389, 54.32847062694498, 54.20155029621202, 54.166879484869376, 54.05557132655144, 53.98402509921897, 53.97061581810106, 53.80343672596896, 53.66361897521685, 53.57470599583017, 53.565720098016826, 53.38569039127126, 53.37055873357211, 53.317093371700125, 53.307657020541235, 53.29645191573303, 53.114249807398146, 53.08805217609502, 53.083566956699705, 53.05172039592438, 52.991938368241996, 52.932295471763815, 52.872078878096076, 52.81344510146785, 52.7516456907606, 52.74284572955705, 52.73690136530372, 52.726953153046026, 52.637140551980735, 52.5839538808547, 52.58010505141472, 52.56314194730048, 52.385673259398985, 52.379775700551235, 52.320552339373236, 52.31882953445448, 52.28120951535045, 52.244737318963075, 52.222591197744904, 52.21332575251064, 52.19179970555014, 52.165726603103536, 52.14171726074989, 52.03342057462159, 51.93514939586448, 51.933038402028416, 51.93137786153794, 51.91408883293468, 51.90311647014185, 51.84771102035846, 51.71616505401339, 51.69505811401557, 51.65376017139616, 51.65195964302643, 51.62998357105786, 51.55688544473125, 51.54536987445671, 51.50149545397054, 51.44624502275155, 51.398024942411794, 51.36147587924845, 51.34314724108738, 51.305635863479715, 51.29537718575568, 51.25940224811941, 51.20683693626356, 51.20315858441069, 51.176045444068706, 51.15127603957825, 51.0403715292003, 51.01833362114094, 50.99736624068484, 50.96992717585388, 50.901314268922576, 50.832934104006625, 50.80482773117495, 50.78938517967194, 50.78864057655782, 50.772872528903285, 50.7549003049391, 50.75485392787107, 50.746737162028445, 50.73582706366384, 50.72364375705109, 50.650964737687104, 50.59808853202741, 50.596272972972514, 50.581715440800465, 50.54040161082088, 50.47535841424609, 50.453770102857305, 50.429031616412196, 50.38829234029716, 50.34912042219901, 50.341034574401775, 50.250088752967514, 50.14748694504193, 50.10120695261358, 50.10026052552942, 50.09670670253311, 50.00762281722179]}], [{'positions': [[320, 488], [320, 487], [192, 511], [49, 430], [319, 488], [191, 511], [342, 494], [27, 413], [37, 416], [8, 390], [49, 431], [322, 488], [319, 489], [343, 494], [376, 510], [51, 438], [2, 399], [43, 424], [9, 390], [329, 492], [12, 397], [1, 399], [49, 429], [20, 401], [50, 452], [33, 402], [39, 423], [321, 477], [205, 488], [336, 495], [28, 413], [30, 417], [32, 458], [43, 423], [13, 450], [39, 422], [51, 452], [51, 437], [52, 437], [257, 487], [12, 444], [358, 486], [376, 511], [40, 457], [16, 404], [183, 497], [318, 489], [329, 493], [38, 412], [40, 412], [39, 457], [12, 443], [39, 412], [337, 459], [37, 415], [32, 402], [321, 478], [54, 432], [17, 404], [332, 484], [388, 457], [9, 453], [336, 486], [16, 405], [12, 398], [328, 493], [205, 487], [2, 451], [196, 494], [4, 427], [19, 401], [200, 493], [41, 412], [20, 400], [45, 437], [17, 472], [40, 443], [201, 492], [187, 508], [355, 508], [386, 464], [336, 494], [191, 499], [223, 486], [326, 495], [389, 457], [339, 467], [1, 394], [8, 391], [216, 485], [386, 460], [10, 453], [42, 424], [222, 486], [338, 467], [344, 485], [3, 451], [190, 494], [182, 497], [337, 504], [345, 482], [344, 482], [204, 502], [342, 495], [256, 506], [200, 492], [3, 468], [230, 511], [53, 432], [216, 486], [364, 502], [13, 397], [19, 413], [4, 428], [23, 408], [415, 476], [336, 504], [325, 495], [17, 413], [192, 505], [337, 494], [13, 451], [333, 484], [12, 403], [342, 459], [192, 508], [335, 495], [19, 412], [337, 479], [13, 403], [174, 511], [189, 494], [33, 401], [375, 511], [18, 413], [193, 511], [336, 485], [17, 414], [10, 390], [10, 431], [342, 501], [1, 395], [335, 489], [11, 444], [369, 494], [30, 425], [178, 507], [195, 494], [414, 476], [341, 459], [25, 431], [0, 474], [22, 460], [364, 501], [204, 488], [369, 493], [323, 488], [24, 408], [360, 507], [4, 426], [334, 465], [0, 444], [31, 417], [172, 506], [55, 432], [40, 442], [23, 459], [359, 486], [33, 438], [222, 487], [182, 504], [10, 432], [206, 487], [355, 507], [325, 478], [346, 482], [32, 459], [39, 409], [183, 496], [1, 444], [1, 397], [28, 412], [27, 402], [18, 422], [22, 423], [335, 490], [45, 438], [4, 437], [0, 473], [189, 495], [179, 507], [386, 465], [186, 508], [387, 464], [363, 502], [33, 458], [357, 486], [344, 483], [343, 493], [208, 493], [14, 450], [21, 477], [36, 416], [21, 423], [330, 501], [258, 487], [30, 426], [23, 458], [40, 456], [184, 501], [205, 502], [337, 458], [247, 491], [334, 480], [4, 468], [336, 505], [51, 439], [50, 453], [201, 491], [173, 511], [11, 398], [1, 473], [385, 460], [182, 503], [326, 478], [37, 419], [48, 463], [340, 459], [8, 453], [200, 494], [256, 487], [16, 472], [184, 500], [52, 436], [321, 476], [11, 431], [343, 485], [193, 505], [345, 511], [386, 459], [23, 460], [334, 479], [238, 486], [398, 505], [334, 496], [192, 489], [25, 432], [192, 488], [337, 467], [214, 496], [226, 0], [412, 499], [25, 398], [3, 469], [338, 479], [33, 467], [22, 408], [334, 495], [337, 460], [255, 506], [25, 399], [336, 510], [343, 501], [6, 432], [325, 479], [380, 474], [389, 456], [52, 452], [35, 438], [349, 453], [191, 505], [178, 508], [341, 501], [363, 464], [248, 491], [413, 499], [339, 501], [34, 467], [382, 499], [34, 438], [190, 499], [177, 349], [411, 477], [349, 454], [378, 456], [0, 399], [508, 188], [247, 492], [196, 493], [375, 358], [31, 425], [45, 436], [53, 433], [329, 504], [378, 455], [3, 442], [41, 442], [381, 239], [17, 417], [356, 507], [217, 485], [370, 466], [32, 403], [5, 432], [188, 499], [100, 124], [343, 459], [4, 445], [213, 496], [385, 483], [284, 434], [334, 119], [361, 507], [18, 472], [11, 390], [44, 54], [459, 385], [26, 398], [2, 394], [33, 468], [207, 493], [329, 501], [38, 465], [226, 277], [13, 443], [183, 160], [323, 483], [489, 327], [172, 507], [173, 447], [6, 87], [204, 483], [344, 501], [4, 442], [24, 432], [1, 443], [23, 405], [103, 67], [381, 371], [422, 507], [177, 350], [265, 511], [10, 456], [223, 497], [82, 487], [38, 415], [24, 416], [354, 478], [495, 173], [413, 83], [509, 188], [71, 423], [29, 411], [337, 480], [490, 327], [338, 478], [234, 502], [270, 50], [38, 413], [421, 20], [186, 182], [32, 425], [353, 478], [339, 466], [424, 289], [399, 505], [216, 487], [31, 381], [344, 511], [321, 479], [38, 457], [478, 287], [335, 99], [49, 427], [385, 482], [373, 505], [4, 451], [39, 433], [207, 494], [190, 493], [63, 222], [359, 507], [103, 444], [421, 251], [491, 257], [450, 406], [373, 504], [327, 395], [12, 404], [450, 407], [238, 0], [34, 419], [45, 445], [224, 297], [421, 507], [341, 344], [85, 0], [489, 355], [32, 438], [402, 22], [237, 0], [34, 381], [412, 477], [424, 288], [451, 64], [485, 43], [179, 387], [2, 442], [450, 268], [52, 446], [186, 183], [204, 503], [172, 505], [248, 490], [334, 490], [490, 129], [319, 279], [47, 426], [124, 100], [489, 328], [283, 248], [22, 461], [3, 323], [385, 239], [352, 508], [432, 107], [258, 503], [241, 249], [193, 508], [238, 487], [310, 228], [360, 298], [79, 439], [23, 416], [156, 61], [342, 476], [369, 495], [399, 465], [20, 477], [29, 408], [6, 390], [405, 294], [18, 421], [373, 316], [112, 189], [178, 349], [294, 158], [29, 426], [264, 511], [28, 51], [24, 458], [375, 180], [490, 228], [308, 410], [79, 236], [24, 415], [327, 304], [373, 120], [329, 495], [411, 222], [411, 163], [21, 212], [246, 71], [368, 229], [448, 441], [222, 454], [18, 423], [126, 293], [6, 166], [442, 32], [39, 465], [380, 473], [355, 478], [407, 8], [1, 162], [58, 351], [390, 89], [256, 355], [204, 407], [306, 185], [193, 504], [483, 120], [484, 383], [43, 267], [124, 41], [65, 135], [338, 504], [378, 355], [266, 127], [197, 504], [39, 434], [22, 409], [483, 200], [56, 474], [342, 475], [204, 118], [110, 358], [486, 89], [83, 487], [25, 471], [384, 126], [113, 63], [51, 422], [473, 35], [27, 460], [80, 114], [147, 322], [356, 469], [113, 510], [10, 459], [405, 216], [488, 291], [414, 477], [0, 470], [0, 215], [178, 387], [43, 416], [355, 509], [419, 24], [378, 474], [16, 139], [47, 442], [22, 422], [161, 25], [70, 114], [26, 446], [267, 177], [360, 422], [334, 466], [235, 502], [126, 109], [192, 499], [295, 495], [134, 323], [235, 456], [505, 73], [108, 248], [381, 283], [224, 486], [484, 355], [52, 129], [369, 49], [450, 0], [350, 216], [340, 248], [30, 418], [150, 300], [20, 392], [24, 70], [116, 94], [501, 252], [115, 411], [421, 508], [495, 225], [0, 253], [210, 468], [234, 151], [93, 205], [271, 268], [109, 201], [195, 228], [195, 495], [285, 50], [20, 212], [354, 9], [240, 394], [164, 164], [5, 426], [124, 124], [475, 132], [181, 168], [153, 248], [335, 479], [4, 196], [351, 155], [395, 252], [256, 309], [293, 392], [87, 12]], 'threshholds': [335.4688879618443, 305.1416903111945, 294.6941259899335, 294.3878746068386, 292.7428069235923, 272.86146581996985, 232.83599871880102, 228.50040701195843, 207.9227219683419, 195.16953887990448, 188.53512515807438, 183.01999761703777, 181.57893934985793, 179.6232917960359, 179.1542988781236, 177.53106856397923, 177.4613228650164, 173.9521284315846, 172.48325794134172, 172.2099086159401, 171.0917543705032, 170.34686656736775, 169.77784917607175, 166.39358903673093, 165.54187829467296, 164.25013596549493, 163.76300120270628, 163.11815376031487, 162.42316203703248, 161.750705052223, 160.69979817967052, 158.03000750950235, 158.02791240302653, 156.87662335788087, 156.84310036925487, 155.5290246972364, 153.80449755813507, 152.28450415685916, 150.19105666364734, 148.3590233902626, 148.309685976914, 147.6766027341727, 147.15445449151719, 146.70239418801123, 145.87911617161154, 145.74800519958933, 142.60113576371154, 141.58424871019875, 140.4425046577083, 139.98740196396736, 139.74529372743103, 139.0125578845256, 138.94422366834021, 137.63395087703108, 137.6022589064827, 136.5834004186755, 136.42970790277474, 136.3191610916062, 135.39775145599106, 135.27474179078882, 135.02852020807674, 135.00036702983945, 134.6869611953462, 134.3674542646853, 133.85829662452255, 133.59486459333328, 132.67960028926632, 131.21655049109532, 130.61973633575886, 130.25952190370325, 129.7943632128832, 129.48562810605765, 129.35642630390151, 128.61763788358382, 128.6030026279608, 128.21295944649233, 128.13238051594092, 127.91468441302327, 127.62569071214864, 126.9660375365471, 126.74647949750644, 126.38365724120119, 125.7295452102505, 125.49583243030276, 125.08361220957075, 123.75646821160849, 123.47934649520529, 122.66505480495641, 122.39719896212503, 122.02222517392738, 121.78047335158797, 120.82982455110964, 119.12520886720901, 119.00193511360845, 118.63690996600606, 118.22105691381412, 118.1806122158053, 118.06287917851807, 117.83422702850531, 117.78853619228921, 117.65138810187754, 117.48973341036111, 117.4031023307351, 117.36057755693552, 116.22896850998762, 115.78794240536524, 115.18965450282317, 115.0543065124437, 114.80909362124409, 114.16042869579562, 113.79070147414271, 113.59867482573159, 112.59634487605331, 111.82201651242237, 111.3595266252677, 111.23636151316356, 111.0004449852436, 110.98922484975022, 110.32798842877162, 109.59413525285743, 109.1507817280814, 108.77026722357031, 108.51599156778148, 108.24740529584608, 107.57516687904182, 107.3231095735728, 107.21825806894452, 106.51847023246293, 106.47973330868763, 104.43967345389697, 103.35879741571478, 103.28884989278201, 102.53753678233991, 102.18044203563281, 101.70927628779364, 101.0684172343839, 100.87103709128185, 100.74988979054004, 100.53081269455282, 100.43043095029716, 99.4173922978868, 98.62572767190946, 98.13804970163919, 98.11816916448397, 98.0354951274567, 97.8689210788971, 97.72126610972336, 97.67689485882352, 97.39918398620813, 97.2613990775036, 96.95559686274167, 96.78256658882992, 96.72758067434671, 95.47549034964518, 95.46048279246507, 94.83551674390392, 94.75990397580124, 94.72872515136419, 94.61893840233249, 94.34945250871856, 94.05566312298228, 93.66485945103935, 93.13679904718852, 93.1049524864132, 92.46735267789367, 92.37736917090378, 92.28241907312758, 92.16817716607098, 91.63976034802317, 91.26359150336583, 90.87596935286217, 90.37042780012403, 90.23272018653293, 89.25404316501141, 88.77238642577042, 88.35907893339994, 88.118413526024, 87.94903025758215, 87.86253916583536, 87.70066761966372, 87.54387087743714, 87.46107273989095, 87.28948658015199, 86.88471496058682, 86.40082398366576, 86.16366559388047, 86.14361372246314, 86.11249673411682, 86.0960154297311, 85.67125377483933, 84.85904130370602, 84.83829120624257, 84.41548552662246, 84.2680478404414, 84.0122971524343, 82.9819230943526, 82.71906476035286, 82.6513982805057, 82.53191109191691, 82.40491346607045, 82.316791466866, 82.23099817282778, 82.21716935640973, 82.15276254979027, 82.05787514477991, 82.05494139604119, 82.03861511021984, 81.2879538487557, 81.23361935491307, 81.15958983218744, 81.08523481331025, 80.94471840817462, 80.89801888044605, 80.744947295478, 80.66897854151595, 80.55628939012848, 80.08284302754123, 79.96124527345388, 79.87376052087978, 79.85422051056126, 79.78455253504947, 79.72276772668988, 79.60916306626362, 79.4264022914243, 78.92815474962616, 78.66427183675377, 78.00790925242536, 77.81220425216142, 77.68134148117727, 77.32032060991673, 77.14654573289083, 76.70375044628166, 76.69673555442516, 76.61119046142494, 76.59006806240443, 76.37674853738574, 76.12078056638595, 76.05516324428413, 75.46527122666801, 75.4534297319045, 75.41003668280923, 75.31052407052434, 74.81980328168147, 74.63940213005385, 74.53825903864875, 74.50333959793058, 74.38275096369316, 74.27847358459192, 73.99950496275096, 73.57538098282713, 73.41821236738105, 73.38914325176742, 73.30260535461505, 73.2875819100747, 73.22408975581907, 73.12471670307585, 73.03406588808518, 72.80808211340026, 72.44094640029934, 72.26760608925878, 72.11175577411643, 71.7836833376173, 71.77429336352644, 71.65285191301604, 71.41072736078203, 71.19703510586874, 71.11550974823318, 70.98131043724541, 70.94954117158352, 70.60503337942919, 70.3310313483745, 70.07465972943476, 69.76927704997301, 69.63385133614258, 69.59469530540458, 69.23188936479708, 69.19791635116302, 68.97109521922778, 68.93733863191142, 68.85233717473045, 68.65757902988818, 68.4512129889728, 68.15563853388949, 68.08073987919315, 67.60768127718565, 67.36571174351602, 67.29576464892082, 67.18560516999456, 67.12003422496073, 67.0526318335119, 67.0393153065301, 66.9998801567087, 66.63614324803967, 66.34359486749375, 65.94613314622873, 65.58612053814309, 65.51648348067668, 65.31534726227078, 65.1704229328532, 64.8360179431834, 64.81998623546816, 64.66696145590574, 64.65985295323802, 64.53639283469016, 64.50450032518437, 64.47932727275384, 64.33465114437426, 64.07345335086507, 64.04489738136282, 63.72770369684537, 63.403541925876986, 63.21261757978952, 63.09922977401841, 62.92756546249103, 62.62176367606659, 62.565256352297126, 62.50319242485406, 62.442510347155604, 62.38241742566936, 62.324125460890365, 62.16770144855844, 62.12162285176261, 61.91019703758724, 61.67546010710436, 61.590939592976866, 61.54017438115319, 61.32887266749688, 61.03640201040187, 61.02485509374448, 60.903971881400906, 60.77463009136554, 60.54791674425161, 60.43854910218264, 60.1509978021308, 60.054837617209714, 60.033746136234505, 59.927947776184574, 59.89409929140709, 59.84299269607171, 59.73086221118864, 59.667370913608, 59.59195996947532, 59.55461992612978, 59.55314532224909, 59.5530830578208, 59.25870323085973, 59.19504145569199, 59.134995339611365, 58.992291073863676, 58.98730902405472, 58.793389521475326, 58.77996478133473, 58.703529686666926, 58.684238305723966, 58.590654598669666, 58.54153446831377, 58.50574589562487, 58.488285961096985, 58.478632326945416, 58.449393590419774, 58.41624333168838, 58.41596378426743, 58.38823014133038, 58.37281850787274, 58.36141157909452, 58.34449485204837, 58.31742808877452, 58.22398394126194, 58.18214236282333, 58.16263455556275, 57.97801055958794, 57.77921807703347, 57.69524034205011, 57.653118787853046, 57.62656517069054, 57.57826779523732, 57.500963140261305, 57.50009443662806, 57.406882602793345, 57.293806119163605, 57.27527522869506, 57.06808557620195, 56.81075249949288, 56.775211699504496, 56.70548145956438, 56.70406954844947, 56.68091345070634, 56.63452524511919, 56.51328519024126, 56.500697807350974, 56.49065684095713, 56.43802883633545, 56.43296949141306, 56.34242731791878, 56.219820443981476, 56.16107845419444, 56.06404870896509, 55.97375473650888, 55.842581071720886, 55.837646255655045, 55.81157272487091, 55.79425277822228, 55.78851066627648, 55.71705762141765, 55.556086125262134, 55.552206377776756, 55.51733331412663, 55.48154474143769, 55.4471217027956, 55.4454766213278, 55.442698747828544, 55.439734081044435, 55.43754579209495, 55.40439553336356, 55.391700365652014, 55.31234783794322, 55.25681828764076, 55.247894225918195, 55.11068387107827, 55.088537321522615, 55.05589892389004, 55.04309511468209, 55.007756995338724, 55.003364530079544, 54.93270289374047, 54.86719378479744, 54.810671002005236, 54.78787217513401, 54.73350633490845, 54.70763548476934, 54.6894768958579, 54.588303314744934, 54.5551994330816, 54.52917313604061, 54.49336910432897, 54.48098397374619, 54.461506656193464, 54.293908457098716, 54.27092369361769, 54.24051996200268, 54.196707805944754, 54.132952848303404, 53.987625727620866, 53.886700347546, 53.88482252406282, 53.87128914242591, 53.801683003004825, 53.72034358197902, 53.66454994327837, 53.562507658532226, 53.45548332397712, 53.381469260274194, 53.37696858185616, 53.33731529236707, 53.32620337003249, 53.30790564991679, 53.2749258687725, 53.27017698931644, 53.200213579023455, 53.172278112116395, 53.15283171260904, 53.12064376832202, 53.1042238716895, 53.01985837612639, 52.96713761736861, 52.958167178577966, 52.92771664155735, 52.924908278350216, 52.90383225639775, 52.833356985005935, 52.7461354641551, 52.724904423638236, 52.66960718701367, 52.557570312941756, 52.495755014874305, 52.47866781024101, 52.43277557839247, 52.42816625847813, 52.40822345689464, 52.38142078201903, 52.3324092931595, 52.3046911092451, 52.281131791899504, 52.16204867958817, 52.14510146283414, 52.12146442203759, 52.08389078000164, 52.05654489764431, 52.046767591311244, 52.00027031589022, 51.997911121016095, 51.98259309836966, 51.97587321295677, 51.947084073101664, 51.94082967171954, 51.907943073048884, 51.884415102086166, 51.842278945541466, 51.777437144599176, 51.77672345953037, 51.73269359214227, 51.65697261088079, 51.616993825240144, 51.600139362622286, 51.591401665847016, 51.589322018393865, 51.57138114081254, 51.533217914226825, 51.46176486936798, 51.44366854488477, 51.439338772391366, 51.43870195409849, 51.42457898791179, 51.349293429310706, 51.340694863739635, 51.33970205958741, 51.31451311979666, 51.3061631836012, 51.279996898680935, 51.26806222144373, 51.25392379623433, 51.25100593485587, 51.230302642797994, 51.195259101560744, 51.193132648702, 51.10305595923846, 51.098229356331416, 51.067810594031236, 51.05551907425961, 51.04373941558681, 51.037670950814466, 51.037407290753706, 51.0342103102918, 51.027334977976984, 50.949115242299655, 50.948308374757225, 50.94301585948193, 50.92240574989772, 50.892296596388796, 50.87309925459458, 50.87291288964725, 50.820208018249645, 50.80218941721741, 50.80000112826794, 50.770699698976514, 50.681599926304955, 50.668269225313054, 50.65198888822224, 50.63732271455385, 50.61872998799452, 50.57333458655959, 50.52075338734352, 50.516284055308404, 50.467039396095984, 50.45097677033537, 50.44858665741589, 50.44175813050665, 50.42971438343559, 50.3836984794055, 50.31586152197127, 50.31527150908399, 50.296818770403874, 50.26219390779183, 50.24369436370612, 50.23916276724274, 50.22550528508678, 50.20241188010943, 50.197212547307785, 50.18411373165621, 50.15380361085235, 50.1283668983611, 50.12818053341381, 50.12558816818681, 50.08303333301694, 50.07730668009381, 50.066442958797325, 50.05806210455642, 50.039779843463414, 50.00748325768006]}], [{'positions': [[0, 416], [141, 249], [52, 302], [12, 478], [253, 499], [141, 250], [223, 318], [52, 303], [64, 465], [9, 390], [253, 342], [32, 486], [253, 341], [64, 466], [354, 228], [111, 53], [224, 318], [6, 452], [354, 229], [15, 478], [355, 228], [438, 143], [33, 486], [10, 390], [202, 78], [420, 76], [33, 485], [460, 203], [358, 495], [29, 399], [419, 76], [501, 53], [112, 53], [252, 342], [503, 341], [419, 77], [53, 442], [112, 213], [461, 203], [184, 493], [65, 465], [438, 142], [11, 390], [5, 390], [424, 511], [210, 24], [416, 8], [1, 416], [244, 481], [405, 232], [22, 478], [202, 79], [180, 495], [265, 335], [142, 249], [503, 322], [265, 498], [460, 305], [6, 390], [416, 9], [49, 461], [413, 7], [250, 53], [501, 54], [19, 478], [502, 342], [437, 143], [399, 455], [203, 78], [502, 341], [461, 305], [460, 204], [63, 71], [5, 391], [294, 421], [220, 503], [461, 304], [306, 98], [451, 350], [326, 504], [295, 421], [42, 410], [188, 327], [265, 336], [306, 99], [329, 0], [290, 233], [250, 52], [10, 478], [8, 404], [450, 351], [95, 325], [52, 452], [188, 488], [210, 25], [451, 351], [305, 400], [318, 489], [224, 317], [111, 213], [394, 472], [251, 52], [216, 501], [50, 424], [421, 473], [511, 253], [63, 70], [38, 402], [305, 399], [252, 511], [43, 448], [211, 24], [307, 98], [266, 335], [327, 205], [292, 256], [295, 420], [215, 501], [196, 485], [217, 504], [27, 475], [327, 204], [347, 280], [197, 32], [118, 449], [347, 281], [8, 390], [143, 124], [333, 454], [360, 446], [346, 281], [406, 150], [226, 495], [293, 256], [494, 119], [427, 507], [425, 490], [421, 471], [406, 232], [461, 213], [494, 118], [323, 468], [55, 434], [9, 478], [321, 472], [405, 150], [187, 327], [502, 323], [318, 490], [48, 445], [387, 174], [267, 502], [325, 504], [189, 488], [361, 446], [38, 471], [404, 348], [386, 174], [461, 214], [326, 205], [503, 323], [502, 53], [53, 302], [64, 70], [50, 111], [112, 212], [28, 435], [304, 400], [48, 464], [392, 446], [460, 214], [198, 32], [179, 495], [20, 478], [91, 178], [428, 141], [44, 468], [257, 487], [204, 224], [429, 141], [260, 489], [50, 423], [236, 477], [143, 125], [290, 234], [16, 478], [47, 464], [264, 495], [397, 505], [43, 468], [52, 449], [188, 326], [4, 391], [254, 499], [52, 445], [292, 257], [6, 458], [163, 477], [443, 151], [511, 262], [464, 84], [495, 118], [187, 25], [464, 85], [397, 506], [448, 226], [209, 491], [181, 495], [435, 441], [37, 400], [74, 468], [382, 491], [22, 429], [325, 42], [252, 496], [8, 405], [405, 348], [15, 424], [434, 484], [28, 399], [437, 65], [361, 476], [405, 233], [177, 495], [320, 475], [78, 492], [117, 449], [14, 452], [95, 326], [188, 24], [362, 476], [187, 24], [50, 440], [426, 495], [408, 460], [25, 457], [297, 484], [196, 484], [405, 151], [216, 509], [152, 129], [42, 448], [55, 123], [151, 129], [319, 495], [389, 449], [199, 293], [386, 480], [170, 506], [197, 33], [343, 377], [53, 439], [424, 482], [142, 125], [23, 478], [52, 453], [449, 226], [349, 511], [244, 478], [443, 48], [179, 501], [459, 468], [186, 497], [434, 441], [173, 502], [73, 468], [50, 112], [7, 478], [459, 467], [252, 24], [186, 498], [326, 476], [360, 471], [29, 398], [297, 483], [92, 178], [239, 477], [91, 179], [386, 175], [251, 482], [363, 506], [10, 411], [55, 430], [449, 225], [508, 238], [228, 498], [320, 474], [433, 484], [489, 202], [6, 478], [395, 462], [204, 223], [405, 347], [451, 312], [393, 446], [342, 459], [28, 475], [365, 446], [251, 511], [280, 6], [0, 441], [451, 311], [41, 421], [326, 42], [404, 457], [414, 463], [87, 377], [405, 471], [234, 399], [42, 421], [234, 400], [50, 426], [426, 490], [70, 426], [233, 400], [402, 473], [366, 169], [223, 478], [419, 487], [71, 426], [420, 471], [418, 487], [261, 19], [73, 469], [382, 448], [366, 168], [196, 490], [38, 403], [343, 376], [14, 390], [214, 487], [170, 354], [209, 494], [371, 497], [107, 62], [416, 473], [24, 394], [78, 491], [198, 293], [253, 284], [408, 462], [199, 482], [188, 489], [236, 83], [212, 492], [511, 259], [185, 490], [184, 494], [189, 7], [450, 312], [280, 7], [405, 503], [298, 483], [362, 506], [338, 23], [177, 118], [245, 490], [27, 421], [325, 43], [402, 461], [200, 486], [339, 22], [55, 433], [320, 478], [330, 0], [190, 7], [16, 396], [409, 466], [489, 203], [21, 478], [40, 71], [436, 65], [71, 425], [41, 410], [442, 48], [481, 189], [27, 435], [269, 296], [281, 6], [15, 431], [252, 499], [39, 471], [367, 168], [339, 450], [169, 355], [195, 490], [391, 325], [52, 446], [207, 477], [54, 123], [197, 413], [152, 128], [407, 477], [21, 461], [256, 487], [511, 250], [54, 178], [421, 474], [71, 435], [117, 184], [18, 454], [51, 111], [117, 450], [55, 122], [326, 503], [268, 296], [169, 354], [261, 18], [17, 404], [49, 456], [54, 434], [414, 464], [341, 401], [370, 477], [410, 457], [250, 499], [375, 506], [265, 499], [374, 474], [49, 460], [375, 477], [488, 203], [404, 411], [210, 494], [434, 442], [428, 142], [237, 83], [237, 129], [260, 19], [41, 470], [79, 491], [4, 452], [390, 506], [387, 465], [15, 396], [248, 481], [38, 400], [344, 376], [215, 492], [123, 137], [376, 447], [375, 447], [395, 463], [253, 285], [363, 473], [178, 498], [22, 140], [335, 454], [420, 484], [14, 410], [162, 477], [80, 244], [252, 482], [340, 481], [10, 408], [372, 497], [107, 61], [236, 84], [423, 511], [328, 462], [4, 396], [22, 141], [343, 456], [279, 378], [196, 495], [123, 136], [89, 339], [26, 457], [397, 468], [476, 125], [390, 455], [418, 481], [482, 189], [366, 446], [267, 503], [168, 511], [194, 484], [465, 84], [205, 223], [362, 503], [41, 71], [338, 22], [88, 377], [390, 325], [437, 64], [243, 478], [27, 476], [248, 482], [12, 431], [385, 505], [427, 501], [174, 506], [11, 478], [488, 355], [425, 487], [14, 415], [478, 438], [173, 503], [379, 448], [374, 483], [419, 242], [245, 481], [24, 396], [423, 478], [202, 479], [120, 123], [393, 445], [43, 410], [330, 6], [394, 473], [190, 6], [5, 442], [395, 458], [421, 500], [338, 95], [22, 446], [328, 490], [406, 482], [50, 452], [201, 486], [55, 177], [393, 476], [482, 188], [52, 451], [181, 506], [488, 356], [40, 421], [334, 454], [342, 205], [13, 427], [253, 24], [40, 72], [187, 491], [197, 412], [37, 429], [492, 297], [435, 358], [234, 359], [12, 477], [71, 436], [376, 506], [192, 510], [106, 62], [418, 479], [352, 464], [37, 403], [424, 45], [89, 301], [319, 486], [268, 297], [42, 468], [380, 457], [244, 199], [318, 487], [212, 153], [318, 486], [6, 470], [341, 400], [464, 179], [54, 177], [195, 255], [201, 489], [490, 363], [511, 236], [409, 508], [21, 141], [0, 425], [335, 458], [4, 442], [32, 399], [171, 505], [162, 478], [493, 297], [510, 250], [357, 495], [427, 506], [176, 495], [324, 466], [394, 471], [127, 419], [231, 505], [406, 471], [511, 254], [257, 508], [34, 69], [460, 467], [8, 440], [191, 252], [44, 421], [334, 310], [210, 477], [350, 463], [4, 453], [34, 437], [465, 318], [179, 4], [19, 431], [403, 461], [343, 459], [434, 483], [463, 179], [327, 476], [7, 433], [26, 402], [26, 197], [323, 467], [12, 398], [424, 480], [40, 447], [39, 427], [343, 473], [320, 490], [215, 509], [248, 89], [409, 458], [279, 379], [435, 357], [30, 301], [365, 464], [342, 400], [339, 95], [178, 4], [243, 199], [327, 462], [359, 471], [40, 471], [203, 479], [141, 494], [15, 415], [229, 439], [356, 446], [49, 445], [196, 255], [167, 182], [43, 413], [478, 437], [25, 431], [425, 495], [183, 27], [170, 505], [58, 299], [31, 399], [37, 447], [183, 26], [414, 405], [338, 495], [321, 498], [394, 466], [383, 494], [43, 447], [374, 456], [442, 151], [497, 231], [87, 378], [168, 182], [15, 390], [266, 498], [426, 494], [400, 461], [199, 483], [409, 509], [34, 70], [41, 76], [52, 450], [319, 481], [404, 482], [20, 458], [353, 494], [407, 476], [365, 505], [142, 494], [198, 294], [64, 57], [404, 507], [195, 256], [11, 431], [497, 230], [25, 445], [419, 484], [377, 500], [371, 500], [0, 467], [24, 119], [202, 483], [74, 160], [9, 459], [229, 438], [357, 480], [16, 424], [177, 498], [25, 416], [172, 503], [383, 495], [308, 20], [254, 284], [442, 55], [498, 230], [269, 507], [483, 197], [424, 483], [23, 119], [236, 129], [25, 418], [41, 413], [240, 76], [232, 498], [348, 511], [5, 452], [118, 184], [19, 430], [396, 453], [491, 363], [194, 485], [249, 64], [415, 405], [422, 489], [201, 479], [207, 483], [58, 298], [174, 507], [250, 64], [35, 434], [258, 508], [422, 497], [247, 493], [65, 57], [73, 359], [319, 484], [210, 489], [112, 387], [374, 450], [339, 471], [495, 66], [406, 75], [477, 438], [49, 20], [333, 462], [235, 359], [53, 441], [413, 498], [355, 497], [228, 510], [334, 311], [230, 438], [19, 468], [389, 506], [23, 475], [443, 47], [48, 451], [249, 89], [380, 500], [358, 467], [341, 499], [240, 75], [342, 206], [29, 452], [356, 480], [367, 501], [420, 500], [21, 396], [232, 476], [216, 504], [319, 493], [464, 178], [174, 509], [490, 364], [198, 412], [116, 122], [13, 437], [370, 469], [212, 154], [99, 135], [390, 299], [30, 465], [266, 506], [4, 402], [184, 26], [398, 510], [41, 77], [355, 487], [330, 7], [196, 496], [340, 466], [253, 505], [146, 15], [338, 96], [2, 476], [51, 457], [199, 123], [470, 57], [184, 302], [264, 494], [72, 326], [443, 150], [228, 507], [511, 261], [117, 185], [206, 494], [280, 378], [45, 466], [266, 383], [365, 461], [148, 117], [487, 356], [22, 432], [416, 470], [338, 450], [3, 453], [353, 468], [338, 510], [342, 154], [234, 360], [113, 387], [21, 443], [341, 491], [207, 494], [89, 338], [236, 476], [208, 491], [352, 489], [368, 474], [208, 494], [393, 477], [261, 382], [369, 480], [39, 447], [228, 481], [199, 135], [370, 503], [240, 480], [0, 466], [377, 455], [73, 358], [16, 393], [201, 492], [465, 317], [95, 505], [26, 403], [13, 412], [509, 238], [17, 396], [371, 464], [191, 485], [243, 509], [12, 390], [113, 386], [199, 501], [0, 442], [464, 318], [185, 491], [366, 504], [18, 437], [510, 238], [325, 489], [197, 394], [388, 468], [33, 70], [94, 326], [22, 418], [391, 324], [25, 417], [12, 430], [104, 410], [404, 471], [23, 413], [390, 300], [29, 301], [325, 492], [368, 488], [408, 501], [406, 496], [27, 457], [350, 464], [52, 447], [498, 492], [386, 469], [130, 135], [295, 380], [424, 487], [364, 473], [181, 493], [434, 27], [418, 242], [392, 510], [128, 59], [441, 55], [447, 369], [231, 482], [29, 424], [99, 136], [333, 311], [362, 484], [36, 440], [326, 495], [426, 507], [178, 495], [310, 66], [6, 467], [22, 447], [401, 501], [18, 468], [72, 236], [381, 491], [190, 252], [196, 502], [88, 301], [372, 446], [328, 447], [426, 509], [40, 442], [433, 435], [363, 467], [364, 446], [394, 458], [34, 434], [129, 136], [21, 447], [198, 501], [18, 421], [325, 476], [220, 474], [439, 167], [428, 499], [249, 65], [22, 431], [497, 474], [401, 458], [328, 446], [390, 449], [43, 421], [280, 42], [497, 473], [122, 137], [397, 478], [468, 263], [320, 495], [423, 247], [117, 122], [21, 426], [342, 153], [369, 477], [24, 478], [280, 385], [377, 466], [198, 506], [405, 482], [42, 413], [342, 449], [140, 45], [30, 300], [14, 431], [78, 82], [0, 430], [378, 492], [494, 66], [391, 506], [476, 124], [345, 491], [340, 476], [294, 75], [462, 2], [485, 172], [332, 476], [211, 20], [477, 431], [211, 504], [11, 174], [279, 42], [229, 485], [210, 475], [146, 14], [414, 406], [299, 426], [411, 484], [407, 463], [412, 463], [439, 168], [228, 347], [241, 75], [395, 453], [17, 454], [490, 442], [350, 472], [353, 482], [9, 411], [17, 441], [428, 500], [366, 461], [511, 238], [37, 450], [411, 353], [41, 414], [324, 467], [408, 47], [0, 402], [378, 477], [349, 494], [333, 489], [376, 500], [415, 481], [366, 505]], 'threshholds': [173.46288310329754, 166.88944689394714, 162.61441316428397, 158.85309958929236, 157.08275751345587, 155.89324383397138, 155.03417681654514, 153.8312383969199, 153.22562513705495, 148.72086701642579, 143.77780011359522, 142.90568108592308, 142.51366689849772, 142.23066351060697, 140.85908685399176, 138.16010296769093, 138.0145117586101, 137.82422251746544, 137.35304302395372, 136.22354411416686, 136.04863601677195, 136.03244886215475, 134.2398825133118, 132.38239578340043, 132.2048970341286, 132.0636514849014, 130.71251446028333, 130.6187594189668, 130.3481716513667, 130.25860639466447, 130.05206987616194, 129.69725660087803, 128.15358106674995, 127.62988135343785, 127.27073787732294, 127.04610460599966, 127.03673009093154, 127.01289208284005, 126.63171069866581, 126.61369166929613, 125.89127719688045, 125.07908018476981, 124.9894685509995, 124.10002957667864, 123.72651493333893, 123.67197861552633, 123.50389947337817, 123.2945060729129, 122.90832760824449, 122.38416241090174, 122.23104359219056, 122.0858410003646, 121.37459985803672, 121.15019975706636, 121.03408045486405, 120.50240396358859, 120.49059295853291, 120.42856080581025, 119.99201949224567, 119.78649166525564, 119.26633074425463, 118.56424640566476, 118.12401213789961, 117.95217692044763, 117.02634390152795, 116.9390918909692, 116.91289425966609, 116.85925713519445, 116.80695634007438, 116.65163463006604, 116.01311931250777, 115.87982005153609, 115.8678076508479, 115.78055521195162, 115.51991608494681, 115.37905872463693, 115.3573308537064, 115.34291288107605, 115.22648354174497, 115.07308560395033, 114.99281756720276, 114.93871495870049, 114.88549822620402, 114.39819255749083, 114.38726657176609, 114.27777440084051, 114.15446972919462, 113.95195208938168, 113.86165726025037, 112.27452598426133, 112.21651399524082, 112.19998545711195, 112.10006834021198, 112.08234560229839, 112.06047817182622, 111.86475814087703, 111.78785756217852, 111.09092575098464, 110.55183071991272, 110.54920786497784, 110.47398285745496, 110.07855483491252, 109.66281042421693, 109.48486079326204, 109.47561037871299, 109.47322069413099, 109.36801234696829, 109.30729892288691, 109.1724941399892, 108.98878565305316, 108.77479967670877, 108.71253435363326, 108.40719805123956, 108.06203798176969, 107.78656177517182, 107.7278038980246, 107.7221236221695, 107.23854225403971, 107.11845002187843, 106.70008318458552, 106.6698967359632, 106.52295630853335, 106.3436870922621, 106.329735032, 106.3027769102225, 106.07528804194902, 106.02455331983315, 105.95704271522551, 105.82825916335695, 105.79347971051797, 105.62204814100602, 105.61638332417363, 105.18542953232799, 104.99779577751366, 104.88884681406982, 104.72249004850286, 104.67045291344348, 104.5347472238546, 104.50539941749511, 104.40714369776069, 104.1094123001108, 103.92379507164628, 103.81687937858757, 103.78299911908961, 103.66590332843283, 103.51233491305113, 103.38674876998206, 103.12126758104749, 103.09075520793611, 103.07276795328673, 102.67273018249247, 102.5977692633679, 102.55044923304413, 102.53295795213346, 102.05311762862229, 101.8118626366965, 101.77896100734074, 101.33489336915837, 101.20196640974376, 101.0892772583563, 100.93100634058659, 100.46446622835953, 100.37021435662945, 100.36577594263971, 100.3613839057181, 100.04907908853592, 99.83842879552009, 99.80453393367455, 99.68622634252279, 99.5034655676835, 99.35787435860271, 99.32874383523591, 99.31061616436975, 99.04837790462766, 99.00645988775068, 98.93492911944088, 98.8617378106406, 98.82174270930221, 98.76514263139661, 98.64151203526171, 98.62326069221409, 98.60881094486328, 98.56859898886982, 98.42769610816688, 98.3983169554245, 98.1090741968368, 98.06259195210095, 98.01409403769027, 97.7067085775513, 97.43435119962689, 97.36460550066406, 97.36410952692552, 97.19287849637088, 97.18533628439287, 97.1049132290809, 97.02868038672065, 96.93944105450736, 96.83364312279491, 96.81612135217631, 96.73344688681152, 96.65201513998716, 96.6288594705815, 96.54362484304768, 96.40737680265212, 96.39056871710233, 96.38183102032704, 96.35865946356117, 96.24458931910416, 96.22065812853901, 96.16770377109086, 96.0573278658469, 96.03437359207373, 95.80617146706899, 95.80077031029737, 95.79774337908502, 95.60747131031314, 95.58099455992658, 95.56188954393087, 95.52071570183054, 95.49852234686928, 95.4595213346958, 95.41325594461506, 95.26052659983372, 95.10188338050693, 95.06735170036846, 95.0409681324556, 94.84960922038275, 94.68132868260211, 94.62348588615615, 94.45705182547572, 94.265785667539, 94.18191700238957, 94.07056289534106, 94.0472672380562, 93.96183078655238, 93.9522703348745, 93.89168143964964, 93.81608413056964, 93.78805590952649, 93.72935944013241, 93.71422821077087, 93.68318808920046, 93.5937636770525, 93.35528655862596, 93.34544655952706, 93.29402949872534, 93.27639951494793, 93.14449670606841, 93.1323129711181, 93.07552695660274, 92.88137428367048, 92.83403836598656, 92.80807390503625, 92.77171163515783, 92.76778422559184, 92.67705568715026, 92.07347655434543, 92.0086029786827, 91.99482182434521, 91.94473980788251, 91.94123193361668, 91.8627021608106, 91.7633913724956, 91.52587614017598, 91.37946217619245, 91.33600729100652, 91.24144495381012, 91.22417138422955, 91.03717359103305, 90.84131400054224, 90.81967845541028, 90.76998505620242, 90.74097820501704, 90.71223544223005, 90.66071016826956, 90.65248476093062, 90.64529896314946, 90.32441189609396, 90.23970501701913, 90.20917718488506, 90.19244725112375, 90.10480619497267, 90.05518966254076, 90.05407275786945, 89.95946404360495, 89.91936072910784, 89.84145145889686, 89.80164357918082, 89.6009260394001, 89.59432982616872, 89.57283469725355, 89.34536171634029, 89.3035514842846, 89.20967234244915, 89.10857648478715, 89.06619169886686, 88.90973719682705, 88.88546333773768, 88.66599805283315, 88.6195789292006, 88.60500636634336, 88.50153542644708, 88.22089037675545, 88.14738945916385, 88.08551189666815, 88.05248616679319, 88.05233071989133, 88.01228966982237, 87.9539508996379, 87.85498106649712, 87.85431375849642, 87.72375973962849, 87.67605323373762, 87.64929736426761, 87.524595812192, 87.49698541309883, 87.41232576776719, 87.29012297010729, 87.28597956256124, 87.25267385692794, 87.24683813417094, 87.20088363789408, 87.0973517185821, 86.9845539256983, 86.94879584271719, 86.94738393160233, 86.91440457879555, 86.83879138235534, 86.74888602715397, 86.50967976463596, 86.44750719569657, 86.37158439046507, 86.34274844520439, 86.29223143441874, 86.26951075933606, 86.26811387890632, 86.14176681702533, 86.11369221891411, 85.78608483810822, 85.73438865822308, 85.7313454113129, 85.70846971766579, 85.6353406732938, 85.57281211849511, 85.50227501101249, 85.50036541280895, 85.46201710628846, 85.22026399893645, 85.21562418931433, 85.11856352603965, 85.07634964604394, 85.03222659618217, 85.01136828555994, 84.83573061573597, 84.67876382425989, 84.67809651625917, 84.66515271917201, 84.58477518425303, 84.49074145219073, 84.19647026672598, 84.19631567649907, 84.1653382476945, 84.143284452275, 84.10712357802899, 84.09250378142865, 84.06084358560064, 84.0200416167198, 83.92127403588655, 83.89341586409299, 83.85132608461632, 83.83060733353577, 83.78029214672016, 83.76679011146612, 83.76367085445517, 83.63870521398127, 83.63651692503173, 83.62360447432745, 83.51661105781776, 83.45356978524518, 83.42304238144864, 83.37882572077567, 83.15999725416407, 83.14034945902426, 83.13314820222044, 83.11323631868231, 83.0550521387246, 82.96927473204659, 82.85619739174187, 82.83192481766494, 82.77848994550087, 82.71214305097, 82.56326167895362, 82.43582863044676, 82.43281758659464, 82.35428781378849, 82.25379699969895, 82.10333281064308, 82.04257300949365, 82.03836690918179, 82.0284032379014, 81.91836743115661, 81.91127524418665, 81.89833187543701, 81.89033921011342, 81.88998236757901, 81.86823903762584, 81.84070679032122, 81.77546176977646, 81.75750543317245, 81.65647098326372, 81.6248580211788, 81.5412517310775, 81.53159938193855, 81.5305125386376, 81.46278507937473, 81.41436231838993, 81.23937692588156, 81.21954276579444, 81.17091903751466, 81.1501384503434, 81.13008700726354, 81.1113701801852, 81.04312957481095, 80.94769896231881, 80.94023361711679, 80.93616750468415, 80.92694843651795, 80.9204767521431, 80.91116492984075, 80.84149695432893, 80.71249611946774, 80.58351074362922, 80.55639803162484, 80.49729834262837, 80.46489311534866, 80.44363072844885, 80.43961099308433, 80.3701607289027, 80.29110235096252, 80.14360282869072, 80.12258864282896, 80.07151339387653, 80.04678993811652, 79.99669246263116, 79.97654783707765, 79.80724229208683, 79.78160375562561, 79.78112238423465, 79.77039865081736, 79.70692238392198, 79.66694359828132, 79.52364931964637, 79.50937133489519, 79.48713117452837, 79.43864743412786, 79.33887073344465, 79.30351672674112, 79.23983906421316, 79.18007206721597, 79.1605019955271, 79.10062635703352, 79.05099436557886, 78.97083454199011, 78.92804653646735, 78.8657653260316, 78.63857146420182, 78.51537543405223, 78.47693266004555, 78.47483798190723, 78.37434716781775, 78.23806778103929, 78.20220148489933, 78.14831701606474, 78.11466949858215, 78.10787231805583, 78.02557101092319, 77.99793012212224, 77.96839637915303, 77.95394706013975, 77.90586696767923, 77.8063230090114, 77.74014659206766, 77.67196825112168, 77.61718330393342, 77.5805255992738, 77.57912871884407, 77.52111544481092, 77.4325442772735, 77.23604829682725, 77.20077158523716, 77.11417142365647, 77.05811369655756, 77.04793274228446, 77.04304430328668, 77.00751981899593, 76.96685783799447, 76.92160199610126, 76.89864815066562, 76.87001402937491, 76.86810528784639, 76.71343499847862, 76.6624675343474, 76.47801487263479, 76.42053020373571, 76.24923819376541, 76.03795193913183, 75.98996460080741, 75.93508604280797, 75.92963936564335, 75.87125421839067, 75.76981654887949, 75.75795959509324, 75.7520620362455, 75.747685030009, 75.7468317853985, 75.73272427823446, 75.70027267388673, 75.66002937151026, 75.57130361374594, 75.551282660374, 75.5121571193439, 75.49089473244408, 75.30737346713046, 75.28477646422922, 75.21257881625618, 75.15579194506577, 75.1004479030356, 75.09992015457655, 75.09555946403783, 74.99258578289269, 74.99229077644907, 74.97290664137, 74.96426169873084, 74.9272007744687, 74.89803933305652, 74.89273135875857, 74.85245756667427, 74.83388029913766, 74.7656242347407, 74.76470872570194, 74.76320320377582, 74.70290888665716, 74.69631310176331, 74.67103097949897, 74.6495822276519, 74.62756020695275, 74.59996612355744, 74.51651613703308, 74.47614873413767, 74.41562210334112, 74.35886615019606, 74.30434529140605, 74.28837541978157, 74.28061549647336, 74.20483225078364, 74.18307303347021, 74.15557298922347, 74.14135641222566, 74.13336374690209, 74.01036954072248, 73.93938197989439, 73.8528900314725, 73.55945748827071, 73.54482223264768, 73.53471900182558, 73.49553162470468, 73.4690230995977, 73.36957275174102, 73.32894168878482, 73.30445097504023, 73.29226895344004, 73.27966696820212, 73.27521266685216, 73.22410649985426, 73.20143091682709, 73.13272525575962, 73.12935736937308, 73.12159701772737, 73.07120496413579, 72.98170240019937, 72.94973173890494, 72.86507166523572, 72.86389163946117, 72.8581800172232, 72.84865134026573, 72.84713078765448, 72.84612123946695, 72.80774115822611, 72.79228229102542, 72.58540481734872, 72.5370142594218, 72.52993667479947, 72.52348044944733, 72.4242628436061, 72.3898243459413, 72.34734680588487, 72.20101056535232, 72.19950504342629, 72.193281131752, 72.1285179109357, 72.08588492397732, 71.98494408487974, 71.95362527256343, 71.93715857052533, 71.9266053146952, 71.8278368771869, 71.81376114474332, 71.78837038098263, 71.78788900959164, 71.74935390978635, 71.74732106773877, 71.73824113077677, 71.71347215462376, 71.7087228468302, 71.69421169172618, 71.67017185966472, 71.64416059330887, 71.63897714786742, 71.62201361541568, 71.58459584861916, 71.47016843329024, 71.46296717648642, 71.44271390943662, 71.43619541965616, 71.43425533174474, 71.37583883810919, 71.35917031210107, 71.3447995732139, 71.32960565108647, 71.23013941586959, 71.19779602468063, 71.10416508388323, 71.10366868180714, 71.04492626368258, 71.00263466023594, 70.93257849580682, 70.88822270392973, 70.87580708363905, 70.86770577681912, 70.84638155382859, 70.77395073550271, 70.73763398601719, 70.72470607629029, 70.72023674425519, 70.70248223162119, 70.70145765274856, 70.70049576664168, 70.66599500454858, 70.65877743204705, 70.64553991352878, 70.57584059163415, 70.56817385079955, 70.56288176386175, 70.56244719787642, 70.51518943198103, 70.5150026386962, 70.49696900697873, 70.46802442022167, 70.41581595090024, 70.35604938224057, 70.30590510134958, 70.2960809896109, 70.26414124636194, 70.26291484351924, 70.24359254453097, 70.2172403230009, 70.19717342089841, 70.16920660760846, 70.1221820120659, 70.11479396197723, 70.11085237840118, 70.06621746744065, 69.99074468721722, 69.94479061927788, 69.92006759185546, 69.88881061562982, 69.82092728112758, 69.8083875603179, 69.79927670531049, 69.74840285199048, 69.67775667467407, 69.66062394964781, 69.64927842862289, 69.63413088356349, 69.60506262462502, 69.5990096188753, 69.56745806454367, 69.54216091159412, 69.48810553683484, 69.47221381699886, 69.45312340335082, 69.43288559532375, 69.41250908442994, 69.3327056750381, 69.2604766806822, 69.24053387909868, 69.23913699866895, 69.2079422868717, 69.16124318748068, 69.11513367263944, 69.09242845657941, 69.08904511117018, 69.00669699863187, 68.93631490971376, 68.9334438537409, 68.89534289158343, 68.88753616286962, 68.88613971077737, 68.84071296295957, 68.83037699012209, 68.8246499088614, 68.79418476949319, 68.78282378944552, 68.75327458745357, 68.68138697660936, 68.6654480230303, 68.62593472142038, 68.54996553912082, 68.5488168597292, 68.47059755238939, 68.40286880811396, 68.32890112147909, 68.3246026953686, 68.31806874656553, 68.25003039349878, 68.22738658519198, 68.22093035983984, 68.20966256226586, 68.15375985373126, 68.14193467466546, 68.07121077389812, 68.01572717232625, 67.99039952966888, 67.89807228682753, 67.73258465323131, 67.72327283092896, 67.69549238258628, 67.64924373654085, 67.62006640776845, 67.60881406921709, 67.58783165807584, 67.57633111848648, 67.56068759968855, 67.53517316374634, 67.35109280359075, 67.34241694290621, 67.33094774969977, 67.31563015539089, 67.25710502025895, 67.21529478820325, 67.21040592086797, 67.18849211332767, 67.18000218925293, 67.14449359232248, 67.10229517134948, 67.10189195174705, 67.09945503342186, 67.09192785212912, 66.99134385556593, 66.92738750229208, 66.90596966849036, 66.90446457490177, 66.89023253888128, 66.86727912178316, 66.79140226528219, 66.76640054711388, 66.73779734386854, 66.71054464398492, 66.66673205958946, 66.6615954195536, 66.62985750027467, 66.6258223058874, 66.50361950822757, 66.46587496026697, 66.4157152203533, 66.3659282103342, 66.32616627934875, 66.27692162013633, 66.27142813756609, 66.22652870986974, 66.22486859771682, 66.19704134396855, 66.19356481608565, 66.14539154115144, 66.1080356104457, 66.06810320187319, 66.05442983235699, 66.00527921229326, 65.90533160568546, 65.88492332007125, 65.86934120902652, 65.86566242883613, 65.83648595673876, 65.82472175708865, 65.80446806170133, 65.63775445359997, 65.60230769276029, 65.5886811286497, 65.49846487964442, 65.45409320040712, 65.45316266068318, 65.44794744052132, 65.44198847392035, 65.41673769803887, 65.40970691882208, 65.39479211577815, 65.38861543784698, 65.3591744490138, 65.33428094400428, 65.3244881786485, 65.2832675311426, 65.28005509165796, 65.22230590602312, 65.2209395153013, 65.11014407475719, 65.06082254876875, 65.04092612425339, 65.0200987316765, 65.01033645602854, 64.98857766705265, 64.94932845384106, 64.93441322245955, 64.8882422998651, 64.86533525983505, 64.84664977913954, 64.80524276668633, 64.73270330686412, 64.71589522131428, 64.71262051740138, 64.67243947945326, 64.65058707966618, 64.64287396176351, 64.6255235254071, 64.60166920161782, 64.52372901336149, 64.50190838829486, 64.48910457908694, 64.46464521172521, 64.4545883579712, 64.45191826929319, 64.40886746038471, 64.39404583981437, 64.37472354082604, 64.37188383123606, 64.31531338636326, 64.28789063723003, 64.27266536871971, 64.25753328268308, 64.23242292301839, 64.23125792792898, 64.20979414539676, 64.14212895056215, 64.13921108918362, 64.12769509057159, 64.12575543099769, 64.1190196582246, 64.10745771088197, 64.06156590737096, 64.02798065431664, 63.944158366235264, 63.94237372522574, 63.92894812841011, 63.88287081662681, 63.87543553279503, 63.865519523595275, 63.78554606495384, 63.779152104029976, 63.778841210226105, 63.62494644201788, 63.610079301054554, 63.58177067591536, 63.57880643746876, 63.57193196182902, 63.55119646671321, 63.52579152894238, 63.52296685003756, 63.44813045976947, 63.438818637467115, 63.438539090046135, 63.434301643351375, 63.40211412740184, 63.39638747447878, 63.39053672103658, 63.369615717648486, 63.36542550469686, 63.326688152584026, 63.29004590694707, 63.288478120592686, 63.22258125106993, 63.22253487400188, 63.208272348273454, 63.186792250043446, 63.1731197372023, 63.16338837959977, 63.15426335058224, 63.14287102415172, 63.14159910091605, 63.11918889129965, 63.08448587689906, 63.05422213316327, 63.03797314245531, 63.01095361292459, 62.88792848869961, 62.873541434114685, 62.85795932306996, 62.851534444100736, 62.70751016469922, 62.68412260995328, 62.68246164112523, 62.66011326759961, 62.614159199660335, 62.608555790581164, 62.54130927437168, 62.48784305582472, 62.415334942385364, 62.380601866614484, 62.347715267943855, 62.332956340139305, 62.301823464432765, 62.29072657278338, 62.275889921527884, 62.26971324359673, 62.21019487597514, 62.206733807114915, 62.18024074103061, 62.16732914700135, 62.13385253544343, 62.13245608335123, 62.12635670053344, 62.10227006306637, 62.09044402732553, 62.08279274551364, 62.05057388318127, 61.96855169513202, 61.96167636281722, 61.942556316136425, 61.881594262679464, 61.85249465735801, 61.82933855961487, 61.804569583461884, 61.80109262724145, 61.79566140909952, 61.772753940731924, 61.75585310104594, 61.73314745664841, 61.718046716994614, 61.70784901868629, 61.68776751423618, 61.68019395587527, 61.64432765973536, 61.62705409015476, 61.62637132313141, 61.619106945224225, 61.56454056604122, 61.55688928422937, 61.555973346853, 61.52195438448845, 61.50562681365449, 61.41938349460824, 61.4019553348008, 61.3827416773088, 61.36858779307674, 61.34479616205325, 61.340155495756065, 61.326389372103755, 61.316022052883376, 61.31136635590096, 61.29133037184381, 61.281288977112425, 61.27784293893741, 61.27362223627789, 61.256860956133664, 61.24858874338911, 61.240596506402994, 61.18152730711442, 61.13751289874896, 61.0894177756033, 61.082542443288496, 61.08032323629363, 61.073912959672015, 61.01043712111408, 61.00494363854386, 60.97163836124803, 60.93311829212793, 60.909652585593484, 60.88607738088768, 60.80920772023452, 60.803061532011185, 60.792229157097545, 60.76367275925789, 60.75749608132668, 60.72194025065315, 60.71428896884126, 60.70409255554548, 60.69530805336465, 60.60597682369024, 60.598464244745045, 60.59405717713828, 60.578940550124244, 60.56612171023112, 60.54908131100348]}], [{'positions': [[323, 489], [323, 488], [324, 488], [322, 489], [29, 425], [30, 425], [321, 490], [322, 490], [324, 487], [29, 426], [324, 473], [21, 400], [26, 396], [321, 491], [30, 448], [371, 448], [325, 473], [24, 458], [29, 467], [28, 467], [15, 409], [20, 413], [25, 406], [500, 272], [20, 400], [25, 396], [28, 468], [404, 464], [31, 448], [334, 473], [25, 458], [341, 510], [37, 452], [26, 406], [33, 405], [403, 464], [404, 463], [26, 430], [38, 452], [500, 271], [18, 407], [18, 406], [330, 503], [325, 472], [334, 476], [20, 414], [16, 461], [366, 492], [261, 504], [14, 396], [335, 473], [1, 434], [342, 510], [347, 506], [177, 510], [22, 400], [30, 449], [25, 456], [0, 473], [375, 457], [334, 474], [384, 498], [370, 448], [330, 504], [21, 413], [375, 456], [2, 434], [26, 429], [358, 509], [261, 503], [510, 271], [24, 456], [34, 413], [20, 448], [324, 498], [371, 447], [17, 461], [12, 456], [33, 413], [393, 463], [510, 270], [21, 445], [323, 498], [325, 487], [346, 472], [25, 402], [3, 471], [326, 506], [4, 471], [0, 474], [21, 448], [9, 468], [327, 467], [7, 463], [324, 474], [24, 459], [34, 405], [509, 271], [14, 397], [1, 473], [367, 492], [4, 459], [8, 463], [369, 490], [26, 431], [196, 506], [195, 486], [13, 470], [365, 492], [175, 511], [20, 469], [25, 407], [34, 458], [195, 485], [505, 248], [17, 460], [386, 478], [358, 508], [370, 490], [0, 465], [320, 491], [383, 498], [26, 428], [2, 402], [401, 510], [349, 494], [22, 447], [31, 425], [26, 395], [12, 442], [347, 472], [196, 485], [331, 503], [381, 454], [25, 431], [402, 510], [355, 507], [15, 400], [347, 507], [2, 441], [394, 463], [15, 461], [348, 494], [0, 425], [189, 495], [365, 501], [326, 505], [357, 450], [0, 426], [2, 442], [219, 478], [37, 453], [350, 451], [18, 408], [189, 494], [370, 489], [260, 504], [13, 397], [4, 393], [349, 451], [334, 475], [511, 264], [31, 447], [0, 434], [333, 496], [394, 473], [393, 464], [1, 444], [418, 181], [106, 436], [12, 470], [405, 473], [326, 467], [2, 444], [25, 408], [334, 477], [174, 511], [35, 458], [349, 493], [9, 469], [22, 445], [376, 456], [25, 455], [365, 500], [21, 396], [18, 409], [501, 271], [22, 448], [178, 510], [2, 401], [27, 447], [197, 506], [177, 511], [384, 471], [397, 463], [15, 410], [358, 282], [20, 415], [6, 460], [324, 191], [14, 400], [461, 112], [376, 504], [155, 23], [133, 182], [325, 498], [268, 446], [404, 473], [377, 391], [487, 117], [257, 509], [501, 222], [20, 401], [10, 400], [358, 450], [394, 456], [0, 483], [416, 326], [332, 497], [12, 443], [133, 172], [94, 343], [325, 485], [46, 452], [139, 226], [450, 465], [188, 448], [331, 497], [2, 438], [14, 395], [34, 440], [196, 41], [7, 440], [345, 472], [35, 440], [329, 504], [460, 97], [2, 437], [0, 427], [137, 65], [377, 504], [373, 188], [418, 182], [0, 374], [350, 498], [338, 435], [28, 460], [441, 52], [103, 186], [219, 493], [389, 382], [13, 469], [84, 227], [26, 402], [328, 467], [193, 490], [334, 488], [372, 354], [26, 447], [373, 354], [503, 121], [41, 383], [32, 405], [21, 394], [122, 0], [276, 50], [27, 406], [336, 485], [0, 401], [461, 247], [28, 311], [3, 472], [347, 457], [401, 511], [226, 503], [384, 501], [140, 105], [137, 64], [420, 499], [393, 456], [219, 494], [326, 507], [107, 337], [333, 497], [61, 291], [18, 400], [30, 69], [241, 4], [176, 511], [230, 378], [360, 79], [82, 413], [33, 414], [451, 227], [389, 383], [107, 424], [289, 452], [19, 423], [232, 176], [355, 508], [91, 17], [19, 422], [19, 448], [135, 393], [32, 510], [20, 437], [7, 464], [19, 157], [415, 326], [30, 467], [506, 264], [176, 104], [439, 169], [317, 471], [273, 113], [309, 311], [21, 469], [43, 340], [39, 329], [308, 236], [500, 273], [266, 505], [11, 344], [188, 163], [402, 464], [40, 463], [324, 109], [359, 508], [360, 78], [139, 227], [425, 437], [382, 187], [117, 129], [384, 497], [317, 319], [117, 185], [144, 126], [39, 11], [466, 491], [288, 447], [498, 423], [488, 142], [376, 204], [439, 192], [99, 287], [36, 353], [201, 508], [387, 330], [0, 288], [40, 383], [426, 437], [242, 205], [437, 503], [134, 367], [26, 275], [226, 504], [339, 187], [47, 463], [497, 320], [381, 250], [28, 463], [34, 302], [279, 330], [94, 463], [83, 319], [470, 303], [510, 273], [107, 146], [206, 142], [398, 110], [135, 367], [30, 460], [331, 468], [340, 159], [225, 504], [156, 466], [233, 257], [37, 406], [444, 113], [23, 191], [450, 342], [73, 142], [441, 205], [456, 22], [447, 0], [311, 205], [414, 48], [254, 0], [229, 469], [213, 486], [22, 394], [171, 452], [299, 115], [240, 381], [483, 404], [196, 507], [181, 324], [53, 82], [56, 467], [241, 96], [199, 486], [427, 18], [460, 478], [505, 247], [287, 509], [337, 484], [354, 42], [443, 104], [358, 449], [79, 434], [220, 493], [39, 463], [225, 206], [14, 96], [260, 316], [332, 126], [178, 435], [180, 67], [253, 0], [483, 8], [382, 454], [8, 456], [431, 482], [164, 360], [352, 163], [502, 33], [313, 478]], 'threshholds': [769.0398377986945, 698.2510491269236, 618.1861010282331, 451.85646834477575, 302.9574352710777, 285.4232436192663, 283.75193278432386, 270.8602824484959, 262.1759821901115, 209.29454596932015, 189.66611413076467, 185.71634404605595, 184.83010205219713, 172.49164008059518, 171.71003145169686, 170.08948711359074, 169.20361699295134, 167.04248670419474, 163.29029944323318, 160.68718116374743, 158.5023519981035, 158.16548002873836, 153.5218505844412, 149.6636631394597, 149.43145588143807, 145.56139559531007, 145.22599694481306, 143.10521817159173, 143.09145247627694, 143.02808485087778, 141.40012154463759, 141.1292550862916, 138.97948492090762, 138.385899949091, 138.08506475345288, 137.73650545121356, 137.5029794645506, 137.4327051604538, 136.0864265134631, 135.81931527374581, 135.70648699115418, 135.65491362677554, 134.48816742777925, 134.19000146414396, 134.07051427555515, 133.18804381602274, 132.8708041827748, 132.38505041305572, 131.32585586873606, 128.8266576974795, 128.08710964336254, 128.0854641335572, 127.28827510696428, 126.26083394094623, 124.07252867575697, 123.1443055439177, 121.78883831846866, 121.71592655708932, 120.99632130455578, 120.80178001436873, 120.31836955216357, 120.23245258594382, 119.51335876617169, 118.90456398486742, 118.0248559398116, 117.56126460700843, 116.16466991652703, 115.16631246847022, 115.06621027163555, 114.82639853720757, 113.80283754701236, 113.10196372390487, 112.7544762342813, 111.99011111359323, 111.96430167120734, 110.7566757798793, 109.42839941822311, 107.74571300088546, 107.28002656160642, 107.03948525474947, 106.71397340875687, 105.22368594138736, 104.46641343600675, 103.03778667647775, 102.72351042500134, 102.07572966220864, 101.97500696277888, 98.74906368993827, 97.65578791882567, 97.4032960473713, 96.13252067031186, 95.9389584386044, 95.1861243472135, 95.06516341141898, 94.29505575044757, 94.20822327518906, 93.91429347323603, 92.97553297292683, 92.69962177200605, 92.59267473256448, 92.1712509026889, 92.04639433204883, 91.61904116860512, 91.30878508083075, 89.32633442379563, 88.55133832382636, 88.05363398950988, 87.47575480091952, 85.96884561294746, 85.32758376827277, 85.27175921152671, 84.73984912156084, 84.67683919537114, 84.43864162436557, 82.93803321484374, 82.79663221871463, 82.76936405980828, 82.74999495541437, 82.48040127697905, 82.40022642270517, 81.98303961118685, 81.71034042141319, 81.66443315887946, 81.62012331573288, 81.60230739534565, 81.58619753584196, 81.20535753517947, 81.00465459774638, 80.34160347438792, 80.04745767445476, 79.73599064286046, 79.58700105768526, 79.28206797489403, 79.27227520953828, 78.94696561585326, 78.8678295144621, 78.63012877387017, 78.62230658613367, 78.28779295496761, 78.19863134620533, 77.85635822006856, 77.76833026001276, 77.3646295963883, 76.81602049070645, 76.81114751073133, 76.54178571763639, 76.3292889475203, 76.05176443985219, 75.97674125629928, 75.86785498562125, 75.83745211068128, 75.826773897657, 75.73635539634427, 75.68276550561578, 75.34926142263714, 74.98198529331943, 74.56585355038168, 74.26674030298716, 73.7475416964306, 73.74038724503241, 73.29484457463177, 73.09987000347188, 72.46647672360172, 71.94712138513066, 71.72610548624462, 71.40852361280989, 71.37253364448847, 71.35688926901548, 71.10382370037155, 70.9564633093039, 70.91182797000587, 70.5493479538873, 70.5071654202745, 70.39019244512417, 70.3634211166315, 69.98919278822311, 69.97879412261977, 69.72074693250441, 69.42933177232744, 69.25509098293324, 68.9753777579781, 68.97390401077244, 68.80219246550195, 68.72409725868117, 68.67601716622059, 68.65947188405653, 68.30141525124259, 68.16855055625626, 67.81235628790274, 67.8003284281919, 67.64160748541414, 67.47625983969718, 67.44222456163477, 67.3938189730228, 67.29834069845012, 66.74585227362039, 66.71049826691686, 66.1346360330138, 66.10964977386814, 65.83707554128856, 65.8298583971245, 65.76321692448755, 65.45994438218679, 65.42802052629803, 65.3310062400914, 65.31385677102989, 64.35591353127407, 64.2638658358537, 64.1349895298491, 64.09296201480068, 64.05630431014102, 63.92284960226743, 63.83114243368371, 63.71842322092594, 63.558460416282855, 63.186528589982714, 62.871523622752285, 62.864570995324044, 62.63208418988137, 62.5574187055379, 62.5178435678373, 62.05279266183861, 61.82033763111637, 61.744119819441224, 61.73067962027799, 61.69967127342801, 61.56842031352659, 61.44617113879868, 61.34223471487166, 61.31099362600634, 61.171501799743275, 60.8749963765985, 60.754190459368424, 60.69240607934634, 60.68815360196637, 60.598123289570914, 60.50981578209416, 60.50247496574858, 60.27701936786019, 60.23306679558557, 60.184443495643364, 59.98448644633697, 59.87078860343705, 59.86416190049782, 59.85092352530452, 59.81204618531248, 59.281952511076504, 59.206277906883116, 59.12793407068678, 58.98973005501958, 58.98662625703128, 58.816358397596105, 58.75784914982444, 58.72122236321013, 58.677037477257656, 58.601689225890794, 58.57719894048368, 58.56203593640168, 58.40846794935747, 58.302343664818466, 58.176462515305786, 58.11610593375882, 58.06130509921036, 58.040493165656144, 57.98710552723517, 57.71238981111168, 57.62800842818835, 57.45820648112142, 57.42979007116092, 57.40084548440388, 57.28930501240811, 57.28395066104207, 57.255471986653276, 57.21738605518101, 57.174117106604776, 57.14930089670871, 57.13066179308132, 57.09563328252924, 57.01662213833215, 56.94656597390307, 56.91737318610799, 56.89873408248059, 56.853043674602, 56.74645347769473, 56.72391916755931, 56.648259594051055, 56.55452044009486, 56.47012402648637, 56.27049290166897, 56.128254119952054, 55.99596355049278, 55.89471267426642, 55.88394170710608, 55.789286615773534, 55.78888296783355, 55.68999085814377, 55.671180848591746, 55.63705238805575, 55.496133191655105, 55.43306057269963, 55.26100850059247, 55.25450546983473, 55.20077601956451, 55.16067313340488, 54.94303929491546, 54.917555777018606, 54.87420867665395, 54.8536449441378, 54.77064541095905, 54.75632019246483, 54.688265952037945, 54.67162920075023, 54.62010349845219, 54.59010384311467, 54.58668915132252, 54.48930256355882, 54.40763678970646, 54.393095573232145, 54.178161884791024, 54.14820860652158, 54.13531118650245, 54.09615558410201, 54.015824854588686, 53.98588746367941, 53.95169716705268, 53.847342064500495, 53.82780291085701, 53.66780918816855, 53.509554157759055, 53.35558252277489, 53.35376653538248, 53.22051365147887, 53.19866168002933, 53.10442526732198, 53.10000231235491, 53.051022169878266, 53.04600920202396, 53.033127669365044, 52.97941367811752, 52.91261633024107, 52.84332065628635, 52.84116328538224, 52.80171224820064, 52.79047579700952, 52.691025020815374, 52.61496265604218, 52.59748726249162, 52.583302031876656, 52.57007954404358, 52.560394991846614, 52.497027794784984, 52.478776451737374, 52.46230974969926, 52.41506787116404, 52.33380617358924, 52.26382730427356, 52.245048212766925, 52.23347080640164, 52.19751132778808, 52.13599103616426, 52.11631189464151, 52.0747189455785, 52.04755899983098, 51.80697131590597, 51.77067045378069, 51.76286415340441, 51.745419677899214, 51.73090895113276, 51.69570996299358, 51.681757902731505, 51.650050901497906, 51.57724778161492, 51.549327345392996, 51.53177465672903, 51.5102327224083, 51.45740375049168, 51.40327065228149, 51.39259286759476, 51.39163098148791, 51.3650301305823, 51.357207942845804, 51.3078396114519, 51.28493257142185, 51.26666576935154, 51.263189241468645, 51.23485012662161, 51.225662404838275, 51.21380502271451, 51.186785493183734, 51.114912913024725, 51.070557549485116, 50.99943042911531, 50.984779714469575, 50.981908658496664, 50.93724240115323, 50.93157758432086, 50.90305253286402, 50.84572245419187, 50.81140805704613, 50.77170839048895, 50.7481799911887, 50.729882699410545, 50.72794303983663, 50.6800179659405, 50.62950095515489, 50.58739528831799, 50.55877705438753, 50.499010485727844, 50.398550589683715, 50.34042910249181, 50.314712842579596, 50.29151079610591, 50.273663100998284, 50.259850600277915, 50.251298840112405, 50.205050194066985, 50.1765869787009, 50.14121708463712, 50.13089657082232, 50.09343199862022, 50.085733911402755, 50.07679481899496, 50.06811895831048, 50.04123898832141, 50.040757616930506, 50.015879142606124, 50.015289558056345]}], [{'positions': [[196, 502], [359, 510], [510, 273], [19, 440], [19, 441], [332, 470], [332, 469], [13, 443], [357, 500], [22, 413], [509, 273], [27, 409], [18, 441], [197, 502], [5, 397], [3, 456], [360, 510], [0, 443], [331, 470], [509, 274], [241, 506], [2, 456], [9, 456], [21, 465], [240, 506], [16, 402], [2, 422], [22, 412], [10, 399], [22, 427], [201, 507], [341, 509], [21, 413], [209, 496], [233, 503], [5, 398], [209, 497], [195, 502], [16, 401], [23, 468], [2, 457], [395, 473], [12, 443], [12, 440], [511, 262], [384, 479], [234, 503], [1, 443], [9, 457], [356, 500], [27, 408], [358, 510], [5, 396], [190, 506], [14, 396], [27, 410], [23, 420], [7, 442], [189, 506], [330, 485], [384, 480], [328, 491], [2, 421], [342, 509], [375, 494], [13, 457], [343, 491], [7, 460], [201, 508], [20, 470], [390, 508], [13, 394], [341, 453], [10, 444], [58, 133], [10, 400], [374, 494], [352, 509], [357, 499], [222, 502], [13, 393], [336, 496], [349, 504], [13, 442], [329, 481], [349, 505], [511, 280], [383, 406], [241, 505], [208, 497], [21, 470], [16, 400], [1, 467], [346, 471], [222, 501], [20, 407], [20, 466], [13, 440], [14, 456], [7, 439], [386, 484], [380, 507], [234, 502], [24, 420], [14, 457], [24, 411], [366, 449], [347, 471], [338, 361], [7, 459], [370, 511], [354, 504], [4, 403], [218, 499], [19, 439], [18, 411], [414, 488], [7, 440], [35, 80], [342, 452], [23, 403], [346, 472], [385, 484], [36, 441], [161, 146], [6, 460], [364, 146], [2, 443], [4, 472], [1, 422], [9, 429], [23, 427], [161, 147], [329, 482], [360, 504], [373, 432], [240, 507], [372, 457], [7, 210], [327, 491], [395, 472], [342, 453], [266, 278], [383, 407], [360, 509], [22, 465], [22, 428], [197, 501], [210, 194], [342, 465], [345, 480], [3, 472], [511, 263], [28, 427], [351, 492], [510, 272], [326, 509], [338, 494], [37, 96], [177, 226], [26, 402], [3, 443], [369, 491], [17, 400], [215, 490], [390, 509], [344, 491], [20, 405], [26, 403], [346, 511], [101, 441], [395, 474], [380, 508], [340, 453], [354, 503], [6, 443], [273, 136], [9, 445], [434, 351], [336, 497], [350, 492], [242, 0], [410, 185], [34, 80], [53, 73], [375, 475], [116, 286], [198, 271], [302, 317], [333, 496], [247, 56], [414, 487], [334, 480], [259, 297], [371, 457], [23, 411], [358, 116], [186, 432], [10, 398], [415, 0], [122, 488], [0, 416], [115, 297], [303, 190], [506, 277], [0, 243], [337, 473], [34, 114], [331, 485], [434, 472], [202, 507], [0, 58], [219, 474], [23, 412], [223, 501], [462, 446], [197, 309], [442, 24], [510, 280], [33, 106], [404, 403], [383, 225], [344, 480], [224, 508], [215, 307], [134, 201], [349, 262], [375, 383], [94, 174], [424, 336], [413, 488], [355, 285], [426, 362], [17, 378], [74, 89], [509, 431], [375, 476], [56, 86], [355, 503], [441, 0], [36, 205], [277, 400], [330, 182], [206, 260], [0, 302], [333, 497], [206, 158], [20, 404], [143, 422], [0, 347], [395, 183], [146, 282], [43, 352], [282, 419], [287, 176], [95, 85], [66, 4], [215, 19], [239, 225], [320, 463], [21, 407], [500, 270], [331, 341], [292, 48], [68, 401], [367, 449], [99, 0], [364, 147], [511, 279], [266, 279], [107, 272], [96, 53], [207, 294], [147, 93], [260, 278], [166, 150], [338, 493], [8, 210], [298, 241], [509, 430], [327, 0], [391, 508], [8, 429], [444, 0], [153, 81], [324, 494], [303, 191], [369, 440], [404, 402], [318, 11], [157, 511], [249, 253], [327, 451], [72, 17], [324, 493], [0, 478], [244, 115], [81, 314], [166, 149], [501, 21], [365, 414], [342, 495], [153, 150], [383, 480], [511, 251], [421, 248], [221, 451], [352, 296], [352, 498], [330, 481], [207, 247], [285, 132], [36, 96], [272, 205], [375, 325], [313, 329], [510, 266], [237, 0], [499, 161], [49, 139], [45, 173], [342, 496], [91, 68], [80, 0], [229, 94], [257, 123], [47, 308], [184, 508], [232, 503], [182, 249], [255, 106], [378, 232], [68, 208], [487, 24], [15, 402], [54, 152], [5, 439], [394, 507], [111, 28], [479, 114], [329, 485], [0, 348], [510, 115], [397, 136], [177, 404], [451, 162], [142, 164], [415, 238], [445, 32], [242, 288], [160, 285], [10, 468], [296, 475], [298, 261], [229, 93], [85, 127], [146, 29], [450, 325], [18, 377], [116, 287], [154, 184], [250, 497], [249, 311], [227, 64], [332, 217], [93, 373], [299, 154], [314, 455], [435, 394], [110, 49], [316, 204]], 'threshholds': [247.2672893943696, 219.56201831940731, 201.36486701336108, 186.80844021973155, 183.8693955412897, 182.67091185135197, 170.70340264757056, 163.2045057208575, 162.46630731342708, 162.1932989431997, 160.23071293595956, 159.61201674780327, 155.78011883158595, 155.40194849126388, 151.4895502246212, 146.64500270158587, 142.6468725486582, 140.05967690705384, 137.32979374373693, 135.9192319623083, 133.70921385687367, 133.2280075709782, 132.51499724666357, 128.52366513093725, 123.70176055953374, 122.18311851829444, 122.00099413341047, 120.69377790634653, 119.04092066675929, 118.95360639177235, 117.18911549771565, 115.57633065458018, 113.42451175978834, 112.38516726291604, 111.47940157443635, 110.55322674366741, 109.649028841542, 109.57349379689029, 109.22780640729889, 107.65501623716426, 106.44209825889848, 105.30595633047469, 103.7944373942507, 103.43783947795725, 102.16059198818547, 101.05243276041182, 100.75558552541783, 100.53491015336843, 100.37612694616242, 99.80709452418114, 99.77988820136551, 99.55517677825385, 99.23514381248384, 99.04494903882542, 98.40160669002256, 97.85482903075578, 96.66964555210207, 96.55847695332591, 95.39259945796277, 95.38117749849943, 95.02639514126083, 94.92377787431258, 94.71196429955747, 94.25908124114885, 94.10070168188278, 92.98974826491217, 92.21309205278996, 92.17631110428633, 91.80967050824896, 91.6136558991937, 91.29267564966455, 91.16539804805966, 89.96275420654052, 89.76330901833299, 89.62698368282398, 89.10073883802798, 87.63812274916727, 87.40624184397214, 87.09558210825776, 86.43442383906768, 85.89348190255788, 84.85804807121632, 84.48658215728446, 83.36668964790604, 82.81337846817365, 82.64020863472021, 82.50793352428367, 82.09773025823901, 81.80142623072672, 81.50931284450361, 81.25485082376744, 81.17597838243707, 79.93503218312806, 79.75400881555521, 78.84411560688957, 78.72077958886081, 78.35701133380888, 78.0691650273134, 77.69808773063636, 77.4940795995825, 77.45607224823621, 77.15248966880664, 76.86299913751837, 76.76497615979935, 75.74046831418246, 75.32719259653243, 75.15701749123339, 74.83374031125837, 74.56634995245777, 74.48063395353297, 74.3283074000166, 74.1783859901049, 73.88967183665125, 73.67197573373356, 73.50113417710877, 73.30519643482947, 73.1992589435753, 71.98707010940096, 71.75826208414875, 71.67589808425032, 71.64575929770857, 71.23602108735709, 70.68461864915334, 70.1841832467432, 69.92643063473395, 69.4894706425442, 69.21933375662721, 69.07056102610719, 69.059402298367, 68.94970787513395, 68.78155143787234, 68.45757560351375, 68.43255799798517, 68.2968840831167, 68.1195394957342, 68.07965389256726, 68.04074563452983, 67.76804730143121, 67.34997547058201, 66.88113799957158, 66.7355472188283, 66.26605789883986, 65.92203104973893, 65.83901562919996, 64.89527307908185, 64.77882785239055, 64.71193775037798, 64.70344825464076, 64.58767076428768, 64.53943522492521, 64.45764577889139, 64.2020973431918, 64.17233000153216, 64.14821244601966, 64.06005995710734, 63.76085438391433, 62.863996441459435, 62.78659946068477, 62.7231699991949, 62.64307244003444, 62.47752297034745, 62.40980925675723, 62.383146998098375, 62.28045286437418, 61.73095916769895, 61.66441002086057, 61.417117910545315, 61.39031523566973, 61.319249523053124, 61.25867651518851, 61.24435172503183, 61.18231871563418, 61.13873930159163, 61.10006421390711, 61.09373208907401, 61.084714416540294, 61.082231977822154, 61.073867010941484, 60.85565861858747, 60.69420617937854, 60.52679434523109, 60.46577045568339, 60.19353803495302, 60.08926065585182, 59.96882704017883, 59.74349511447194, 59.65509442452156, 59.63634667939783, 59.5209878676699, 59.26062785974848, 59.19640741807635, 59.076997952938484, 59.076609764021185, 59.0550996044209, 59.0293988035314, 58.97571530199166, 58.92948254330646, 58.889224210244876, 58.86685994935901, 58.82818486167453, 58.78969571059976, 58.71771491728191, 58.42142677712981, 58.3981006301371, 58.20030095173483, 58.04688755491753, 57.96733320323878, 57.79436519375527, 57.68235880939123, 57.60451180360852, 57.36781975452902, 57.32410035260727, 57.312786177965236, 56.89165735453325, 56.76209742483023, 56.677235527191, 56.50580395767894, 56.33836120548615, 56.29547958915219, 56.210943616002, 56.118166348152634, 56.094669295235306, 56.07156043123525, 56.0700394502865, 55.9927043056026, 55.885664512024825, 55.73560354257137, 55.73456393301357, 55.73357027218631, 55.70288784982537, 55.691076844769654, 55.66329682476451, 55.653131329514125, 55.62572318272853, 55.61841371276588, 55.48694546987179, 55.431245013644755, 55.42854443525892, 55.41477788326909, 55.272788159265275, 55.23782191314145, 55.179204023873446, 55.166353409259926, 55.094760376521876, 55.086395409641185, 55.07203970143913, 55.03407787048587, 55.013979622000456, 54.93437889325361, 54.83848236839332, 54.65561252372015, 54.65097228576044, 54.646487066365125, 54.621267208529034, 54.61077621712714, 54.60981390268278, 54.574273531031906, 54.507197064072045, 54.44286755256606, 54.432717516338364, 54.426013089948135, 54.37866214157911, 54.30803142328541, 54.291146042622145, 54.282268786305146, 54.25167911808033, 54.163247510084595, 54.06957019221911, 54.03541038530024, 54.0000413479115, 53.911718381412065, 53.82829931293311, 53.78756003681814, 53.490573242282416, 53.44061532633872, 53.438768420900935, 53.43330542803855, 53.34999500105597, 53.26581587044017, 53.25670544377027, 53.23597123366703, 53.15407314613684, 53.12728635862146, 53.01217574793163, 53.01146206286282, 52.98916006640519, 52.985637161454285, 52.95121412281217, 52.934499219736004, 52.850894214647255, 52.836957613407876, 52.83115323703379, 52.79344003545611, 52.79004123102416, 52.78220401260248, 52.693306492238506, 52.63066843926839, 52.61111382660222, 52.42877130205056, 52.40244999856593, 52.24760923161098, 52.126896496854606, 52.108163782416014, 52.095049507741756, 52.032566901673576, 52.01830437594516, 51.97969112435139, 51.940876048787615, 51.89043676145296, 51.86869343149976, 51.847338290463874, 51.796138512654835, 51.74129172937583, 51.73534779346002, 51.72726151732525, 51.7114470926027, 51.6801437393091, 51.65484658635957, 51.52597028035491, 51.47796748300783, 51.42468805774566, 51.352660459022204, 51.34504052359324, 51.33830475082015, 51.33056071487216, 51.32238168460128, 51.285956721956985, 51.16061877992597, 51.123775138656534, 51.082445849654235, 51.07775880628893, 51.048659200967506, 51.03046969401063, 51.01055781047255, 50.99676162544988, 50.92487315793065, 50.90587678343134, 50.89957600498113, 50.89268521364364, 50.890512383716846, 50.867899921792926, 50.826679702624496, 50.767176794025545, 50.75412478377958, 50.73782898766605, 50.71368008577068, 50.70034852810376, 50.69598740922746, 50.669526546201084, 50.63636040010949, 50.58626249628655, 50.568988926705984, 50.523981714188324, 50.47717397330099, 50.44208362665815, 50.43153037082799, 50.40097162064856, 50.24041965979324, 50.221904656684835, 50.19278959234073, 50.159949370738175, 50.13764780261809, 50.12636497435895, 50.08421293045397, 50.0619109339964, 50.059707186024234, 50.05516013053814, 50.05230453358793, 50.045025553333126, 50.01241850208345, 50.012186188405586]}], [{'positions': [[498, 263], [510, 237], [0, 455], [509, 237], [271, 451], [75, 307], [503, 244], [76, 307], [499, 267], [271, 450], [118, 160], [506, 240], [498, 262], [417, 358], [193, 208], [51, 60], [214, 149], [217, 429], [51, 59], [214, 148], [501, 249], [510, 236], [194, 207], [194, 208], [4, 274], [503, 243], [4, 273], [389, 467], [407, 376], [217, 430], [505, 278], [5, 273], [407, 375], [330, 113], [12, 404], [218, 429], [396, 219], [272, 450], [314, 116], [237, 359], [406, 376], [504, 242], [209, 494], [130, 462], [501, 384], [314, 117], [16, 400], [390, 467], [417, 357], [499, 266], [501, 248], [313, 117], [213, 149], [119, 160], [156, 390], [275, 57], [299, 433], [131, 462], [51, 212], [118, 161], [501, 247], [502, 246], [15, 453], [124, 361], [502, 31], [502, 32], [131, 461], [52, 59], [125, 361], [511, 236], [508, 278], [300, 433], [501, 383], [45, 133], [154, 435], [389, 497], [44, 133], [330, 112], [499, 257], [157, 390], [124, 362], [101, 171], [508, 239], [300, 432], [504, 243], [188, 306], [396, 395], [149, 333], [486, 146], [50, 212], [149, 332], [503, 31], [356, 240], [275, 56], [457, 206], [486, 147], [102, 171], [153, 16], [359, 507], [155, 435], [499, 255], [3, 399], [503, 246], [487, 146], [503, 245], [385, 444], [16, 443], [500, 251], [272, 112], [153, 17], [188, 305], [511, 283], [156, 391], [180, 378], [274, 57], [482, 389], [498, 257], [15, 412], [355, 240], [500, 254], [232, 497], [148, 183], [0, 454], [359, 506], [457, 18], [147, 183], [145, 287], [329, 113], [47, 362], [133, 239], [133, 240], [45, 132], [511, 282], [155, 434], [332, 338], [113, 254], [509, 238], [271, 112], [500, 252], [397, 395], [507, 239], [134, 239], [17, 125], [343, 67], [336, 91], [157, 197], [219, 493], [420, 398], [386, 244], [148, 182], [47, 361], [164, 201], [181, 378], [16, 453], [333, 338], [7, 404], [17, 400], [508, 238], [342, 67], [58, 337], [75, 308], [51, 211], [147, 400], [240, 440], [82, 218], [17, 126], [165, 201], [457, 207], [228, 505], [342, 68], [395, 479], [226, 509], [420, 399], [482, 390], [378, 87], [158, 197], [188, 469], [102, 170], [247, 502], [185, 320], [187, 306], [113, 253], [298, 268], [112, 254], [416, 358], [30, 147], [144, 333], [345, 456], [507, 258], [6, 436], [186, 320], [327, 284], [457, 19], [240, 439], [29, 147], [267, 246], [457, 54], [267, 245], [343, 109], [396, 220], [272, 111], [365, 28], [154, 16], [379, 87], [178, 439], [75, 273], [46, 362], [158, 196], [333, 337], [166, 502], [144, 332], [10, 432], [419, 399], [76, 273], [10, 414], [186, 319], [457, 53], [239, 440], [165, 502], [328, 284], [379, 86], [146, 331], [297, 268], [81, 218], [352, 47], [8, 227], [355, 241], [215, 431], [214, 431], [0, 424], [178, 438], [57, 337], [456, 54], [385, 445], [148, 400], [500, 270], [224, 506], [502, 247], [160, 173], [325, 405], [181, 377], [481, 390], [348, 231], [356, 181], [503, 275], [12, 459], [18, 433], [342, 325], [179, 438], [510, 265], [203, 502], [422, 100], [173, 121], [178, 247], [502, 383], [76, 272], [0, 413], [7, 227], [347, 231], [501, 250], [423, 100], [84, 506], [348, 482], [18, 448], [74, 470], [397, 394], [342, 324], [165, 503], [501, 272], [9, 446], [342, 306], [509, 255], [303, 355], [3, 398], [324, 405], [251, 326], [511, 265], [27, 377], [335, 91], [497, 260], [16, 126], [214, 432], [87, 273], [341, 325], [406, 503], [465, 161], [228, 498], [0, 445], [109, 2], [483, 12], [85, 505], [30, 157], [377, 231], [297, 269], [188, 470], [88, 272], [364, 28], [121, 459], [307, 471], [84, 505], [422, 59], [24, 403], [277, 138], [303, 354], [147, 401], [351, 48], [234, 162], [146, 332], [500, 253], [164, 202], [260, 4], [208, 494], [11, 443], [309, 371], [325, 404], [88, 273], [422, 101], [162, 158], [361, 503], [503, 265], [187, 470], [499, 268], [500, 20], [57, 338], [29, 157], [85, 123], [379, 502], [509, 270], [18, 449], [251, 327], [16, 397], [341, 463], [370, 492], [145, 364], [465, 160], [223, 509], [464, 139], [19, 408], [173, 48], [75, 470], [359, 499], [483, 13], [387, 477], [266, 246], [500, 372], [499, 256], [277, 137], [10, 462], [328, 283], [204, 502], [422, 60], [387, 501], [67, 301], [378, 321], [150, 291], [148, 445], [15, 443], [348, 230], [499, 20], [82, 217], [341, 493], [26, 377], [318, 116], [27, 174], [200, 343], [476, 13], [464, 140], [367, 405], [162, 497], [161, 173], [199, 277], [367, 404], [136, 208], [352, 500], [9, 360], [115, 350], [458, 206], [278, 196], [77, 52], [75, 469], [173, 120], [198, 496], [261, 4], [11, 183], [8, 360], [404, 31], [366, 405], [272, 63], [279, 196], [173, 153], [511, 134], [210, 510], [9, 359], [402, 58], [172, 135], [385, 461], [379, 321], [332, 67], [11, 470], [333, 489], [173, 154], [276, 138], [337, 480], [8, 240], [305, 134], [174, 153], [384, 445], [200, 344], [286, 25], [180, 341], [232, 498], [96, 142], [22, 448], [153, 194], [469, 324], [292, 399], [386, 243], [137, 208], [216, 511], [352, 48], [463, 164], [364, 29], [21, 418], [249, 142], [121, 458], [306, 134], [463, 180], [482, 13], [355, 448], [379, 320], [404, 30], [7, 240], [360, 499], [393, 308], [484, 220], [500, 19], [195, 285], [213, 511], [11, 397], [172, 136], [97, 142], [511, 133], [83, 459], [202, 493], [272, 64], [16, 442], [29, 148], [9, 454], [343, 110], [11, 466], [381, 496], [20, 408], [26, 174], [350, 451], [433, 3], [464, 161], [117, 54], [199, 344], [211, 506], [483, 220], [326, 134], [77, 51], [333, 482], [109, 3], [507, 272], [180, 342], [252, 326], [12, 397], [342, 305], [408, 494], [417, 231], [381, 511], [403, 58], [9, 432], [46, 373], [352, 447], [14, 449], [162, 157], [225, 509], [372, 435], [68, 301], [500, 97], [507, 252], [12, 183], [321, 129], [161, 158], [146, 286], [401, 476], [292, 398], [76, 52], [504, 257], [337, 506], [199, 278], [27, 173], [177, 247], [343, 305], [510, 270], [319, 116], [250, 340], [322, 129], [160, 174], [16, 449], [501, 97], [484, 219], [455, 315], [507, 275], [114, 350], [103, 497], [405, 494], [11, 184], [384, 492], [339, 456], [84, 406], [200, 509], [185, 511], [84, 405], [362, 503], [137, 207], [85, 405], [326, 135], [174, 120], [383, 476], [450, 299], [84, 123], [206, 499], [16, 428], [101, 24], [286, 24], [241, 492], [506, 275], [394, 54], [412, 487], [59, 277], [360, 506], [389, 462], [11, 432], [227, 505], [3, 401], [335, 92], [270, 311], [178, 246], [260, 5], [211, 325], [281, 248], [318, 117], [302, 355], [346, 507], [508, 255], [0, 428], [421, 60], [172, 48], [90, 155], [108, 3], [381, 508], [224, 509], [9, 402], [392, 498], [47, 373], [133, 300], [499, 265], [115, 349], [99, 270], [457, 318], [15, 397], [2, 462], [271, 311], [10, 443], [501, 372], [0, 183], [394, 53], [291, 399], [378, 231], [473, 79], [26, 378], [214, 491], [275, 332], [434, 3], [387, 275], [211, 324], [248, 143], [104, 497], [211, 484], [2, 458], [394, 489], [285, 25], [386, 501], [198, 495], [239, 344], [342, 456], [507, 240], [21, 24], [22, 449], [347, 283], [118, 54], [419, 498], [468, 324], [501, 96], [90, 125], [408, 482], [353, 138], [235, 495], [232, 510], [241, 287], [386, 461], [468, 364], [457, 319], [270, 312], [234, 161], [508, 243], [364, 453], [67, 302], [45, 305], [233, 162], [408, 493], [22, 74], [499, 254], [450, 300], [194, 285], [6, 394], [353, 137], [283, 362], [293, 79], [148, 446], [115, 23], [347, 284], [3, 420], [357, 460], [433, 156], [282, 363], [321, 130], [500, 134], [286, 16], [232, 494], [232, 396], [251, 133], [501, 251], [185, 510], [59, 278], [468, 363], [370, 491], [21, 407], [500, 373], [342, 110], [396, 504], [20, 401], [250, 494], [353, 177], [384, 486], [14, 393], [329, 487], [501, 134], [274, 332], [504, 270], [407, 487], [395, 220], [65, 102], [473, 78], [10, 413], [0, 449], [393, 465], [165, 181], [46, 305], [369, 492], [490, 2], [198, 278], [215, 491], [364, 466], [153, 320], [407, 477], [310, 165], [469, 275], [454, 68], [384, 483], [99, 269], [241, 286], [372, 508], [387, 274], [417, 232], [327, 223], [195, 507], [310, 166], [503, 259], [373, 435], [387, 478], [475, 8], [385, 462], [508, 252], [14, 110], [168, 0], [253, 340], [367, 470], [250, 339], [394, 479], [379, 235], [9, 436], [435, 200], [4, 408], [395, 485], [364, 420], [21, 74], [248, 142], [153, 319], [457, 0], [161, 497], [407, 494], [504, 241], [90, 124], [463, 181], [69, 461], [229, 509], [74, 187], [403, 57], [368, 328], [150, 357], [144, 364], [349, 456], [388, 481], [244, 33], [114, 23], [477, 13], [232, 511], [309, 372], [503, 270], [81, 244], [343, 487], [375, 476], [201, 490], [456, 19], [401, 477], [421, 393], [120, 459], [476, 14], [14, 403], [172, 49], [374, 466], [395, 489], [293, 28], [150, 290], [368, 470], [278, 197], [125, 92], [382, 502], [401, 494], [149, 445], [15, 415], [14, 423], [376, 476], [345, 481], [362, 473], [43, 263], [237, 360], [247, 242], [249, 340], [405, 30], [42, 281], [328, 222], [310, 371], [469, 363], [351, 474], [376, 462], [294, 203], [511, 280], [433, 4], [400, 503], [452, 248], [430, 376], [123, 172], [228, 67], [282, 362], [500, 353], [7, 241], [257, 500], [4, 420], [354, 137], [294, 204], [387, 500], [451, 248], [226, 38], [154, 319], [235, 494], [91, 124], [117, 357], [0, 421], [75, 187], [503, 262], [379, 236], [393, 307], [235, 507], [233, 396], [507, 243], [247, 243], [228, 504], [226, 500], [210, 325], [43, 264], [240, 492], [351, 23], [346, 472], [356, 501], [130, 388], [267, 119], [7, 228], [294, 28], [400, 495], [391, 480], [194, 286], [327, 274], [400, 494], [484, 264], [251, 134], [325, 385], [0, 418], [503, 263], [206, 488], [333, 483], [328, 223], [20, 24], [6, 464], [376, 478], [293, 80], [0, 450], [226, 37], [306, 471], [46, 374], [469, 274], [207, 511], [19, 443], [460, 327], [154, 88], [401, 392], [198, 181], [292, 5], [463, 140], [234, 491], [144, 389], [13, 110], [421, 268], [151, 290], [344, 487], [386, 427], [385, 497], [338, 493], [5, 394], [372, 436], [16, 452], [352, 23], [341, 236], [372, 449], [134, 300], [167, 0], [185, 509], [228, 68], [421, 394], [165, 182], [32, 27], [145, 389], [112, 327], [390, 275], [14, 394], [10, 393], [374, 459], [13, 443], [173, 276], [2, 461], [475, 9], [211, 287], [69, 462], [432, 371], [490, 3], [16, 412], [498, 260], [308, 439], [173, 277], [178, 28], [417, 495], [249, 405], [390, 276], [196, 492], [146, 43], [228, 340], [5, 420], [458, 0], [346, 508], [256, 433], [280, 265], [232, 487], [46, 304], [0, 468], [227, 68], [185, 506], [255, 500], [248, 242], [383, 489], [245, 33], [368, 453], [378, 455], [184, 111], [237, 19], [190, 269], [352, 313], [456, 211], [386, 504], [5, 417], [370, 456], [345, 490], [384, 453], [76, 260], [143, 333], [333, 67], [116, 357], [341, 237], [65, 101], [440, 50], [10, 466], [236, 511], [507, 281], [441, 50], [179, 342], [500, 303], [11, 462], [472, 79], [90, 154], [14, 109], [267, 118], [286, 15], [273, 506], [396, 482], [348, 477], [351, 24], [42, 282], [354, 510], [393, 54], [440, 323], [348, 487], [219, 109], [227, 37], [434, 305], [13, 431], [323, 0], [414, 97], [369, 328], [385, 244], [162, 496], [54, 70], [386, 474], [242, 321], [374, 511], [61, 222], [449, 300], [348, 473], [55, 3], [271, 64], [11, 457], [459, 307], [10, 470], [329, 496], [380, 493], [242, 322], [145, 388], [349, 503], [4, 417], [382, 511], [227, 251], [1, 404], [380, 490], [374, 504], [434, 156], [35, 420], [252, 264], [252, 133], [394, 501], [404, 494], [12, 470], [249, 404], [239, 489], [253, 341], [44, 61], [98, 326], [82, 349], [72, 167], [145, 286], [236, 510], [501, 8], [500, 8], [28, 467], [373, 511], [242, 286], [22, 460], [371, 503], [476, 89], [503, 260], [501, 161], [280, 248], [356, 507], [115, 22], [21, 421], [403, 278], [350, 452], [166, 181], [342, 481], [188, 507]], 'threshholds': [195.54951017693372, 183.34852050688247, 175.62941369215068, 172.44691155882347, 153.87602832644487, 153.63840488096642, 151.07417982883283, 150.8497320657819, 150.48199002409592, 148.05984873511494, 145.95846955599535, 144.71328633832906, 143.33297155660097, 141.14913605178432, 141.1254685212799, 140.62888194830978, 140.50428903773042, 140.2637013538054, 139.513862847244, 139.05578088437122, 138.9923509945438, 138.97842985232705, 138.85689479100557, 138.54162573537687, 137.73105834571132, 137.02180324002546, 136.73679878480763, 136.491787717578, 136.38406515697685, 135.09620214694658, 134.922659155261, 134.8331883660449, 133.68357574875, 131.31950871321777, 130.99329821284155, 130.43104751236396, 129.68414232620376, 128.60885380974054, 128.45480445130536, 128.29254514455397, 128.038625902962, 126.73688855612069, 126.58083641700831, 125.91731938128166, 125.87245172830578, 125.74509640324985, 125.41076913703111, 125.25848853224524, 125.06110838914319, 124.78398667273999, 124.27898789914606, 121.97695430134898, 121.371946513394, 121.04385818953469, 120.48766006646922, 119.10253456919429, 118.75346340585617, 118.604520197749, 118.41348721016521, 117.20868599774204, 117.01310552633458, 116.79120332310501, 115.52191715227391, 115.05550199724095, 114.86319622974645, 114.8290218204799, 114.39898396601058, 114.3584928909337, 114.19997377212589, 113.61653755152436, 113.49585530647587, 113.34857392387178, 112.9964762576588, 112.91696871138558, 112.1114915846879, 111.93175645604842, 111.30488166595872, 110.42236440102079, 110.33405603686896, 110.17154938575459, 110.06542510121558, 109.38464952659349, 109.19688995791002, 109.03222636422903, 108.70789368733597, 108.52283598205094, 108.46519543791243, 108.31061833101832, 108.15051639517108, 108.05452625949954, 107.87398469165515, 107.78952601361839, 107.72068036467172, 107.52294252236018, 107.44819931456578, 107.15943835570654, 107.15752918584049, 106.62318303422455, 106.45566213024321, 106.43959950448264, 106.27988532921512, 106.03746577053738, 105.95201300333585, 105.69589129878432, 105.41339934365483, 105.35783930364462, 105.33892022425874, 105.020733735589, 104.74812901330162, 104.42010295387054, 104.3129386314362, 104.25563947080944, 104.13264526462987, 103.99576083427895, 103.92232132444065, 103.9104330242715, 103.15759936121808, 103.02208003657655, 102.9392977863905, 102.25762173341474, 101.97969357780664, 101.81397363053262, 101.22402020516316, 101.05809714890665, 100.84454573854765, 100.62276806417461, 100.01471831432208, 99.28919918724313, 99.26290880180387, 99.06071708647991, 98.96149905230108, 98.87049096643857, 98.86864363266325, 98.82663200497507, 98.28111166659635, 98.25530222421047, 98.15409601170202, 97.96199378152765, 97.73689416949864, 97.49650873788109, 97.3159671700366, 97.14773258098658, 97.14400785206564, 97.10440136798212, 97.10243036202532, 97.03242057466429, 96.97521459651114, 96.8569074336969, 96.78286245194859, 96.69620002593966, 96.57053615941962, 96.5264135378954, 96.48171636250657, 96.13831001600079, 96.03095975695668, 96.01052055329706, 95.95852851029323, 95.95055216066736, 95.83027356355883, 95.75810640529367, 95.63922468861483, 95.45627754882825, 95.43138404381872, 95.41558464978131, 95.33623212207253, 95.01338950808291, 94.87599278829568, 94.83182336136586, 94.685580303307, 94.67544615443953, 94.65059859816051, 94.60445816527394, 94.26901399438387, 94.26516516494391, 94.10413183269765, 94.00019583710812, 93.882509176889, 93.79651405888079, 93.75097909790418, 93.73081901332802, 93.42452039648995, 93.2996015614216, 93.13493668272804, 93.09567158215623, 92.89559043233078, 92.59177511088586, 92.52558323491942, 92.33237698907126, 92.26554829481191, 92.23488218814873, 92.22943465430907, 92.18282873739173, 92.08129831374438, 91.87609598290578, 91.78029221218162, 91.74270311112294, 91.71197388335645, 91.65976541403494, 91.65801169107084, 91.53040773663939, 91.3293647007071, 91.23463188592362, 91.13893675669577, 91.04625267132005, 90.8134558287486, 90.78314570794477, 90.68138254228202, 90.61278509437344, 90.54012153403215, 90.48456063734682, 90.46969263970844, 90.37326836638906, 90.31826613620817, 90.19749113702346, 90.18965391860179, 90.03236077429915, 90.00375757105384, 89.76782601244874, 89.71341336681755, 89.68020127199541, 89.65526096158028, 89.63559727908023, 89.62265391033058, 89.56273189476899, 89.49359123937867, 89.3256516567722, 89.17448924167022, 89.1253377649314, 88.96442853320417, 88.70563588329958, 88.69143562199942, 88.53389427665873, 88.47026299119887, 88.3592657266848, 88.10082991931458, 88.02406847182021, 87.89680632923796, 87.88476258216693, 87.72574791795809, 87.6904248292999, 87.3224972793417, 87.27031972806557, 87.24572080116216, 87.20740255601203, 87.11439211780979, 87.09272651130749, 86.94061724078387, 86.82668665586856, 86.50274216789288, 86.43506065736052, 86.40172403368183, 86.10144707621059, 85.88975717363697, 85.2138859253729, 85.13503022807777, 85.13194146077467, 84.85762853591608, 84.68698923159887, 84.65697411723863, 84.62681858666163, 84.49302292361388, 84.46819125469509, 84.4311612484783, 84.15045436269592, 84.04554102197687, 84.0228976420076, 83.91775113093566, 83.90603373669109, 83.84339525538347, 83.76384047536715, 83.72935645730938, 83.65451921036626, 83.55052180702354, 83.28581656758605, 83.25941711231287, 83.24714105156396, 83.17866727583686, 83.10687327580385, 83.09296759260982, 83.06214518236962, 83.03206780358113, 82.91543664028008, 82.75100450360188, 82.7414908573295, 82.68068382243695, 82.50320010385029, 82.41231611850677, 82.4055949480813, 82.33373954029507, 82.33243584233898, 82.29675591114638, 82.1379263268723, 82.08158948068991, 82.00926730386037, 81.83046399995739, 81.76933146891334, 81.38489083984894, 81.21893772222198, 81.20611845399138, 81.17790343966333, 81.11303072067567, 80.87751698402064, 80.87345172826306, 80.83296065318612, 80.69353109135135, 80.6632982656609, 80.30781768237622, 80.29268602467708, 80.08802604464519, 80.07481901583476, 80.05742134573521, 79.9181154560819, 79.91007641369023, 79.63793717543358, 79.606152450749, 79.53847094021667, 79.47232544131828, 79.46773158042666, 79.39475755461898, 79.27809504493504, 79.25672444487643, 79.19341908390558, 79.13962779754462, 78.98416609965707, 78.92606007148788, 78.92075209718989, 78.91693418579524, 78.88268248141524, 78.87107330032958, 78.82861121929587, 78.75268841406438, 78.73260519626416, 78.64158207971637, 78.62794048492069, 78.60323291652094, 78.48563943877548, 78.28486006290395, 78.26834655546016, 78.267027826819, 78.25883333752542, 78.22560535534305, 78.1929519270253, 78.1591961963839, 78.15562691436492, 78.13039159750613, 78.08539941567363, 77.98885104183529, 77.93169144075024, 77.8199027677164, 77.7840515022616, 77.77931851016582, 77.77193131675222, 77.7226402804717, 77.59706959642533, 77.58404850422474, 77.58350529674301, 77.53379515349985, 77.50211992698671, 77.47364082426043, 77.38224497781809, 77.32792508632303, 77.11502509660457, 77.08330263634826, 77.06267706774136, 77.01295146547551, 76.98099626320388, 76.89939318211731, 76.73559743539447, 76.6942526873695, 76.62754852196676, 76.5104518746349, 76.50301787581571, 76.45847614732882, 76.45383548103152, 76.44219581023802, 76.41188568943413, 76.36628846402921, 76.3619273451529, 76.33531103522462, 76.26606173833797, 76.18422591523608, 76.15875785636189, 76.03116978929067, 75.95501424204382, 75.9108602741367, 75.81783480524928, 75.8063656120428, 75.77856970467745, 75.64530136175118, 75.63645502347956, 75.30409833488005, 75.24697008017793, 75.2220147390776, 75.18239279597138, 75.16943353986153, 75.13412548188847, 75.05353194898944, 75.01068167903841, 74.98485634929233, 74.94680219254046, 74.90773891593867, 74.89043442831272, 74.81798772262663, 74.77752799393257, 74.77226682504018, 74.75862480190692, 74.7122207089595, 74.69677858579405, 74.67675806075962, 74.6699449928731, 74.6463547574821, 74.63356640729687, 74.54497892406164, 74.53178778261145, 74.44538901666326, 74.42308702020567, 74.4103609344487, 74.3910231764377, 74.38810488672166, 74.38112176958556, 74.31222931523331, 74.25780121057946, 74.24111722554863, 74.16705721311519, 74.14618301513269, 74.1400527142696, 74.09880114871828, 74.09163123829734, 74.07996022112086, 73.87407469492133, 73.868937626548, 73.85427145287962, 73.84045852382167, 73.81491316983416, 73.75871631153097, 73.65833413893779, 73.58315636515802, 73.51839185932917, 73.51690222476329, 73.5025774346066, 73.43865157104064, 73.41929792566937, 73.41614775061305, 73.33785029148476, 73.29458134290857, 73.18934164936294, 73.17571551358992, 73.10843679432253, 73.09808536246238, 73.07542609513287, 73.03820929563132, 72.96765715746352, 72.83587844910318, 72.79197311057163, 72.78455457077513, 72.7779119804757, 72.77392359149398, 72.72087690824718, 72.70988822975663, 72.64067070759036, 72.60612356842924, 72.58989003674402, 72.53640835917432, 72.50796103116846, 72.43104456510966, 72.41622337287691, 72.41473373831106, 72.26659654107127, 72.25942705898791, 72.2007619359768, 72.19790676736409, 72.12769472769551, 72.11042158645249, 72.07973830741648, 72.00220219543766, 71.89084766005166, 71.82738685217885, 71.60649419713677, 71.26187690681101, 71.23266908833081, 71.22785794444644, 71.20356948300937, 71.19397811328601, 71.18671502039149, 71.148288133745, 71.09241677159336, 71.08909569061238, 71.06285125390366, 71.04084469222724, 71.0184804313414, 70.93562131437939, 70.8979690922174, 70.79015334914256, 70.72254913372367, 70.59213638774762, 70.54517362829586, 70.52068334288872, 70.50525667874598, 70.43926662674956, 70.385552635502, 70.37872410859278, 70.29760154222214, 70.27405854057429, 70.27076837763869, 70.20376920579226, 70.20372240038668, 70.1797912098215, 70.14881378101693, 70.12125018732945, 70.1171690442116, 70.02574142304886, 70.00319122555322, 69.99884599403715, 69.98518894021868, 69.97184149519148, 69.86683497199888, 69.866772279233, 69.84523120158737, 69.724564843899, 69.70474614283455, 69.69118184315225, 69.58102193588843, 69.55235732488991, 69.52454595850186, 69.51199035033198, 69.5093516080369, 69.38022752933176, 69.36366764481998, 69.34027923339897, 69.27667972265954, 69.26907481791575, 69.23415494886001, 69.22766780546249, 69.22588316445297, 69.21953558059721, 69.16223641997037, 69.06055097775865, 69.04991999847755, 69.03980088029525, 69.01026670898848, 68.86610329838278, 68.84777466022167, 68.78291740025671, 68.74146401073541, 68.73235401240301, 68.67927641111085, 68.63682936076223, 68.60929797013272, 68.51920539330894, 68.47935027984984, 68.32014839401863, 68.30416306337149, 68.29359392018111, 68.26036593799876, 68.18779513179358, 68.15838634601842, 68.09481603997429, 68.07592916364632, 68.06404086347719, 67.98943721522441, 67.93274352650768, 67.87258876893071, 67.80309127100597, 67.65448901807302, 67.60749534057587, 67.58432421214759, 67.53945613083414, 67.52631136645203, 67.49940005008008, 67.45543244712026, 67.41470863002796, 67.40223074530904, 67.36222061328554, 67.35214830050884, 67.32464697124955, 67.30381957867269, 67.27796375921879, 67.19864214955538, 67.19431194872445, 67.18957895662861, 67.12777868924631, 67.09872503265538, 67.03757747092615, 67.02685330917143, 66.91002075023788, 66.87615552142512, 66.81673076461462, 66.81466700452172, 66.74181665089559, 66.72528725609165, 66.72145517068701, 66.66224726853163, 66.63581689521317, 66.62889518583029, 66.4073657124953, 66.40210454360295, 66.39792978967395, 66.38327907502821, 66.35840017236634, 66.33633177459916, 66.26310954775347, 66.24627011582078, 66.24535460678202, 66.24142848222856, 66.18256153524747, 66.15925084727745, 66.12042031269098, 66.04665487836363, 65.95781962242785, 65.95687233866866, 65.93311205402811, 65.90213462522351, 65.89656299086482, 65.81922827451842, 65.79304610223798, 65.78809497047442, 65.78683807792389, 65.73264314362292, 65.72829748376932, 65.70816831723855, 65.65310425096685, 65.62402010466812, 65.60465142861173, 65.58806062605454, 65.5516047453649, 65.54682494786343, 65.50706258854046, 65.50574385989923, 65.3998677763983, 65.39437386549052, 65.3895159162006, 65.36336509030306, 65.31100074574213, 65.29998243421878, 65.28556446158841, 65.27057150675594, 65.27033919307806, 65.24647026694119, 65.15383255863355, 65.10837489277031, 65.08686430483249, 65.02886734649715, 65.01941596465312, 64.99691171588799, 64.96570111673049, 64.92727465842154, 64.86730626579188, 64.84106225742065, 64.79782465522734, 64.79566685598573, 64.71695071823234, 64.69728703573227, 64.45733574176258, 64.4092079872214, 64.39018197968927, 64.37388575523828, 64.34315652747172, 64.2874251531993, 64.23288840704906, 64.18289957306, 64.12456037453795, 64.08636622990684, 64.05621112766738, 64.00047975339496, 63.98094017141395, 63.9563412445105, 63.84959645737636, 63.8265494294671, 63.81534346798387, 63.81047091634628, 63.70445527330364, 63.68760081068574, 63.626219650266066, 63.59393895184295, 63.56757084295273, 63.56434251610788, 63.54745713544463, 63.54574978954856, 63.54320465806465, 63.514943266668595, 63.508440235910854, 63.50674920571246, 63.47645411559383, 63.46633499741151, 63.45044284923799, 63.442962473350704, 63.42832721772767, 63.42810993473503, 63.381069451832325, 63.336853647834445, 63.31625856893539, 63.29277740337827, 63.22166617036863, 63.2110502217727, 63.19647723057794, 63.18763089230636, 63.162985588334806, 63.0621533907336, 63.01259869439238, 63.01086043045095, 62.971983090458885, 62.95739464024147, 62.95157480484467, 62.90177190746539, 62.85538284520316, 62.75908310074037, 62.7121821773794, 62.67574175571242, 62.65159285381706, 62.63206873085863, 62.56525635229711, 62.532618383002045, 62.49063724502172, 62.46731109802903, 62.40229881949962, 62.383131539075656, 62.31801019071245, 62.285419026822936, 62.251601460090804, 62.21900986786382, 62.157861449459546, 62.152398884934705, 62.13973463526848, 62.121080072618405, 62.09464969929987, 62.07574650727419, 62.05664149127854, 62.036140451528226, 61.99912547599663, 61.95368369749365, 61.91427903738011, 61.884434400606985, 61.86779679264418, 61.81561966970568, 61.80657150746406, 61.79784969804899, 61.75861551552255, 61.69306002951148, 61.5817832175764, 61.54135397859024, 61.527572395915264, 61.52466999355946, 61.521364371601166, 61.49800730656307, 61.36442849817043, 61.343103846842396, 61.33014459073257, 61.312560984023136, 61.27568599637081, 61.207321718815095, 61.17808212561444, 61.17365917064738, 61.16633381332451, 61.1578756639702, 61.14134712584134, 61.13217486308067, 61.11272846357332, 60.983060749048946, 60.96898415993028, 60.96727681403422, 60.90886074873623, 60.88461909270468, 60.848100519249265, 60.79808076721479, 60.760848508690536, 60.75074527786843, 60.731221154910116, 60.623234505910645, 60.57116559613089, 60.56644763472021, 60.55609577452253, 60.5202135910224, 60.39369605155435, 60.373039993239594, 60.35658917856171, 60.336847772610675, 60.32776869232369, 60.314933965070395, 60.297427653474465, 60.294167980246726, 60.22699875915075, 60.21878881083449, 60.188866878947934, 60.13695298773257, 60.0772950605692, 60.066834558875186, 60.028205848258736, 60.022897445623194, 60.0103426941284, 59.99890441896727, 59.960477532320816, 59.94756550995403, 59.921615651351445, 59.814529480705616, 59.7946485152129, 59.671732460821794, 59.66522900172655, 59.62771762411885, 59.53875826766408, 59.42799374516539, 59.41390169702409, 59.40780231420633, 59.386447173170424, 59.381216493985846, 59.37160966523986, 59.35086042445147, 59.266324022963744, 59.24700215231291, 59.22530519942781, 59.16612821531787, 59.12760814619775, 59.12541942891073, 59.119335076778114, 59.1024501244524, 59.10210874094073, 59.097189383897565, 59.08516152418669, 59.08480468165228, 59.06678565228247, 59.04302536764196, 58.99316020583434, 58.96261734301517, 58.95814758264251, 58.92630102186722, 58.91262808068856, 58.90230713853625, 58.882271154479106, 58.84444973974263, 58.81580015942925, 58.78988207554704, 58.78441908268465, 58.78319310817953, 58.75278980490205, 58.734709367779026, 58.73442982035806, 58.713214238863884, 58.708403094979566, 58.69719799017135, 58.63760189909871, 58.635832717111924, 58.633038099577405, 58.62648954842668, 58.54012212886134, 58.521188018790326, 58.45912451968478, 58.423801431026604, 58.38060977756384, 58.36341350309671, 58.33135008766626, 58.32534388732219, 58.2924877783594, 58.28170220885138, 58.272731770060716, 58.22558264566169, 58.214982584425925, 58.21277883645373, 58.19507070088781, 58.18412925614035, 58.12762107569578, 58.1066704392749, 58.10510222458309, 58.09180158496154, 58.054927025646705, 58.05140369235825, 58.02256817543508, 58.00897295770739, 57.99578138791968, 57.965098537221216, 57.91565248237632, 57.88728202114632, 57.87401229957014, 57.81059915377804, 57.7889644653212, 57.73304672610146, 57.732999920695875, 57.70340391329832, 57.62876934700025, 57.613155461235124, 57.6000111251905, 57.58863511445771, 57.56956101650745, 57.55140328427097, 57.540848743428256, 57.417824475878334, 57.40169915735193, 57.383013248318925, 57.37433781597191, 57.30988334727188, 57.309868744924245, 57.30721411526896, 57.3004019040575, 57.28756674846668, 57.2052499823113, 57.18167520594303, 57.17812138294667, 57.16025780047884, 57.14872677118165, 57.131779126090095, 57.11788890191877, 57.07763056885719, 57.01798810071652, 56.97521512587891, 56.94583682981156, 56.923286632315936, 56.91717179047548, 56.88973272564456, 56.85282639160934, 56.81208711549434, 56.80137841276224, 56.75115640842028, 56.74589523952788, 56.66038106457312, 56.647422236800764, 56.63028865509943, 56.59238908857443, 56.50006184573312, 56.487614879059635, 56.47960675471332, 56.46331095859982, 56.46213178950029, 56.448442960961444, 56.424061317050715, 56.4148272181993, 56.41443902928202, 56.41274757074618, 56.397320906603376, 56.38946780082149, 56.339214021759105, 56.31092214065519, 56.291258458155156, 56.19494325466966, 56.16706919551581, 56.16663462953046, 56.155584543286665, 56.10621621189273, 56.07426100962109, 56.05230039667518, 56.049754408516264, 56.02546680375423, 56.010505623642175, 55.95807987132804, 55.927319725516135, 55.896373214756906, 55.88612999605557, 55.87833915470195, 55.850232781870275, 55.783900918024585, 55.78075074296826, 55.7334466000048, 55.721371934888325, 55.691279097077164, 55.68618840577187, 55.647901507004605, 55.642903998173, 55.62772553506823, 55.62753959845848, 55.61175566344377, 55.609210531959874, 55.56185958359082, 55.55855438997003, 55.53221634245018, 55.5195838675044, 55.51925794301536, 55.49330851275025, 55.47870417517262, 55.44780404148146, 55.435078384062024, 55.40790340762935, 55.38861245502391, 55.38223352478523, 55.35138019649969, 55.32643988608453, 55.26785248652435, 55.23004653081056, 55.22214661962307, 55.20749633331493, 55.19930184402134, 55.17357012508644, 55.15859348595173, 55.14380321176429, 55.11285712934259, 55.09817506831398, 55.087249082589246, 55.0730329339289, 55.01768846356118, 54.979355187725844, 54.97530496265344, 54.95561036210798, 54.943210200840056, 54.939593685077966, 54.932562477523696, 54.913303299638685, 54.87850795943948, 54.86000841535376, 54.85552319595848, 54.80910321565091, 54.79339743242468, 54.746449703658094, 54.73138031038724, 54.73109990629123, 54.72368222316973]}], [{'positions': [[511, 236], [510, 236], [86, 464], [87, 464], [501, 249], [186, 475], [191, 16], [192, 16], [181, 31], [205, 359], [501, 248], [205, 360], [186, 474], [75, 442], [504, 242], [255, 330], [75, 443], [490, 127], [175, 12], [231, 52], [192, 15], [157, 116], [277, 282], [76, 442], [376, 54], [502, 258], [254, 331], [254, 330], [206, 359], [238, 114], [158, 116], [230, 52], [305, 32], [71, 65], [137, 462], [376, 53], [489, 127], [18, 355], [176, 12], [180, 31], [306, 32], [90, 506], [377, 53], [81, 411], [70, 65], [91, 506], [432, 419], [238, 115], [230, 53], [448, 128], [158, 115], [503, 244], [172, 329], [136, 462], [277, 281], [388, 439], [266, 331], [71, 64], [243, 287], [80, 411], [18, 356], [489, 128], [447, 128], [432, 418], [187, 474], [265, 332], [140, 459], [244, 287], [504, 241], [80, 412], [171, 329], [388, 440], [346, 437], [504, 258], [501, 250], [265, 331], [397, 2], [171, 330], [458, 147], [347, 479], [237, 115], [503, 271], [276, 282], [140, 458], [142, 313], [2, 334], [420, 140], [2, 406], [511, 283], [51, 283], [503, 258], [19, 355], [278, 378], [458, 146], [457, 147], [433, 418], [387, 440], [448, 127], [359, 247], [507, 243], [279, 378], [186, 225], [176, 11], [509, 270], [510, 281], [433, 467], [186, 226], [187, 225], [500, 253], [57, 254], [2, 335], [504, 261], [25, 2], [79, 162], [52, 283], [421, 140], [433, 468], [90, 507], [234, 314], [24, 2], [92, 377], [1, 335], [222, 497], [285, 383], [397, 3], [501, 247], [93, 377], [473, 338], [400, 424], [192, 171], [56, 254], [193, 171], [284, 383], [125, 151], [212, 409], [9, 448], [111, 456], [306, 31], [510, 239], [243, 288], [30, 70], [210, 45], [111, 455], [360, 501], [234, 313], [165, 165], [142, 314], [291, 220], [333, 16], [342, 466], [352, 472], [87, 463], [422, 410], [290, 0], [110, 456], [189, 474], [468, 61], [396, 3], [233, 314], [229, 334], [506, 169], [30, 69], [510, 237], [511, 239], [8, 445], [139, 93], [358, 247], [388, 345], [199, 49], [354, 511], [59, 273], [139, 94], [79, 163], [8, 68], [137, 233], [401, 424], [211, 45], [363, 459], [8, 444], [422, 409], [280, 388], [137, 232], [171, 434], [343, 254], [506, 168], [312, 160], [8, 69], [228, 334], [51, 296], [50, 297], [344, 466], [37, 0], [51, 297], [432, 468], [118, 497], [229, 333], [171, 433], [400, 425], [119, 496], [333, 15], [280, 387], [25, 1], [4, 437], [468, 60], [467, 61], [211, 409], [472, 338], [505, 258], [344, 341], [124, 151], [437, 389], [505, 169], [506, 272], [503, 270], [289, 0], [118, 496], [462, 31], [96, 245], [374, 185], [341, 71], [279, 377], [56, 255], [136, 233], [507, 239], [97, 245], [346, 436], [469, 145], [201, 459], [341, 466], [96, 246], [141, 458], [192, 172], [364, 198], [14, 138], [110, 322], [138, 94], [7, 454], [509, 257], [29, 70], [434, 109], [469, 394], [57, 129], [387, 345], [7, 69], [196, 235], [359, 246], [59, 274], [311, 160], [221, 497], [56, 129], [230, 234], [315, 350], [500, 250], [380, 163], [1, 428], [200, 459], [505, 274], [172, 433], [437, 388], [504, 244], [344, 342], [388, 498], [201, 458], [12, 446], [343, 253], [233, 27], [332, 16], [336, 191], [508, 275], [234, 27], [357, 458], [435, 108], [505, 265], [1, 436], [336, 190], [121, 442], [370, 108], [341, 72], [362, 203], [95, 479], [121, 441], [92, 119], [509, 211], [509, 210], [0, 464], [196, 236], [143, 313], [380, 164], [457, 132], [3, 445], [361, 221], [189, 147], [375, 150], [364, 197], [16, 341], [210, 46], [250, 499], [92, 378], [484, 80], [354, 470], [373, 480], [495, 459], [473, 63], [469, 395], [508, 243], [291, 221], [155, 389], [285, 382], [57, 128], [342, 71], [456, 132], [181, 30], [316, 350], [0, 422], [16, 340], [279, 388], [124, 152], [200, 49], [502, 246], [143, 125], [281, 479], [502, 254], [472, 339], [12, 417], [434, 108], [436, 389], [508, 281], [197, 235], [352, 473], [1, 409], [103, 428], [506, 269], [485, 80], [388, 344], [342, 485], [369, 108], [189, 146], [468, 145], [223, 367], [510, 270], [363, 203], [212, 496], [189, 473], [222, 367], [13, 83], [120, 442], [354, 65], [507, 281], [463, 31], [457, 131], [17, 405], [346, 439], [293, 252], [205, 97], [4, 427], [206, 97], [14, 137], [282, 479], [347, 436], [375, 498], [462, 32], [359, 474], [508, 247], [230, 235], [436, 86], [374, 150], [277, 202], [2, 456], [113, 241], [13, 420], [348, 494], [507, 254], [2, 409], [279, 226], [96, 26], [211, 410], [359, 0], [342, 254], [366, 285], [470, 394], [375, 505], [311, 161], [213, 427], [78, 163], [99, 172], [381, 163], [326, 324], [346, 440], [188, 24], [234, 26], [281, 480], [479, 439], [358, 458], [153, 327], [195, 460], [98, 173], [17, 340], [435, 86], [159, 257], [502, 253], [99, 173], [315, 351], [199, 50], [508, 211], [359, 479], [153, 145], [223, 510], [134, 385], [7, 448], [365, 285], [503, 245], [104, 428], [224, 501], [293, 251], [142, 246], [96, 479], [142, 125], [279, 225], [290, 221], [2, 258], [242, 185], [369, 109], [218, 184], [143, 470], [14, 450], [134, 386], [204, 509], [12, 83], [217, 102], [493, 35], [233, 147], [363, 198], [7, 451], [99, 359], [221, 500], [436, 85], [118, 201], [473, 62], [510, 251], [228, 503], [232, 148], [194, 460], [469, 461], [205, 98], [511, 244], [509, 271], [108, 451], [194, 461], [482, 241], [331, 258], [142, 247], [215, 496], [233, 148], [213, 428], [0, 416], [482, 240], [363, 500], [290, 409], [113, 265], [389, 472], [469, 460], [100, 359], [0, 125], [103, 429], [47, 285], [218, 102], [507, 277], [373, 185], [376, 239], [2, 457], [155, 388], [336, 484], [118, 200], [359, 54], [154, 327], [1, 422], [290, 410], [362, 221], [13, 445], [244, 511], [246, 445], [38, 0], [112, 241], [130, 252], [117, 369], [502, 267], [361, 504], [337, 190], [228, 506], [188, 23], [222, 368], [359, 53], [115, 283], [356, 498], [429, 385], [381, 390], [362, 204], [452, 59], [420, 319], [389, 491], [480, 446], [376, 238], [334, 491], [215, 501], [352, 215], [377, 462], [494, 459], [236, 286], [365, 286], [160, 257], [101, 3], [378, 504], [492, 35], [383, 497], [231, 234], [294, 251], [345, 473], [375, 239], [444, 419], [365, 470], [164, 165], [470, 193], [3, 258], [137, 461], [216, 424], [395, 492], [335, 256], [278, 226], [360, 0], [194, 70], [112, 265], [480, 257], [500, 261], [363, 499], [481, 241], [0, 126], [479, 257], [15, 408], [159, 258], [361, 222], [469, 193], [100, 3], [505, 269], [143, 246], [336, 483], [511, 245], [509, 247], [391, 482], [10, 409], [91, 119], [402, 502], [161, 283], [34, 495], [420, 318], [349, 25], [142, 126], [47, 182], [447, 176], [365, 424], [382, 390], [46, 76], [479, 438], [506, 271], [239, 222], [495, 458], [143, 471], [316, 420], [204, 16], [101, 2], [480, 438], [202, 210], [227, 462], [362, 474], [369, 189], [421, 139], [396, 504], [204, 17], [218, 101], [3, 446], [58, 274], [508, 254], [96, 478], [5, 434], [511, 6], [371, 482], [397, 274], [200, 493], [7, 410], [410, 342], [100, 358], [218, 183], [303, 104], [480, 256], [116, 369], [501, 246], [48, 51], [187, 414], [351, 215], [228, 150], [236, 285], [113, 240], [510, 252], [504, 8], [49, 51], [500, 88], [493, 510], [373, 488], [95, 26], [466, 510], [20, 412], [174, 24], [343, 342], [350, 25], [278, 4], [368, 498], [380, 126], [194, 178], [388, 467], [416, 13], [506, 240], [503, 8], [198, 307], [63, 494], [227, 499], [497, 157], [347, 502], [7, 453], [152, 145], [354, 64], [222, 510], [54, 164], [110, 321], [205, 498], [358, 54], [403, 494], [307, 218], [276, 202], [173, 454], [398, 497], [96, 25], [352, 214], [398, 485], [3, 413], [165, 341], [220, 504], [1, 437], [247, 445], [198, 306], [369, 498], [267, 473], [468, 146], [392, 98], [317, 420], [46, 182], [78, 41], [11, 398], [509, 254], [54, 332], [508, 490], [364, 508], [12, 445], [96, 93], [444, 232], [137, 300], [448, 258], [46, 183], [277, 4], [187, 371], [23, 40], [480, 445], [493, 34], [5, 430], [316, 421], [359, 458], [47, 284], [216, 108], [368, 499], [508, 263], [193, 376], [377, 501], [200, 239], [223, 497], [203, 209], [498, 157], [202, 106], [227, 463], [49, 482], [201, 190], [373, 66], [193, 510], [46, 285], [228, 149], [111, 386], [472, 63], [216, 109], [505, 43], [361, 474], [508, 238], [390, 472], [502, 274], [10, 448], [351, 462], [241, 185], [193, 178], [8, 227], [353, 498], [47, 76], [8, 448], [255, 241], [62, 196], [173, 402], [372, 120], [498, 18], [510, 268], [279, 484], [331, 257], [190, 509], [427, 25], [506, 234], [346, 473], [383, 492], [149, 388], [84, 361], [389, 495], [388, 507], [186, 371], [351, 502], [470, 460], [372, 488], [288, 105], [505, 234], [332, 257], [364, 453], [210, 501], [267, 295], [360, 488], [50, 482], [367, 128], [466, 509], [431, 454], [384, 409], [98, 505], [1, 448], [367, 462], [60, 468], [301, 216], [63, 196], [269, 130], [376, 477], [288, 106], [343, 466], [187, 24], [92, 118], [116, 370], [63, 493], [498, 374], [212, 428], [278, 3], [189, 384], [499, 374], [340, 227], [207, 506], [339, 262], [354, 469], [373, 65], [1, 449], [388, 466], [268, 130], [21, 433], [385, 471], [166, 341], [30, 223], [381, 504], [142, 471], [320, 509], [190, 412], [372, 504], [3, 452], [367, 127], [133, 392], [12, 455], [378, 505], [130, 212], [208, 510], [321, 509], [229, 149], [4, 464], [370, 488], [289, 508], [51, 361], [267, 294], [298, 484], [510, 6], [162, 326], [498, 375], [394, 489], [340, 226], [289, 410], [346, 463], [188, 483], [268, 218], [47, 69], [421, 318], [349, 488], [346, 470], [34, 496], [508, 491], [382, 477], [443, 232], [500, 87], [375, 203], [5, 122], [187, 483], [368, 189], [392, 315], [358, 479], [509, 490], [185, 509], [205, 16], [420, 222], [13, 450], [413, 426], [134, 391], [399, 504], [374, 480], [389, 498], [426, 25], [150, 478], [97, 93], [347, 470], [3, 437], [212, 300], [37, 223], [12, 84], [350, 456], [131, 212], [1, 453], [351, 459], [348, 473], [124, 10], [360, 474], [368, 459], [508, 0], [347, 439], [219, 497], [182, 316], [501, 413], [311, 145], [341, 474], [352, 475], [345, 466], [219, 183], [297, 484], [267, 472], [153, 328], [414, 426], [339, 261], [119, 297], [186, 372], [84, 362], [161, 282], [2, 129], [358, 455], [137, 299], [463, 400], [447, 177], [173, 455], [400, 363], [375, 204], [494, 510], [63, 195], [149, 387], [269, 218], [12, 402], [55, 164], [143, 73], [431, 455], [316, 125], [326, 323], [396, 274], [238, 498], [0, 226], [371, 120], [392, 473], [11, 201], [251, 184], [31, 223], [15, 400], [195, 70], [62, 344], [215, 424], [465, 510], [371, 505], [277, 201], [153, 144], [285, 410], [160, 283], [362, 511], [373, 404], [58, 117], [150, 477], [429, 384], [133, 386], [418, 306], [392, 316], [61, 45], [359, 90], [16, 435], [136, 300], [504, 43], [500, 271], [4, 469], [219, 204], [23, 448], [426, 375], [449, 310], [61, 468], [495, 75], [451, 59], [448, 369], [382, 489], [47, 70], [494, 75], [412, 28], [203, 106], [242, 497], [448, 257], [413, 427], [113, 264], [489, 110], [230, 319], [436, 83], [404, 490], [255, 240], [503, 246], [250, 502], [101, 323], [343, 463], [422, 440], [479, 446], [246, 505], [5, 423], [427, 221], [38, 48], [223, 494], [135, 365], [277, 319], [482, 61], [511, 268], [362, 479], [402, 467], [134, 392], [39, 410], [2, 407], [11, 402], [99, 505], [422, 441], [188, 474], [49, 50], [413, 28], [262, 42], [63, 407], [363, 482], [76, 494], [254, 241], [383, 483], [130, 213], [86, 465], [503, 261], [203, 210], [86, 493], [334, 494], [76, 114], [255, 250], [0, 470], [279, 483], [158, 142], [101, 324], [398, 501], [356, 508], [360, 483], [203, 105], [3, 469], [489, 372], [508, 239], [200, 190], [501, 87], [462, 400], [476, 258], [62, 494], [120, 296], [290, 508], [453, 468], [333, 9], [363, 453], [268, 235], [2, 259], [54, 165], [249, 148], [408, 504], [185, 493]], 'threshholds': [235.91163153613755, 194.52574693443114, 187.99404409036043, 167.03893330953596, 151.2634427777548, 150.22625565178654, 150.04538815945315, 147.6659876422518, 145.70307613886015, 144.58060757995253, 142.7303689122506, 141.70708789781392, 141.6391891042889, 140.81882852093014, 139.9881946574997, 138.40101657610498, 136.77625025032674, 136.27972551344732, 136.16559310456205, 135.62067780975576, 135.2813066576373, 135.19596338860708, 134.6905772827709, 134.6277219468081, 133.6565557908817, 132.07907729236916, 131.38959622402973, 131.281423210083, 130.94810463537667, 130.44417724606092, 129.6891862121034, 128.03663943798253, 127.96501548719911, 127.7221617908736, 127.71098760411074, 127.6397673012673, 127.48425922631165, 127.21278686771817, 127.19883480745608, 126.78892611951751, 126.76716733054164, 126.55231136555146, 126.46997914037347, 124.15396127925641, 123.2076577102942, 123.00709561741533, 122.29026781004357, 121.967223372084, 121.90005372265043, 121.74186052833171, 121.17709561441563, 120.35490486965423, 119.75118403562008, 118.76249610907507, 118.24647859562026, 117.74300123131259, 117.15309418301132, 116.98161623643124, 116.0463782127355, 115.8178183885213, 115.346311685508, 115.00995157724161, 114.81904269017684, 114.35028294261741, 113.93818553739186, 113.76593206965218, 113.70436497262276, 113.34300228951307, 113.06277634678408, 112.53498003133144, 112.33191918403676, 111.78669342376418, 111.7135021149639, 111.39875995111916, 111.31493723470021, 111.27905676455016, 110.3658570772513, 109.67353501430925, 109.25959113198348, 109.196642613547, 109.15629152634935, 108.91953678450409, 108.85111024252004, 108.63540103291938, 108.30143060923501, 107.76927274656857, 107.56647555933465, 106.90966252166062, 106.43109412138519, 106.4239400983245, 106.31992637928387, 106.15420600367241, 106.07455846952003, 105.90976949030744, 105.8259626612487, 105.74687379360067, 105.06210982999693, 104.8429859286041, 104.62802132211762, 104.28455271118354, 104.10605987274694, 104.0453464486656, 103.71818952120525, 103.07720636727645, 102.9665036808685, 102.84926747399498, 102.81498442323212, 102.71070704413087, 102.66050049881161, 102.60130805567903, 102.23151814126032, 101.44846711153922, 101.31946670501559, 100.6865852862443, 100.38612239216319, 100.35028701406868, 100.3135206679127, 100.03106048750364, 99.90598663387092, 99.38708260542049, 99.088978477876, 98.98133321238822, 98.7780550821009, 98.29383775235327, 98.26866469992277, 97.81932000548778, 97.78893258957052, 97.57843774345665, 97.02267418637653, 96.70431679178226, 96.61264139791898, 96.60225861967592, 96.49438061217279, 96.33924483877425, 96.0124915592539, 95.89238429640741, 95.73370930236024, 95.55035851463369, 95.49214384496813, 95.38434356091598, 95.23100788754964, 95.17796120430286, 95.17169134389802, 94.79946408281668, 94.52262277050951, 94.30217971213797, 94.2530286637367, 94.07602545986592, 93.95337263719807, 93.82589235494815, 93.71194673934765, 93.63132100339071, 93.61336509512422, 93.41558087574467, 93.3347073670871, 93.25235925454888, 92.98605531071163, 92.764634478873, 92.76326894482622, 92.6801139647455, 92.54319818801169, 92.53934935857171, 92.46525671474278, 92.13696742358852, 92.00234857730055, 91.70956831141424, 91.62253358384824, 91.52967859254791, 91.39445470268745, 91.3025461384713, 91.2524018575803, 91.16701221148207, 91.11494330170234, 91.10935620832092, 91.00281281681924, 90.95904703782941, 90.88256556609356, 90.80375538919141, 90.80277804406185, 90.63770994576585, 90.61596661581265, 90.46562652727579, 90.3061141759783, 90.25756817114946, 90.255907630659, 90.18231267391874, 90.16095753288285, 89.9449687758612, 89.89244984107341, 89.87855961690207, 89.83348971161857, 89.76678597455339, 89.74009194117413, 89.59031051914164, 89.52598100763569, 89.50934382801046, 89.43945814116847, 89.22149837818998, 89.1295747832887, 89.05633666908281, 88.89025945093681, 88.50462376541269, 88.49773340241268, 88.440154694365, 88.40731490109994, 88.33339401987064, 88.29302704531273, 88.29229790122119, 88.28742449290864, 88.21969617697074, 88.17999651041355, 88.04421395404873, 88.01395021031287, 87.77578355735272, 87.55487501495045, 87.54820150660566, 87.23443797290301, 87.15314535728277, 87.07393238911573, 86.89294079626328, 86.74758232919785, 86.58980824184178, 86.4554066785465, 86.37259351031501, 86.33702179228126, 86.24989388224161, 86.20516578880739, 86.07619630032909, 86.07245611238551, 86.00059941958665, 85.95337257173664, 85.80376205562875, 85.80027006872317, 85.43085245586158, 85.34484187883066, 85.17064789484208, 85.07697057697663, 85.06306532211998, 85.03137335157167, 84.96038579074359, 84.88086235711022, 84.67822061677822, 84.41556367841093, 84.37494850281499, 84.28120892052125, 84.16955937869159, 84.09189830951865, 84.0820591670948, 84.05157771202883, 83.88542319876937, 83.67579748462627, 83.56113732728198, 83.52610924506742, 83.34300665837893, 83.15496882728706, 83.0938831016486, 83.07679546867777, 83.01912443483151, 82.98938843955469, 82.96013295899377, 82.9073507924828, 82.82023834146581, 82.80831912325128, 82.80020150073358, 82.7181492513141, 82.71063752904395, 82.70944247258419, 82.42245069571177, 82.34927527427168, 82.33265312533169, 82.29976695499855, 82.10725936353404, 81.97358737266771, 81.87933507260018, 81.85973408286591, 81.8248146421477, 81.7929835403951, 81.76889690292798, 81.68017028848855, 81.6649299892931, 81.588914001588, 81.50557265656, 81.39628230960444, 81.39167298969011, 81.26383629324323, 81.2435521081481, 80.97234383795285, 80.93669482480563, 80.88875429188681, 80.86828331350682, 80.8174408065697, 80.69742629785938, 80.69491208442086, 80.6626154986375, 80.61309172034164, 80.53720026149307, 80.51188722118329, 80.45693179640799, 80.45311388501338, 80.31419575593985, 80.19587356244045, 80.0672609164966, 79.95320623106227, 79.89786261736964, 79.87954900989371, 79.82625412560886, 79.70209578101492, 79.6698769186825, 79.44119256561179, 79.42865284480213, 79.39978598149605, 79.31475274959472, 79.28757777316203, 79.21404593752503, 79.16726868634555, 79.16019153006079, 79.15854644859299, 79.13590306862369, 79.10834075994875, 79.103621941863, 79.04334308376701, 78.87166331321681, 78.77826511443484, 78.2512284327816, 78.1855179282061, 78.18005493534372, 78.14751014852229, 78.13523365943585, 77.94632669637326, 77.87015483342869, 77.73347308372284, 77.58428167457762, 77.37155173410869, 77.2275746884503, 77.01852309983418, 77.00702298858238, 76.99223271439499, 76.76789402117785, 76.71394728791495, 76.68413356918718, 76.55839240755374, 76.46592517683318, 76.41047334998171, 76.40018375421228, 76.37786629873202, 76.36580752097579, 76.23978681192136, 76.2126577842192, 76.2030204657654, 76.20039761083052, 75.9799386650987, 75.95984084495086, 75.89832055332705, 75.87788092132993, 75.8769031478628, 75.85910182982329, 75.79297221828516, 75.65821381245543, 75.61980238483164, 75.5789076618147, 75.49030514789435, 75.4423173812324, 75.36304172029956, 75.31077227156239, 75.29449193447158, 75.28895164649572, 75.26373178865968, 75.10836284490821, 75.06690988372446, 74.89498105546129, 74.89125718321534, 74.79535980167994, 74.61748746583848, 74.60040068954278, 74.59406856470966, 74.3786075561471, 74.3097305608175, 74.15360155492921, 74.1353192938362, 73.92269799486363, 73.92231023428383, 73.73085813973736, 73.72432419093427, 73.56827290849697, 73.52761092749537, 73.43436817561529, 73.39029193115911, 73.23267286236745, 73.22191778256733, 73.11810588749684, 73.09052726312414, 73.03003112203545, 72.86280436782272, 72.77558413198447, 72.76870879966967, 72.63596820520237, 72.55577746356826, 72.55371327513778, 72.54548786779883, 72.4758503819949, 72.376663694199, 72.36123703005619, 72.22124837337947, 72.19519072995557, 72.01466462113385, 71.98174710441785, 71.85575731340879, 71.77879489861952, 71.60368454891707, 71.54992460893904, 71.52756034805313, 71.47345859622585, 71.42464893133625, 71.3662788147688, 71.3505107671143, 71.2409876781434, 71.15607897509858, 71.14810176879769, 71.11141314609264, 71.09635878350699, 71.09134581565266, 71.0399910192792, 70.97272818737204, 70.83683698951091, 70.68548778112405, 70.56618738582004, 70.55313494723652, 70.52797778216623, 70.50669993624378, 70.5002127928463, 70.41947884373045, 70.40065337515576, 70.36427436124198, 70.25965602696664, 70.2396664199775, 70.23375340210711, 70.18638699471538, 70.1499311140257, 70.07945541429638, 69.59550260128458, 69.54787210549456, 69.47325299821921, 69.4561967116313, 69.3841850002681, 69.37409680013108, 69.32486845661637, 69.32359567670572, 69.31797766527896, 69.29818988225986, 69.26286679360166, 69.21264478925968, 69.1834520014646, 69.10642732224706, 69.06592078814744, 69.05311697893947, 69.04375835123157, 69.03956813827983, 69.0338878624248, 68.91269375627743, 68.91139048665885, 68.81696770900419, 68.67143876435168, 68.60198764349502, 68.49628246591871, 68.46150258474219, 68.45183391990543, 68.44747322936666, 68.40136328618793, 68.39312241982627, 68.3898782056212, 68.37069632284964, 68.36244042580282, 68.23773844538967, 68.20429318021462, 68.16082240766845, 68.11305149566161, 67.99612618259198, 67.95461095697992, 67.77119833316257, 67.74951683930013, 67.72510427734406, 67.6643444761946, 67.62739176509132, 67.61821950233066, 67.53476951580635, 67.48468707100609, 67.45957585466638, 67.43916799738966, 67.39759050734929, 67.32767347412442, 67.28528911654165, 67.24887961292004, 67.21650530368571, 67.19004401232175, 67.17733338558753, 67.15753014354576, 67.11722543341612, 66.84302157839146, 66.80076132132771, 66.7289978110025, 66.72375210113282, 66.71214334838463, 66.66865711681571, 66.63639144907779, 66.6002456055169, 66.5996710516523, 66.58635538134561, 66.55866811547656, 66.51729244940624, 66.44790359297785, 66.40944535994848, 66.39631562625152, 66.37308266173245, 66.25567469225928, 66.11773562166537, 66.08172976598377, 65.97577595903184, 65.81655861417798, 65.7812355255198, 65.77082182923138, 65.71870611404601, 65.69033608115359, 65.67644585698227, 65.6468807676301, 65.61189906248362, 65.59740336640229, 65.57503953385395, 65.54626585302157, 65.50414515549953, 65.45317811970585, 65.3241467951368, 65.29897374270632, 65.28410574506788, 65.22511512590526, 65.12949772012843, 65.10454195069059, 65.01356478287342, 65.01072464494585, 64.97768302771082, 64.85642708547272, 64.76771593005597, 64.7334637973385, 64.5760469808543, 64.55483097102261, 64.45019589271199, 64.41040390035619, 64.33999132173017, 64.22138786745973, 64.19953632434768, 64.18623611306369, 64.18564610017637, 64.12752461298452, 64.10300340953202, 64.09415707126044, 64.08202057005325, 64.00982249374269, 63.99054700015996, 63.885850514096056, 63.883429483131195, 63.84022237064575, 63.83136057335147, 63.813761079281875, 63.70437712151512, 63.70391206582193, 63.64769932015857, 63.615449111443276, 63.537602105660575, 63.5221754415178, 63.49208260370662, 63.473924443132645, 63.3937800785666, 63.3834441057291, 63.38263595317409, 63.32928008947353, 63.301670547055465, 63.27825078925158, 63.05602308987051, 63.012133210361654, 62.983995919484606, 62.955703181705616, 62.93659859404748, 62.896976650941234, 62.867969799755905, 62.77038138802224, 62.76575660908519, 62.753092359419, 62.729719407020696, 62.68216663468161, 62.675322648749734, 62.62312963845097, 62.567227358253916, 62.56328534634031, 62.53690177842737, 62.516152109301444, 62.40551125898421, 62.302894420373505, 62.288554171194136, 62.119885016158676, 62.084080984447034, 62.052296259762485, 62.00719586477119, 61.97328554390285, 61.97319193309177, 61.94637379919348, 61.93138170103606, 61.93091621700531, 61.91283535154476, 61.89405668837565, 61.89286163191592, 61.870466024647165, 61.81889437361858, 61.785728655864496, 61.76249526300793, 61.76199886093181, 61.737383618330625, 61.715765245571504, 61.70862625319597, 61.69465830557367, 61.681730395846735, 61.680334372091984, 61.61331931288538, 61.61324158943443, 61.57829123067085, 61.4638792743646, 61.43729388248172, 61.395359549906935, 61.35457304004888, 61.2620134835297, 61.22094785458817, 61.17815984906535, 61.16717202724988, 61.091962907087186, 61.075744406087146, 61.072035564526395, 61.052574134333824, 61.025941937045374, 60.99049474786814, 60.97332981978393, 60.9648094060013, 60.95976552010161, 60.879419759903065, 60.856217285091866, 60.84228025551495, 60.81117915452886, 60.75741792953819, 60.719674238252665, 60.68868135042541, 60.68716036947664, 60.6867562931991, 60.65017674032796, 60.64289818841068, 60.60867697373858, 60.524792421228895, 60.489981622007015, 60.46451356313287, 60.44664998066503, 60.43696585680558, 60.36371271191457, 60.34317989744379, 60.33591680454916, 60.30144653216398, 60.27470655005422, 60.24570012720644, 60.17939960974363, 60.10488914396458, 60.07100931280419, 60.06976787927639, 60.04395843689055, 60.02646758431729, 60.000192657900705, 59.977782019946766, 59.913608383680206, 59.89574437287486, 59.85059717247798, 59.82952157886305, 59.81816102715291, 59.67790871041541, 59.650066854319576, 59.6428806282009, 59.549761548502296, 59.545074933474545, 59.53123065803374, 59.482700968902684, 59.4730941401567, 59.399701007386426, 59.38908548712796, 59.377461275357085, 59.36349332773481, 59.355143819876815, 59.35242778246831, 59.33394369740533, 59.31532005280059, 59.28001242316509, 59.23837266869648, 59.22389285997539, 59.20135812150243, 59.194653266774694, 59.1934745260127, 59.158678757475975, 59.142631162400505, 59.10811494128478, 59.047293304044565, 59.03078022493841, 59.023889433600914, 58.9953175767385, 58.98471751550274, 58.96898038589366, 58.915436443895686, 58.88678772025736, 58.87685496702232, 58.83198731404641, 58.820937227802595, 58.72739946947885, 58.72002773508791, 58.62425488240913, 58.59863180497056, 58.57401741904444, 58.568569885204774, 58.491824753408146, 58.44697255945489, 58.43748983122795, 58.42403417304199, 58.41428778475428, 58.37832873447821, 58.310709060036686, 58.27411319146781, 58.25674643941353, 58.24808646608925, 58.19429432305324, 58.16400008960957, 58.062236923946855, 57.98769554012244, 57.918399437830175, 57.90455601906443, 57.89805298830672, 57.89650108931263, 57.767205676345306, 57.74169124040308, 57.73709737951142, 57.726916425238336, 57.673528358479814, 57.64706706711595, 57.64678794803245, 57.64585612329598, 57.602183955117326, 57.58427399558142, 57.57067877785373, 57.54834543501324, 57.54119098361498, 57.537543978145024, 57.46666463047572, 57.438310484943536, 57.43717726457453, 57.42049370788124, 57.399123107822675, 57.37256863398513, 57.361053063710585, 57.3349486148811, 57.329470162996024, 57.317411385239794, 57.12653341622041, 57.109384375496376, 57.00786941087173, 56.947854641173954, 56.93844920806044, 56.93584138381074, 56.92784914682468, 56.91970103459921, 56.89682448427701, 56.88077860255162, 56.88035863891392, 56.79634998588523, 56.703960478615606, 56.67275030779568, 56.63333018865945, 56.567262413212, 56.547102328635845, 56.50476391978358, 56.49545252581879, 56.44768247048707, 56.44406638306243, 56.441334886631225, 56.440279818050755, 56.38384978939473, 56.35138229768674, 56.300989387420174, 56.230451851600115, 56.23003274463739, 56.20226818365501, 56.19998671223185, 56.18392365813369, 56.178988413730366, 56.17579143326841, 56.146629563518715, 56.1343380437471, 56.090106352389014, 56.0715295131899, 56.057266987461475, 55.98929004214794, 55.97232693803378, 55.9566829908983, 55.878339154701976, 55.837739438128686, 55.83236962773995, 55.79780702955611, 55.70484339675946, 55.6725468109761, 55.659184335263774, 55.650120713999506, 55.59707403075271, 55.54598289444001, 55.45759766351231, 55.42430784523919, 55.39337679350268, 55.33075462789276, 55.316507132849495, 55.31591754829974, 55.314365649305586, 55.28365188056178, 55.27564375621549, 55.26162985986265, 55.21877916157408, 55.21567536358581, 55.18750629798834, 55.18530297835365, 55.18243149404322, 55.14336864577892, 55.11416039896116, 55.07697494584249, 55.07298612852328, 55.05875409250267, 55.03757028572895, 55.01671154676917, 55.015516490309416, 55.00732157267833, 54.930080038805606, 54.859138426708014, 54.85836376222355, 54.80952232261358, 54.752145866873384, 54.7468851263185, 54.69743907147363, 54.672172408231944, 54.66658531485052, 54.651732347897244, 54.65030497775971, 54.63805983505616, 54.624542340779456, 54.57495629805525, 54.569043280184836, 54.56050740737956, 54.5595764393181, 54.546353523147516, 54.48379319362835, 54.41558393463703, 54.404797508453974, 54.337332852576836, 54.314875837554844, 54.305486291801536, 54.30055104739814, 54.29434302308408, 54.26257418575973, 54.225093297859885, 54.17460806179471, 54.162797485076524, 54.131726873798286, 54.11048037425874, 54.089497534779895, 54.078012882550745, 54.077811058580735, 54.07703510908367, 54.072115323703024, 54.034448927530896, 54.02038779743495, 53.953218148001454, 53.93962293027377, 53.92694322158487, 53.917445034335216, 53.87959227321583, 53.85878033966161, 53.84653519695806, 53.84093264455395, 53.81743559163663, 53.81603871120691, 53.795087218110986, 53.784797622341564, 53.72540335523895, 53.69355636612611, 53.69206673156025, 53.68003887184943, 53.64268294114363, 53.63875638825272, 53.63437981035372, 53.62565757260117, 53.60644434344664, 53.56793973334921, 53.55442181073499, 53.536185926710026, 53.52870555082277, 53.5166931501346, 53.510640572722465, 53.51033010725611, 53.50721085024516, 53.49597439905406, 53.466347045273594, 53.464732881851205, 53.46155136041196, 53.4545210095327, 53.45267410409499, 53.45144812958985, 53.43432957857368, 53.41988068789797, 53.419089279378206, 53.37370890862846, 53.297414230177395, 53.272923944770326, 53.270425190354516, 53.24404162244158, 53.24214833993574, 53.21964451950814, 53.2108759046875, 53.209820407769485, 53.20600249637489, 53.15508226598682, 53.13757595439088, 53.120923315742985, 53.112527002479396, 53.10462751962948, 53.08794353459868, 53.08640709462722, 53.08125456723117, 53.05195313793973, 53.04110487566594, 53.033453593854055, 53.027988887641555, 53.007566428017256, 52.98256428151137, 52.98006509875802, 52.970629604274166, 52.955233858176776, 52.95503246254425, 52.95191234885823, 52.92995216424991, 52.92787251679676, 52.92006535974541, 52.881670247819386, 52.835560732978145, 52.81549383087563, 52.81277736512962, 52.74554587960539, 52.70510118159648, 52.692095976756065, 52.6802544819925, 52.668878471259696, 52.66561922636947, 52.65424321563668, 52.611160203670266, 52.56526754348417, 52.518321099730144, 52.49833149274109, 52.496050021317934, 52.47975422520443, 52.45973327183246, 52.42242414653229, 52.41980129159746, 52.41475740569772, 52.397080188177185, 52.34766462304012, 52.33884963115139, 52.330096903690965, 52.30284420380733, 52.242906729222994, 52.233501724447024, 52.20042918916659, 52.19549394476319, 52.19324339138548, 52.180765506666546, 52.1340818662982, 52.11913657354638, 52.09857241269272, 52.05814403038157, 52.05080278569851, 52.014843735422474, 52.00070488187557, 51.88812308697186, 51.8704316954412, 51.86445684148002, 51.85736422617252, 51.82298799293602, 51.754964670554486, 51.754436922095465, 51.723676776283554, 51.71262669003975, 51.706046364168586, 51.64660571999789, 51.639792223773874, 51.63564838789026, 51.62369825163035, 51.60540053151469, 51.5955141553477, 51.523502443984476]}], [{'positions': [[373, 245], [504, 260], [450, 434], [87, 342], [505, 260], [223, 417], [401, 434], [438, 23], [510, 236], [99, 403], [441, 348], [476, 228], [458, 179], [167, 431], [42, 155], [217, 294], [435, 216], [409, 309], [77, 474], [373, 386], [162, 18], [322, 123], [301, 54], [295, 178], [488, 447], [44, 189], [506, 270], [434, 232], [255, 314], [0, 200], [316, 430], [450, 504], [240, 307], [230, 338], [360, 8], [193, 110], [377, 268], [0, 339], [4, 76], [458, 11], [209, 171], [217, 0], [315, 108], [35, 426], [81, 441], [53, 389], [240, 0], [394, 218], [131, 340], [69, 66], [508, 267], [436, 0], [24, 0], [213, 118], [363, 61], [0, 336], [161, 19], [374, 39], [432, 55], [191, 402], [351, 134], [259, 457], [66, 402], [455, 490], [108, 186], [448, 290], [408, 181], [464, 288], [105, 26], [281, 342], [197, 397], [252, 493], [129, 282], [373, 140], [57, 486], [503, 320], [142, 251], [186, 5], [463, 439], [241, 0], [252, 86], [305, 465], [98, 47], [255, 86], [290, 101], [328, 290], [164, 372], [301, 112], [241, 138], [419, 290], [376, 151], [89, 140], [408, 180], [246, 0], [80, 240], [153, 509], [139, 104], [349, 8], [500, 95], [426, 463], [208, 415], [509, 266], [502, 86], [311, 351], [36, 288], [134, 213], [361, 422], [500, 215], [124, 333], [212, 101], [118, 386], [400, 257], [75, 151], [465, 432], [63, 307], [279, 328], [215, 101], [490, 130], [326, 266], [348, 209], [105, 485], [110, 79], [259, 72], [496, 15], [219, 457], [503, 155], [269, 178], [84, 142], [508, 266], [99, 275], [47, 331], [135, 374], [21, 104], [326, 33], [432, 185], [343, 0], [455, 36], [75, 134], [462, 484], [134, 405], [313, 19], [230, 215], [118, 63], [363, 62], [160, 433], [321, 193], [28, 470], [147, 471], [503, 330], [411, 455], [411, 132], [107, 137], [240, 417], [419, 211], [253, 183], [394, 173], [159, 190], [449, 222], [505, 304], [396, 433], [151, 412], [273, 218]], 'threshholds': [70.44904393308262, 69.94007222952968, 65.58317175871926, 65.12813175774406, 64.70894259388606, 63.98000920335247, 62.43026520445207, 62.07874209210368, 61.63158568661819, 61.57891173326596, 61.330657308506375, 60.951229647296316, 60.816471241466616, 60.63617787466029, 60.56626126977287, 59.925356267632615, 59.88868310395024, 59.709770730213485, 59.68866379021563, 59.64828135663503, 59.62270465626452, 59.542995286021366, 59.473761448157404, 59.359814975881896, 58.89234346725586, 58.853466555601344, 58.77740419082815, 58.7430897936824, 58.62593088192226, 58.50745281318341, 58.24929655323415, 58.16429509605322, 58.151863588402364, 57.86271444062585, 57.8311160808886, 57.68178468386414, 57.64427330625647, 57.448196432772946, 57.31436942334226, 57.12044949242535, 56.81297170648776, 56.79652089180982, 56.79526357092181, 56.7771676747761, 56.654374864229005, 56.5419184548569, 56.48302101816795, 56.264129858790504, 56.13734865926175, 56.118507731664344, 56.03175212318175, 56.00383211529737, 55.43645980546909, 55.37605641851653, 55.352202951402305, 55.322916981133595, 55.294236482774835, 55.144035953779664, 55.136663791051205, 55.02152269065351, 55.006126944556115, 54.84351079527031, 54.73861248523646, 54.657118045646236, 54.60709786527427, 54.57494083903259, 54.41522709210264, 54.33461681516833, 54.28318429534391, 54.20605097463003, 54.195947743807935, 54.17187656536352, 54.1557980522427, 54.07652281964738, 54.02949779576733, 54.011293258125264, 53.913441186330836, 53.68399634278572, 53.55268354679352, 53.55030846455922, 53.53812601462148, 53.40145886726326, 53.35938454680927, 53.270983856858884, 53.26960243545183, 53.211713690275296, 53.210953628138455, 53.05085126395366, 53.02633006050121, 53.011570704359144, 52.88963156676009, 52.83773356290495, 52.83192918653084, 52.722669757620665, 52.6492925122106, 52.53928805184874, 52.53166768808224, 52.38983255430528, 52.17612484036928, 51.992448128153725, 51.98548004170277, 51.916293009244406, 51.84690372447851, 51.64181003513625, 51.63723163326728, 51.501899101910524, 51.488986651206275, 51.44546907325449, 51.386913020077216, 51.37091180206984, 51.35407279847466, 51.31365944684867, 51.30273388946141, 51.26020954399938, 51.25665529266554, 51.23779890604548, 51.22623653036533, 51.205517350947275, 51.18034472685428, 51.10997766862134, 51.099920814867275, 51.05817241890233, 51.04957471000629, 50.97841667159111, 50.93572142020447, 50.928101484775475, 50.91382350002439, 50.911402040721995, 50.911231134797404, 50.85745530745908, 50.848003925615004, 50.82404138866694, 50.805541844581285, 50.781579307633216, 50.77746638979493, 50.7446420555526, 50.73250555434537, 50.62946960877201, 50.62386705636787, 50.62004914497328, 50.56687836120746, 50.474054716290006, 50.43255452136313, 50.40572092844214, 50.40496043796776, 50.38146338505045, 50.36282428142304, 50.293994091499066, 50.257010462350394, 50.24673632560365, 50.21625529887519, 50.21405155090297, 50.18890941651789, 50.18406735458814, 50.17211721832827, 50.154191799769634, 50.12324486067293, 50.12025013251848, 50.093167910221936, 50.057938004037425, 50.03012663764936, 50.00697096824376]}], [{'positions': [[321, 17], [165, 310], [361, 115], [493, 381], [139, 50], [341, 446], [424, 127], [511, 264], [78, 100], [368, 107], [39, 177], [322, 430], [184, 161], [168, 325], [121, 258], [350, 171], [440, 48], [169, 325], [78, 275], [448, 127], [207, 257], [71, 303], [129, 190], [511, 312], [165, 428], [112, 456], [305, 164], [265, 80], [101, 406], [390, 348], [164, 28], [143, 173], [121, 259], [92, 245], [399, 449], [142, 155], [139, 448], [494, 160], [511, 0], [243, 75], [86, 447], [87, 447], [89, 498], [234, 349], [101, 190], [36, 469], [101, 191], [360, 244], [159, 86], [66, 445], [212, 57], [302, 144], [490, 98], [502, 257], [390, 62], [478, 154], [310, 195], [172, 0], [172, 181], [483, 273], [397, 437], [415, 413], [360, 367], [384, 445], [471, 254], [86, 435], [416, 38], [509, 238], [212, 56], [138, 134], [282, 210], [415, 0], [498, 48], [52, 426], [142, 141], [330, 394], [263, 153], [419, 117], [90, 130], [425, 174], [163, 397], [20, 26], [184, 162], [362, 114], [462, 321], [286, 330], [13, 304], [417, 164], [308, 102], [206, 397], [257, 245], [43, 256], [76, 329], [93, 291], [256, 359], [64, 139], [183, 51], [194, 448], [145, 414], [424, 66], [201, 105], [416, 264], [104, 220], [468, 463], [389, 436], [373, 154], [89, 176], [65, 236], [426, 91], [262, 444], [195, 327], [129, 98], [475, 340], [425, 66], [112, 340], [312, 315], [390, 396], [93, 298], [237, 254], [288, 246], [147, 145], [248, 292], [169, 216], [447, 201], [271, 180], [440, 221], [148, 385], [106, 507], [346, 421], [408, 75], [471, 65], [333, 72], [252, 241], [36, 436], [416, 39], [440, 235], [327, 328], [10, 0], [64, 66], [298, 426], [262, 120], [355, 157], [14, 329], [334, 338], [451, 238], [116, 107], [450, 144], [458, 376], [143, 174], [8, 125], [57, 321], [481, 470], [217, 420], [268, 456], [59, 24], [268, 298], [327, 167], [0, 23], [134, 200], [168, 84], [106, 263], [328, 407], [104, 361], [412, 59], [495, 481], [51, 212], [320, 461], [195, 68], [0, 349], [366, 155], [410, 442], [367, 107], [141, 155]], 'threshholds': [93.0088073321773, 73.94049931290319, 72.2965347886556, 70.63826136161155, 70.28054568397177, 67.54361585407797, 67.31043082258923, 66.45145698763666, 66.18563441519039, 64.9472797244333, 64.93695878228101, 63.285637982665214, 63.01821713415671, 62.79529078039198, 62.75514108882675, 61.60566803107352, 61.59922726474408, 61.3869318902605, 61.191755066793085, 61.107824137215346, 61.05625205784922, 60.94686852842002, 60.89226994617907, 60.74548368063853, 60.66723302691586, 60.13662706324355, 59.87392374780822, 59.65964190834515, 59.46879485737112, 59.31974300776764, 59.253566590823894, 58.68042082266689, 58.61615314725168, 58.43455651082675, 58.31503883253007, 58.258081055415026, 57.65023312953248, 57.25093996185239, 57.21127121334061, 57.1922284617732, 56.93747143459336, 56.62809993781243, 56.42614096450386, 56.411645696760075, 56.17728106783428, 56.12133241056918, 56.09060318280265, 55.905126370554875, 55.71305334507573, 55.709918200704564, 55.49465901611193, 55.37644503577133, 55.34593266265998, 55.28731477339191, 55.22557677043792, 55.053881540865135, 55.01987760918573, 55.016431999348214, 54.99274900982111, 54.81737542839544, 54.79966729282951, 54.78459747122113, 54.43385030836982, 54.430591491817125, 54.24263138417624, 54.228492530629325, 54.18986382001287, 54.18494403463218, 54.15834318372658, 54.13085774182758, 54.071215273686896, 54.04840098779296, 53.99456289602643, 53.87265510481024, 53.859416729616946, 53.716060186553705, 53.48442748239662, 53.47814216296913, 53.41938428582185, 53.37990190225733, 53.31279408891458, 53.24677311887275, 53.1967061330952, 53.14145570187622, 53.08497929615211, 53.07462743595444, 53.033825895411155, 52.9623573915296, 52.87557086500166, 52.8557521639372, 52.79842208526507, 52.79505419887852, 52.74056425813391, 52.73693271168661, 52.686663901939056, 52.644124097454366, 52.63166210009567, 52.62526771083427, 52.595174873023076, 52.56450748134732, 52.55766349541542, 52.49443585789552, 52.48936105395043, 52.4428946965748, 52.39762339565887, 52.37507319816323, 52.37352129916911, 52.359134244584126, 52.32727222478612, 52.32464936985127, 52.264339593709906, 52.25673468896609, 52.19189288802378, 52.12531325147755, 52.05662262109528, 51.99865615246779, 51.97158981753145, 51.96618908909734, 51.917704920359306, 51.90570840703132, 51.82902468298796, 51.738575691967334, 51.6502368381077, 51.5730880583711, 51.5151529361265, 51.47244222571718, 51.46676237819963, 51.42054422186203, 51.40072552079759, 51.38706803864164, 51.243308275975906, 51.2283161778185, 51.22636063088438, 51.214472330715225, 51.18675414680084, 51.160277396414266, 51.15161742308997, 51.10699797115209, 51.05839013023252, 51.03751593225006, 50.96257090048565, 50.92550954788603, 50.9193947060456, 50.906109953784224, 50.87514798400234, 50.8381020904254, 50.83481192748979, 50.81053892507539, 50.651445680740544, 50.613406554673844, 50.582087742357565, 50.56565238670234, 50.53931519585747, 50.53813559842044, 50.47200598688225, 50.41261171977963, 50.40002519356439, 50.39746417472029, 50.38048561158339, 50.37081694674661, 50.36062053345087, 50.325421545311684, 50.300993524332895, 50.27552546545875, 50.26295439826619, 50.21040454543301, 50.185106964145966, 50.16263449010129, 50.12791644501556, 50.0900018478054, 50.05335960216843, 50.01927837537555, 50.018859268412875]}], [{'positions': [], 'threshholds': []}], [{'positions': [], 'threshholds': []}]], 'index': [[0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0], [0, 6, 0, 0, 0, 0], [0, 7, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0], [0, 9, 0, 0, 0, 0], [0, 10, 0, 0, 0, 0], [0, 11, 0, 0, 0, 0], [0, 12, 0, 0, 0, 0], [0, 13, 0, 0, 0, 0], [0, 14, 0, 0, 0, 0]]}}
        im = tifffile.imread('data/analysis/Fig5exampleMileStone1_Part2_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1, 3)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.zeros([512, 512, 3])
        image1 = image
        image2 = image
        image3 = image
        image1[:, :, 1] = im[0 + 0 ] / np.max(im[0])
        image1[:, :, 0] = im[1 + 0 ] / np.max(im[1])
        ax[0].imshow(image1)
        image1[:, :, 1] = im[0 + 12] / np.max(im[0 + 13])
        image1[:, :, 0] = im[1 + 12] / np.max(im[1 + 13])
        ax[1].imshow(image2)
        image1[:, :, 1] = im[0 + 26] / np.max(im[0+28])
        image1[:, :, 0] = im[1 + 26] / np.max(im[1+28])
        ax[2].imshow(image3)
        return fig

    def Figure6(self):
        im = tifffile.imread('data/analysis/Fig5exampleMileStone1_Part2_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1,7)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.full((10, 10), np.nan)
        for i in range(7):
            print('RED{0}'.format(np.max(im[0 + 2*i])))
            print('GREEN{0}'.format(np.max(im[1 + 2*i])))
            image[:, :, 1] = im[0 + 2*i]/2154
            image[:, :, 0] = im[1 + 2*i]/5633
            ax[i].imshow(image)
        return fig

    def Figure7(self):
        sharpestZ={'value': [159221726.0, 123378990.0, 156571842.0, 158382154.0, 156608564.0, 156119638.0, 156150498.0, 160521612.0, 99541276.0, 157903474.0, 157142328.0, 162481372.0, 156482852.0, 160083802.0, 165124666.0, 158706228.0, 157666890.0, 161954436.0, 160539908.0, 159946400.0, 159106858.0, 158351620.0, 157287134.0, 159860240.0, 161293384.0, 159694316.0, 156915744.0, 157152774.0, 161236832.0, 159353304.0, 157556010.0, 161098308.0, 157124152.0, 158347908.0, 158933286.0, 164637144.0, 162065928.0, 161042720.0, 158592500.0, 158825262.0, 164070148.0, 156609558.0, 158616262.0, 163113510.0, 163282326.0, 158200432.0, 161709390.0, 157448522.0, 160125620.0, 158372246.0, 162847244.0, 156679462.0, 170165644.0, 158527346.0], 'index': [[0, 0, 2], [0, 512, -4], [0, 1024, 8], [0, 1536, 4], [0, 2560, -4], [512, 0, 8], [512, 512, -12], [512, 1024, -2], [512, 1536, 2], [512, 2560, 6], [512, 3072, -10], [512, 4608, -2], [1024, 512, -2], [1024, 2048, -6], [1024, 2560, -4], [1024, 3072, 8], [1024, 3584, -4], [1024, 4608, -2], [1536, 1536, -2], [1536, 2048, 0], [1536, 2560, -2], [1536, 3072, -4], [1536, 3584, 0], [1536, 4608, -4], [2048, 0, 0], [2048, 512, -2], [2048, 1024, 6], [2048, 1536, 2], [2560, 1024, 0], [2560, 1536, 0], [2560, 3584, 6], [2560, 4608, 2], [3072, 512, 6], [3072, 1024, -6], [3072, 1536, 0], [3072, 2048, 2], [3072, 2560, -4], [3072, 3584, 0], [3072, 4608, 4], [3584, 1024, -2], [3584, 2048, 2], [3584, 2560, -2], [3584, 3584, 8], [3584, 4096, -8], [3584, 4608, -4], [4096, 2048, -2], [4096, 2560, 0], [4096, 3072, -4], [4096, 3584, 0], [4096, 4096, 0], [4608, 2560, 0], [4608, 3072, 12], [4608, 4096, 0], [4608, 4608, -2]]}

        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.full([10,10],np.nan)
        for i in range(len(sharpestZ['index'])):
            print(sharpestZ['index'][i])
            xPosition=round(sharpestZ['index'][i][0]/512)
            yPosition = round(sharpestZ['index'][i][1] / 512)
            print([xPosition,yPosition])
            image[xPosition,yPosition]=sharpestZ['index'][i][2]
        m = np.ma.masked_where(np.isnan(image),image)
        im = ax.imshow(m)
        plt.colorbar(im)
        return fig
    def Figure8(self):
        im = tifffile.imread('data/analysis/Fig8exampleMileStone1_Part1_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1,1)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.zeros([512*10,512*10,3])
        xInd=0
        ind=0
        for i in range(10):
            yInd = 0
            for j in range(10):
                image[xInd:(xInd+512),yInd:(yInd+512), 1] = im[ind].astype('float')
                ind=ind+1
                yInd=yInd+512
            xInd=xInd+512
        ax.imshow(image/np.max(image))
        return fig

    def Figure9(self):
        sharpestZ={'value': [159221726.0, 123378990.0, 156571842.0, 158382154.0, 156608564.0, 156119638.0, 156150498.0, 160521612.0, 99541276.0, 157903474.0, 157142328.0, 162481372.0, 156482852.0, 160083802.0, 165124666.0, 158706228.0, 157666890.0, 161954436.0, 160539908.0, 159946400.0, 159106858.0, 158351620.0, 157287134.0, 159860240.0, 161293384.0, 159694316.0, 156915744.0, 157152774.0, 161236832.0, 159353304.0, 157556010.0, 161098308.0, 157124152.0, 158347908.0, 158933286.0, 164637144.0, 162065928.0, 161042720.0, 158592500.0, 158825262.0, 164070148.0, 156609558.0, 158616262.0, 163113510.0, 163282326.0, 158200432.0, 161709390.0, 157448522.0, 160125620.0, 158372246.0, 162847244.0, 156679462.0, 170165644.0, 158527346.0], 'index': [[0, 0, 2], [0, 512, -4], [0, 1024, 8], [0, 1536, 4], [0, 2560, -4], [512, 0, 8], [512, 512, -12], [512, 1024, -2], [512, 1536, 2], [512, 2560, 6], [512, 3072, -10], [512, 4608, -2], [1024, 512, -2], [1024, 2048, -6], [1024, 2560, -4], [1024, 3072, 8], [1024, 3584, -4], [1024, 4608, -2], [1536, 1536, -2], [1536, 2048, 0], [1536, 2560, -2], [1536, 3072, -4], [1536, 3584, 0], [1536, 4608, -4], [2048, 0, 0], [2048, 512, -2], [2048, 1024, 6], [2048, 1536, 2], [2560, 1024, 0], [2560, 1536, 0], [2560, 3584, 6], [2560, 4608, 2], [3072, 512, 6], [3072, 1024, -6], [3072, 1536, 0], [3072, 2048, 2], [3072, 2560, -4], [3072, 3584, 0], [3072, 4608, 4], [3584, 1024, -2], [3584, 2048, 2], [3584, 2560, -2], [3584, 3584, 8], [3584, 4096, -8], [3584, 4608, -4], [4096, 2048, -2], [4096, 2560, 0], [4096, 3072, -4], [4096, 3584, 0], [4096, 4096, 0], [4608, 2560, 0], [4608, 3072, 12], [4608, 4096, 0], [4608, 4608, -2]]}
        sharpestZ = {
            'value': [159221726.0, 123378990.0, 156571842.0, 158382154.0, 156608564.0, 156119638.0, 156150498.0,
                      160521612.0, 99541276.0, 157903474.0, 157142328.0, 162481372.0, 156482852.0, 160083802.0,
                      165124666.0, 158706228.0, 157666890.0, 161954436.0, 160539908.0, 159946400.0, 159106858.0,
                      158351620.0, 157287134.0, 159860240.0, 161293384.0, 159694316.0, 156915744.0, 157152774.0,
                      161236832.0, 159353304.0, 157556010.0, 161098308.0, 157124152.0, 158347908.0, 158933286.0,
                      164637144.0, 162065928.0, 161042720.0, 158592500.0, 158825262.0, 164070148.0, 156609558.0,
                      158616262.0, 163113510.0, 163282326.0, 158200432.0, 161709390.0, 157448522.0, 160125620.0,
                      158372246.0, 162847244.0, 156679462.0, 170165644.0, 158527346.0],
            'index': [[0, 0, 2], [0, 512, -4], [0, 1024, 8], [0, 1536, 4], [0, 2560, -4], [512, 0, 8], [512, 512, -12],
                      [512, 1024, -2], [512, 1536, 2], [512, 2560, 6], [512, 3072, -10], [512, 4608, -2],
                      [1024, 512, -2], [1024, 2048, -6], [1024, 2560, -4], [1024, 3072, 8], [1024, 3584, -4],
                      [1024, 4608, -2], [1536, 1536, -2], [1536, 2048, 0], [1536, 2560, -2], [1536, 3072, -4],
                      [1536, 3584, 0], [1536, 4608, -4], [2048, 0, 0], [2048, 512, -2], [2048, 1024, 6],
                      [2048, 1536, 2], [2560, 1024, 0], [2560, 1536, 0], [2560, 3584, 6], [2560, 4608, 2],
                      [3072, 512, 6], [3072, 1024, -6], [3072, 1536, 0], [3072, 2048, 2], [3072, 2560, -4],
                      [3072, 3584, 0], [3072, 4608, 4], [3584, 1024, -2], [3584, 2048, 2], [3584, 2560, -2],
                      [3584, 3584, 8], [3584, 4096, -8], [3584, 4608, -4], [4096, 2048, -2], [4096, 2560, 0],
                      [4096, 3072, -4], [4096, 3584, 0], [4096, 4096, 0], [4608, 2560, 0], [4608, 3072, 12],
                      [4608, 4096, 0], [4608, 4608, -2]]}
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.full([10, 10], np.nan)
        estimator=ZPlaneEstimator()
        estimator.alpha=[-0.16773458,  0.00041635, -0.00040455]
        for i in range(len(sharpestZ['index'])):
            print(sharpestZ['index'][i])
            xPosition = round(sharpestZ['index'][i][0] / 512)
            yPosition = round(sharpestZ['index'][i][1] / 512)
            print([xPosition, yPosition])
            image[xPosition, yPosition] = estimator.calculateZFromPoint(sharpestZ['index'][i][0],sharpestZ['index'][i][1])
        m = np.ma.masked_where(np.isnan(image), image)
        im = ax.imshow(m,clim=(-12,12))
        plt.colorbar(im)

        return fig
    def Figure10(self):
        im = tifffile.imread('data/analysis/Fig10exampleMileStone1_Part2_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(4,4)
        fig.set_figwidth = 30
        fig.set_figheight = 15
        indx=0
        indy=0
        for i in range(0,32,2):
            image = np.zeros([512, 512, 3]).astype('float')
            image[:, :, 1] = im[i] / np.max(im[i])
            image[:, :, 0] = im[i+1] / np.max(im[i+1])
            ax[indx][indy].imshow(image)
            indx=indx+1
            if indx==4:
                indx=0
                indy=indy+1
        return fig

    def Figure11(self):
        emulator=ImageEmulator2Channel()
        image_folder = pathlib.Path(path.join('data', 'core', 'cell_library'))
        emulator.loadImageFilePath(image_folder)
        emulator.simulatePositions([1024,1024],15)
        emulator.setXYImageSize([512,512])
        fig, ax = plt.subplots(4, 4)
        fig.set_figwidth = 30
        fig.set_figheight = 15
        indx = 0
        indy = 0
        zRange=[-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7]
        im=[None,None]
        for i in range(len(zRange)):
            image = np.zeros([512, 512, 3]).astype('float')
            position=[0,0,zRange[i]]
            im[0] = emulator.generate(position,channelIndex=0)
            im[1] = emulator.generate(position, channelIndex=1)
            image[:, :, 1] = im[0] / np.max(im[0])
            image[:, :, 0] = im[1] / np.max(im[1])
            ax[indx][indy].imshow(image)
            indx = indx + 1
            if indx == 4:
                indx = 0
                indy = indy + 1
        return fig
    def Figure13(self):
        im = tifffile.imread('data/analysis/Fig13exampleMileStone1_Part2_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(6,6)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.zeros([512 * 4, 512 * 4, 3])
        xInd = 0
        ind = 7
        for i in range(4):
            yInd = 0
            for j in range(4):
                image[xInd:(xInd + 512), yInd:(yInd + 512), 1] = im[ind].astype('float')/np.max(im[ind])
                image[xInd:(xInd + 512), yInd:(yInd + 512), 0] = im[ind].astype('float') / np.max(im[ind+1])

                ind = ind + 2
                yInd = yInd + 512
            xInd = xInd + 512
        return fig

    def Figure14(self):
        im = tifffile.imread('data/analysis/Fig14exampleMileStone1_Part3_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(4,4)
        fig.set_figwidth = 30
        fig.set_figheight = 15
        indx=0
        indy=0
        for i in range(0,32,2):
            image = np.zeros([512, 512, 3]).astype('float')
            image[:, :, 1] = im[i] / np.max(im[i])
            image[:, :, 0] = im[i+1] / np.max(im[i+1])
            ax[indx][indy].imshow(image)
            indx=indx+1
            if indx==4:
                indx=0
                indy=indy+1
        return fig

    def Figure15(self):
        im = tifffile.imread('data/analysis/exampleMileStone1_Part1_NDTiffStack11x11.tif')
        print(im.shape)
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.zeros([512 * 11, 512 * 11, 3])
        xInd = 0
        ind = 0
        for i in range(11):
            yInd = 0
            for j in range(11):
                image[xInd:(xInd + 512), yInd:(yInd + 512), 1] = im[ind].astype('float')
                ind = ind + 1
                yInd = yInd + 512
            xInd = xInd + 512
        ax.imshow(image / np.max(image))
        return fig

    def Figure16(self):
        im = tifffile.imread('data/analysis/exampleMileStone1_Part1_NDTiffStack3x3.tif')
        print(im.shape)
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.zeros([512 * 3, 512 * 3, 3])
        xInd = 0
        ind = 0
        for i in range(3):
            yInd = 0
            for j in range(3):
                image[xInd:(xInd + 512), yInd:(yInd + 512), 1] = im[ind].astype('float')
                ind = ind + 1
                yInd = yInd + 512
            xInd = xInd + 512
        ax.imshow(image / np.max(image))
        return fig

    def Figure17(self):
        im = tifffile.imread('data/analysis/exampleMileStone1_Part2_NDTiffStack3x3.tif')
        print(im.shape)
        fig, ax = plt.subplots(3,3)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.zeros([512 * 3, 512 * 11, 3])
        xInd = 0
        ind = 7
        for i in range(3):
            yInd = 0
            for j in range(3):
                image[xInd:(xInd + 512), yInd:(yInd + 512), 1] = im[ind].astype('float')/np.max(im[ind])
                image[xInd:(xInd + 512), yInd:(yInd + 512), 0] = im[ind].astype('float') / np.max(im[ind+1])

                ind = ind + 2
                yInd = yInd + 512
            xInd = xInd + 512
        return fig

    def Figure18(self):
        im = tifffile.imread('data/analysis/APD_9x9/exampleMileStone1_Part1_9x9/exampleMileStone1_Part1.NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.zeros([512 * 8, 512 * 8, 3])
        xInd = 0
        ind = 0
        for i in range(8):
            yInd = 0
            for j in range(8):
                image[xInd:(xInd + 512), yInd:(yInd + 512), 1] = im[0,ind,:,:].astype('float')
                ind = ind + 1
                yInd = yInd + 512
            xInd = xInd + 512
        ax.imshow(image / np.max(image))
        return fig

    def Figure19(self):
        im = tifffile.imread('data/analysis/FarZTest/FarZTest_MMStack_Pos0.ome.tif')
        fig, ax = plt.subplots(2, 1)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        for i in range(2):
            image = np.zeros([512, 512, 3])
            image[:,:, 1] = im[i, :, :].astype('float')
            ax[i].imshow(image / np.max(image))
        return fig

    def Figure20(self):
        sharpestZ= {
            'value': [1024015816.0, 1072543358.0, 921931134.0, 1003374720.0, 960001166.0, 961761736.0, 1005142140.0,
                      1003728390.0, 1006789778.0, 1032358316.0, 1094089842.0, 1124468384.0, 1127136002.0, 1143799534.0,
                      978638366.0, 1133020840.0, 1167636422.0, 1075065450.0, 1063984528.0, 1066052182.0, 1119339638.0,
                      1098837342.0, 1094250286.0, 1099271500.0, 1109806094.0, 1166722774.0, 937956802.0, 938102392.0,
                      1074802782.0, 1034456204.0, 1135161256.0, 1133878678.0, 1133545818.0, 1138753256.0, 1139037438.0,
                      1136408964.0, 982894166.0, 985339428.0, 990289984.0, 974288406.0, 972885534.0, 984358114.0,
                      1055153286.0, 1048871378.0, 1050365316.0],
            'index': [[256.0, 444.928, 0.0], [256.0, 507.904, 0.0], [318.976, 381.952, 7.0], [318.976, 444.928, 4.0],
                      [381.952, 256.0, 4.0], [381.952, 256.0, 3.0], [381.952, 381.952, -2.0], [381.952, 381.952, 4.0],
                      [381.952, 381.952, 5.0], [381.952, 696.832, 0.0], [507.904, 256.0, 3.0], [507.904, 318.976, 0.0],
                      [507.904, 318.976, 0.0], [507.904, 318.976, 1.0], [507.904, 696.832, 4.0], [570.88, 256.0, 0.0],
                      [570.88, 318.976, 0.0], [570.88, 444.928, 7.0], [570.88, 444.928, 6.0], [570.88, 444.928, 6.0],
                      [570.88, 507.904, 0.0], [570.88, 633.856, 0.0], [570.88, 633.856, 0.0], [570.88, 633.856, 0.0],
                      [633.856, 318.976, 1.0], [633.856, 381.952, 2.0], [633.856, 507.904, 5.0],
                      [633.856, 507.904, 7.0], [633.856, 570.88, 0.0], [633.856, 633.856, 0.0], [696.832, 318.976, 0.0],
                      [696.832, 318.976, 3.0], [696.832, 318.976, 2.0], [696.832, 444.928, 0.0],
                      [696.832, 444.928, 0.0], [696.832, 444.928, 0.0], [696.832, 570.88, 5.0], [696.832, 570.88, 6.0],
                      [696.832, 570.88, -1.0], [696.832, 633.856, 3.0], [696.832, 633.856, 6.0],
                      [696.832, 633.856, 7.0], [696.832, 696.832, 6.0], [696.832, 696.832, 3.0],
                      [696.832, 696.832, 4.0]]}
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.full([8, 8], np.nan)
        estimator=ZPlaneEstimator()
        estimator.alpha=[0.83133771, 0.00084171, 0.00245434]
        for i in range(len(sharpestZ['index'])):
            print(sharpestZ['index'][i])
            xPosition = round((sharpestZ['index'][i][0]-256) / 62.976)
            yPosition = round((sharpestZ['index'][i][1]-256) / 62.976)
            print([xPosition, yPosition])
            image[xPosition, yPosition] = estimator.calculateZFromPoint(sharpestZ['index'][i][0],sharpestZ['index'][i][1])
        m = np.ma.masked_where(np.isnan(image), image)
        im = ax.imshow(m,clim=(-12,12))
        plt.colorbar(im)
        return fig

    def Figure21(self):
        sharpestZ = {
                'value': [1024015816.0, 1072543358.0, 921931134.0, 1003374720.0, 960001166.0, 961761736.0, 1005142140.0,
                          1003728390.0, 1006789778.0, 1032358316.0, 1094089842.0, 1124468384.0, 1127136002.0,
                          1143799534.0,
                          978638366.0, 1133020840.0, 1167636422.0, 1075065450.0, 1063984528.0, 1066052182.0,
                          1119339638.0,
                          1098837342.0, 1094250286.0, 1099271500.0, 1109806094.0, 1166722774.0, 937956802.0,
                          938102392.0,
                          1074802782.0, 1034456204.0, 1135161256.0, 1133878678.0, 1133545818.0, 1138753256.0,
                          1139037438.0,
                          1136408964.0, 982894166.0, 985339428.0, 990289984.0, 974288406.0, 972885534.0, 984358114.0,
                          1055153286.0, 1048871378.0, 1050365316.0],
                'index': [[256.0, 444.928, 0.0], [256.0, 507.904, 0.0], [318.976, 381.952, 7.0],
                          [318.976, 444.928, 4.0],
                          [381.952, 256.0, 4.0], [381.952, 256.0, 3.0], [381.952, 381.952, -2.0],
                          [381.952, 381.952, 4.0],
                          [381.952, 381.952, 5.0], [381.952, 696.832, 0.0], [507.904, 256.0, 3.0],
                          [507.904, 318.976, 0.0],
                          [507.904, 318.976, 0.0], [507.904, 318.976, 1.0], [507.904, 696.832, 4.0],
                          [570.88, 256.0, 0.0],
                          [570.88, 318.976, 0.0], [570.88, 444.928, 7.0], [570.88, 444.928, 6.0],
                          [570.88, 444.928, 6.0],
                          [570.88, 507.904, 0.0], [570.88, 633.856, 0.0], [570.88, 633.856, 0.0],
                          [570.88, 633.856, 0.0],
                          [633.856, 318.976, 1.0], [633.856, 381.952, 2.0], [633.856, 507.904, 5.0],
                          [633.856, 507.904, 7.0], [633.856, 570.88, 0.0], [633.856, 633.856, 0.0],
                          [696.832, 318.976, 0.0],
                          [696.832, 318.976, 3.0], [696.832, 318.976, 2.0], [696.832, 444.928, 0.0],
                          [696.832, 444.928, 0.0], [696.832, 444.928, 0.0], [696.832, 570.88, 5.0],
                          [696.832, 570.88, 6.0],
                          [696.832, 570.88, -1.0], [696.832, 633.856, 3.0], [696.832, 633.856, 6.0],
                          [696.832, 633.856, 7.0], [696.832, 696.832, 6.0], [696.832, 696.832, 3.0],
                          [696.832, 696.832, 4.0]]}

        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.full([9,9], np.nan)
        for i in range(len(sharpestZ['index'])):
            print(sharpestZ['index'][i])
            xPosition = round((sharpestZ['index'][i][0]-256) / 62.976)
            yPosition = round((sharpestZ['index'][i][1]-256) / 62.976)
            print([xPosition, yPosition])
            image[xPosition, yPosition] = sharpestZ['index'][i][2]
        m = np.ma.masked_where(np.isnan(image), image)
        im = ax.imshow(m)
        plt.colorbar(im)
        return fig

    def Figure22(self):
        sequence= [[256.0, 444.928], [256.0, 507.904], [318.976, 381.952], [318.976, 444.928], [381.952, 256.0],
                   [381.952, 256.0], [381.952, 381.952], [381.952, 381.952], [381.952, 381.952], [381.952, 696.832],
                   [507.904, 256.0], [507.904, 318.976], [507.904, 318.976], [507.904, 318.976], [507.904, 696.832],
                   [570.88, 256.0], [570.88, 318.976], [570.88, 444.928], [570.88, 444.928], [570.88, 444.928],
                   [570.88, 507.904], [570.88, 633.856], [570.88, 633.856], [570.88, 633.856], [633.856, 318.976],
                   [633.856, 381.952], [633.856, 507.904], [633.856, 507.904], [633.856, 570.88], [633.856, 633.856],
                   [696.832, 318.976], [696.832, 318.976], [696.832, 318.976], [696.832, 444.928], [696.832, 444.928],
                   [696.832, 444.928], [696.832, 570.88], [696.832, 570.88], [696.832, 570.88], [696.832, 633.856],
                   [696.832, 633.856], [696.832, 633.856], [696.832, 696.832], [696.832, 696.832], [696.832, 696.832]]
        maximizingSequence=[[381.952, 256.0], [696.832, 696.832], [256.0, 444.928], [696.832, 696.832], [381.952, 256.0], [696.832, 696.832], [256.0, 507.904], [696.832, 318.976], [696.832, 318.976], [381.952, 696.832], [696.832, 318.976], [318.976, 381.952], [696.832, 633.856], [696.832, 633.856], [507.904, 256.0]]



        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.full([9, 9], np.nan)
        for i in range(len(sequence)):
            print(sequence[i])
            xPosition = round((sequence[i][0] -256)/ 62.976)
            yPosition = round((sequence[i][1] -256)/ 62.976)
            print([xPosition, yPosition])
            image[xPosition, yPosition] = 1
        m = np.ma.masked_where(np.isnan(image), image)
        xPositions=[]
        yPositions=[]
        for i in range(len(maximizingSequence)):
            print(maximizingSequence[i])
            xPositions.append(round((maximizingSequence[i][0] -256)/ 62.976))
            yPositions.append(round((maximizingSequence[i][1] -256)/ 62.976))
        im = ax.imshow(m)
        plt.colorbar(im)
        plt.scatter(yPositions,xPositions,c=[1,0,0],marker=(5, 1))
        return fig

    def Figure23(self):
        im = tifffile.imread(
            'data/analysis/TestBackFourthLoose/TestBackFourthLoose_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1, 3)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        ind=0
        for i in [0,2,4]:
            image = np.zeros([512, 512, 3])
            image[:,:,1]=im[i]/ np.max(im[i])
            ax[ind].imshow(image / np.max(image))
            ind=ind+1
        return fig

    def Figure24(self):
        im = tifffile.imread(
            'data/analysis/TestBackFourthLoosest/TestBackFourthLoosest_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1, 3)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        ind = 0
        for i in [0, 2, 4]:
            image = np.zeros([512, 512, 3])
            image[:, :, 1] = im[i] / np.max(im[i])
            ax[ind].imshow(image / np.max(image))
            ind = ind + 1
        return fig

    def Figure25(self):
        im = tifffile.imread(
            'data/analysis/TestBackFourthTight/TestBackFourthTight_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1, 3)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        ind = 0
        for i in [0, 2, 4]:
            image = np.zeros([512, 512, 3])
            image[:, :, 1] = im[i] / np.max(im[i])
            ax[ind].imshow(image / np.max(image))
            ind = ind + 1
        return fig

    def Figure26(self):
        im = tifffile.imread(
            'data/analysis/TestBackFourthTight/TestBackFourthTight_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1, 2)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        ind = 0
        for i in [2, 4]:
            image = np.zeros([512, 512, 3]).astype('float')
            img = np.abs(im[0].astype('float') - im[i].astype('float'))
            image[:, :, 1] = img
            print(np.max(img))
            print(np.max(img) / np.mean(img))
            view = ax[ind].imshow(image / np.max(image))
            ind = ind + 1
        return fig

    def Figure27(self):
        im = tifffile.imread(
            'data/analysis/TestBackFourthLoose/TestBackFourthLoose_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1, 2)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        ind = 0
        for i in [2, 4]:
            image = np.zeros([512, 512, 3]).astype('float')
            img = np.abs(im[0].astype('float') - im[i].astype('float'))
            image[:, :, 1] = img
            print(np.max(img))
            print(np.max(img) / np.mean(img))
            view = ax[ind].imshow(image / np.max(image))
            ind = ind + 1
        return fig

    def Figure28(self):
        im = tifffile.imread(
            'data/analysis/TestBackFourthLoosest/TestBackFourthLoosest_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1, 2)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        ind = 0
        for i in [2,4]:
            image = np.zeros([512, 512, 3]).astype('float')
            img=np.abs(im[0].astype('float')-im[i].astype('float'))
            image[:, :, 1] =  img
            print(np.max(img))
            print(np.max(img) / np.mean(img))
            view=ax[ind].imshow(image/np.max(image))
            ind = ind + 1
        return fig

    def Figure29(self):
        alpha_true=[-1., .001, -.002]
        alpha_estimations=[[-3.72936734e-16,  9.76562500e-03, -1.95312500e-03],
                           [ 7.25194643e-16, -1.95312500e-03,  1.95312500e-03],
                           [-1.25,        0.01074219, -0.00878906],
                           [0.5,        0.00390625, 0.00195313],
                           [-3.81468271e-06, -1.95311755e-03, -1.53329049e-19],
                           [-2.7500000e+00,  4.8828125e-03,  9.7656250e-04],
                           [-3.5,         0.0078125,   0.00390625],
                           [ 3.,          0.0078125,  -0.01367187],
                           [-2.,          0.00585938, -0.00390625],
                           [-1.750000e+00,  9.765625e-04,  9.765625e-04],
                           [-2.,          0.00585937,  0.0078125 ],
                           [-6.,          0.01171875,  0.0078125 ],
                           [-5.000000e+00,  1.953125e-03,  3.906250e-03],
                           [-5.0000000e+00,  1.7578125e-02, -3.9062500e-03],
                           [ 3.2500000e+00, -8.7890625e-03, -2.9296875e-03],
                           [-4.04464835e-16, -3.90625000e-03,  5.85937500e-03],
                           [-4.0000000e+00,  1.3671875e-02, -1.9531250e-03],
                           [ 3.2500000e+00, -6.8359375e-03,  9.7656250e-04],
                           [ 0.25,        0.00488281, -0.00097656],
                           [ 1.55429968e-15, -5.20417043e-18, -7.81250000e-03],
                           [ 2.500000e+00 ,-3.906250e-03, -1.953125e-03],
                           [-5.000000e+00,  9.765625e-03, 3.906250e-03],
                           [-4.24338354e-16,  5.85937500e-03, -1.95312500e-03],
                           [-5.00000000e-01,  1.95312500e-03, -2.16840434e-19],
                           [ 2.,          0.00976562, -0.00976562],
                           [-0.5,        -0.00195312,  0.00585938],
                           [-1.00000000e+00,  1.95312500e-03,  2.16840434e-19],
                           [-1.25,        0.01464844, -0.00488281],
                           [1.50000000e+00, 2.16840434e-19, 2.16840434e-19],
                           [ 7.,         -0.0078125,  -0.00976562],
                           [ 2.5,         0.00390625, -0.00976563],
                           [ 4.00000000e+00,  8.67361738e-19, -5.85937500e-03],
                           [ 1.2500000e+00,  9.7656250e-04, -2.9296875e-03],
                           [-4.000000e+00, -1.953125e-03,  5.859375e-03],
                           [-1.5,        -0.00585937,  0.        ],
                           [1.00000000e+00, 1.95312500e-03, 4.33680869e-19],
                           [ 5.000000e+00, -1.953125e-03, -1.953125e-03]]
        alpha_estimations=np.array(alpha_estimations)
        fig, ax = plt.subplots(1, 3)
        fig.set_figwidth = 30
        fig.set_figheight = 7
        ax[0].hist(alpha_estimations[:, 0],bins=10)
        ax[0].plot([alpha_true[0],alpha_true[0]],[0,7])
        ax[1].hist(alpha_estimations[:, 1],bins=10)
        ax[1].plot([alpha_true[1], alpha_true[1]], [0, 7])
        ax[2].hist(alpha_estimations[:, 2],bins=10)
        ax[2].plot([alpha_true[2], alpha_true[2]], [0, 7])
        return fig

    def Figure30(self):
        im = tifffile.imread('figdata/findTranscriptionSitesInGrid1_1/findTranscriptionSitesInGrid1_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        image = np.zeros([512 * 2, 512 * 2, 3])
        xInd = 0
        ind = 0
        for i in range(2):
            yInd = 0
            for j in range(2):
                image[xInd:(xInd + 512), yInd:(yInd + 512), 1] = im[ind,:,:].astype('float')
                ind = ind + 1
                yInd = yInd + 512
            xInd = xInd + 512
        ax.imshow(image / np.max(image))
        return fig

    def Figure31(self):
        im = tifffile.imread(
            'figdata/findTranscriptionSitesInGrid2_2/findTranscriptionSitesInGrid2_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(8,8)
        fig.set_figwidth = 15
        fig.set_figheight = 15
        ind = 0
        for i in range(8):
            for j in range(8):
                image = np.zeros([512, 512, 3])
                image[:, :, 1] = im[0,ind,1,:,:] / np.max(im[0,ind,1,:,:])
                ax[i,j].imshow(image / np.max(image))
                ax[i,j].set(xticklabels=())
                ax[i, j].set(yticklabels=())
                ind = ind + 1
        return fig

    def Figure32(self):
        im = tifffile.imread(
            'data/analysis/4by4/exampleMileStone1_Part1.NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(4,4)
        index=0
        for i in range(4):
            for j in range(4):
                image = np.zeros([512, 512, 3])
                roi=im[index,:,:]
                roi=(roi-np.min(roi))/np.max(roi)
                image[:, :, 1] = roi
                ax[i,j].imshow(image/np.max(image))
                ax[i, j].set(xticklabels=())
                ax[i, j].set(yticklabels=())
                index=index+1
        return fig

    def Figure33(self):
        im = tifffile.imread('/Users/mpmay/Projects/PythonAutomation/data/analysis/4by4/Part3again.tif')
        print(im.shape)
        fig, ax = plt.subplots(1,3)
        image = np.zeros([512, 512, 3])
        groi=np.zeros([512,512])
        for i in range(60,98,2):
                groi=groi+im[i,:,:]
        groi=(groi-np.min(groi))
        groi=groi/np.max(groi)
        image[:, :, 1] = groi/2

        rroi = np.zeros([512, 512])
        for i in range(61, 99, 2):
            rroi = rroi + im[i, :, :]
        rroi = (rroi - np.min(rroi))
        rroi=rroi/np.max(rroi)
        print(rroi)
        image[:, :, 0] = rroi

        ax[0].imshow(image)
        ax[0].set(xticklabels=())
        ax[0].set(yticklabels=())


        image[:,:,0]=np.array(im[60+15])/np.max(im[60+15])
        image[:, :, 1] = np.array(im[61 + 15])/np.max(im[61+15])
        image[:, :, 1]=image[:,:,1]/2
        detector=SpotCountLocationsDoughnut()
        positions=detector.process(im[60 + 15],sig=[3,8])
        points=np.array(positions[0]['positions'][0:5])
        detector=CellDetectorCellMask(model_type='nuclei')
        mask=detector.process(image[:,:,1])
        for i in range(512):
            for j in range(512):
                if mask[i][j]==0:
                    mask[i][j]=np.nan
        cmap = plt.cm.get_cmap()
        cmap.set_bad('white', 1.)
        ax[1].imshow(mask,cmap=cmap)
        ax[1].set(xticklabels=())
        ax[1].set(yticklabels=())
        cmap=plt.cm.get_cmap()
        cmap.set_bad('white',1.)
        ax[2].imshow(image)
        ax[2].set(xticklabels=())
        ax[2].set(yticklabels=())
        print(len(points))
        ax[2].scatter(points[:,1],points[:,0],s=20,facecolors='none',edgecolors='w',alpha=.5)

        return fig
    def Figure34(self):
        data=[[9,6,8,10,7,7,7,5,6,9],[14,15,18,17,17,17,14,17,16,16],[24,23,23,27,25,28,27,27,23,28],[40,36,32,41,30,34,29,32,39,36],[37,39,43,42,48,39,44,45,40,38]]
        points=[]
        for i in range(len(data)):
            for j in range(len(data[i])):
                points.append([(i+1)*10,data[i][j]])
        points=np.array(points)
        fig,ax=plt.subplots(1,1)
        ax.scatter(points[:,0],points[:,1])
        slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(points[:,0], points[:,1])
        print(r_value**2)
        xRange=np.linspace(0,50)
        ax.plot(xRange,slope*xRange+intercept)
        return fig

    def Figure35(self):
        im = tifffile.imread('data/users/default/acquisition/exampleMileStone1_Part1_4/exampleMileStone1_Part1_NDTiffStack.tif')
        print(im.shape)
        fig,ax=plt.subplots(1,1)
        thresholds=np.linspace(-10,10,5)
        compute=DistributedComputeDaskTask('129.19.46.78:8786')
        tasks=[]
        for t in thresholds:
            detector=CellDetectorCellMask(cellprob_threshold=t,model_type='nuclei')
            for i in range(64):
                task=Task(detector.process,im[i,:,:])
                tasks.append(task)
        output=compute.run(tasks)
        ind=0
        totalCellsFoundInEachROIandTHreshold=[]
        for t in thresholds:
            totalCellsFoundInEachROI=[]
            for i in range(64):
                totalCellsFoundInEachROI.append(np.max(output[ind]))#np.max will return the number of cells found in each roi
                ind=ind+1
            totalCellsFoundInEachROIandTHreshold.append(totalCellsFoundInEachROI)
            legendLabels=[]
        for i in range(len(thresholds)):
            ax.hist(totalCellsFoundInEachROIandTHreshold[i],bins=range(-1,10,1),alpha=0.5,lw=3,label="probability threshold = {0}".format(thresholds[i]))
            legendLabels.append("probability threshold = {0}".format(thresholds[i]))
        ax.legend(legendLabels)
        return fig
    def Figure36(self):
        DetectedNumCellsInROI = [0, 1, 3, 5, 0, 1, 1, 0, 0, 2, 8, 3, 0, 2, 9, 7, 0, 0, 3, 4, 0, 3, 3, 1, 0, 0, 9, 0, 2, 0, 0,
                            1, 1, 2, 2, 6, 0, 0, 3, 2, 0, 2, 4, 0, 0, 0, 4, 2, 3, 0, 6, 4, 0, 0, 3, 0, 3, 0, 0, 5, 1, 2,
                            3, 4]
        TrueNumCellsInROI = [0, 1, 2, 5, 1, 1, 3, 0, 0, 1, 8, 3, 2, 3, 7, 7, 0, 0, 2, 5, 1, 2, 5, 1, 0, 1, 6, 2, 2, 2,
                             0, 1, 1, 1, 5, 5, 1, 0, 3, 3, 0, 3, 3, 0, 0, 0, 4, 2, 3, 0, 5, 5, 0, 0, 3, 1, 3, 0, 2, 5,
                             1, 2, 3, 4]
        fig,ax=plt.subplots(1,1)
        #ax.scatter(TrueNumCellsInROI,DetectedNumCellsInROI)
        slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(TrueNumCellsInROI, DetectedNumCellsInROI)
        print(r_value ** 2)
        xRange = np.linspace(-1, 10)
        ax.plot(xRange, slope * xRange + intercept)
        for i in range(len(DetectedNumCellsInROI)):
            DetectedNumCellsInROI[i]=DetectedNumCellsInROI[i]+(np.random.rand() - .5) * .3
            TrueNumCellsInROI[i] = TrueNumCellsInROI[i] + (np.random.rand() - .5) * .3
        ax.scatter(TrueNumCellsInROI, DetectedNumCellsInROI)
        return fig

    def Figure37(self):
        DetectedNumCellsInROI = [0, 1, 3, 5, 0, 1, 1, 0, 0, 2, 8, 3, 0, 2, 9, 7, 0, 0, 3, 4, 0, 3, 3, 1, 0, 0, 9, 0, 2,
                                 0, 0,
                                 1, 1, 2, 2, 6, 0, 0, 3, 2, 0, 2, 4, 0, 0, 0, 4, 2, 3, 0, 6, 4, 0, 0, 3, 0, 3, 0, 0, 5,
                                 1, 2,
                                 3, 4]
        DetectedIndex = [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0],
                         [11, 0], [12, 0], [13, 0], [14, 0], [15, 0], [16, 0], [17, 0], [18, 0], [19, 0], [20, 0],
                         [21, 0], [22, 0], [23, 0], [24, 0], [25, 0], [26, 0], [27, 0], [28, 0], [29, 0], [30, 0],
                         [31, 0], [32, 0], [33, 0], [34, 0], [35, 0], [36, 0], [37, 0], [38, 0], [39, 0], [40, 0],
                         [41, 0], [42, 0], [43, 0], [44, 0], [45, 0], [46, 0], [47, 0], [48, 0], [49, 0], [50, 0],
                         [51, 0], [52, 0], [53, 0], [54, 0], [55, 0], [56, 0], [57, 0], [58, 0], [59, 0], [60, 0],
                         [61, 0], [62, 0], [63, 0]]
        TrueNumCellsInROI = [0, 1, 2, 5, 1, 1, 3, 0, 0, 1, 8, 3, 2, 3, 7, 7, 0, 0, 2, 5, 1, 2, 5, 1, 0, 1, 6, 2, 2, 2,
                             0, 1, 1, 1, 5, 5, 1, 0, 3, 3, 0, 3, 3, 0, 0, 0, 4, 2, 3, 0, 5, 5, 0, 0, 3, 1, 3, 0, 2, 5,
                             1, 2, 3, 4]
        print(len(TrueNumCellsInROI))
        sortedDetectedIndeces=np.argsort(DetectedNumCellsInROI)
        sortedTrueIndeces = np.argsort(TrueNumCellsInROI)
        print(sorted(TrueNumCellsInROI))
        SelectedDetectedROI=sortedDetectedIndeces[-23:] #ppick Roi with at least 3 or more
        SelectedTrueROI = sortedTrueIndeces[-25:]
        print(len(SelectedTrueROI))
        print(sorted(SelectedTrueROI))
        print(sorted(SelectedDetectedROI))
        fig, ax = plt.subplots(8,8)
        im=tifffile.imread('data/analysis/FindCells9x9/exampleMileStone1_Part1_NDTiffStack.tif')
        ind=0
        for i in range(8):
            for j in range(8):
                image=np.zeros([512,512,3])
                image[:,:,1]=im[ind,:,:]
                image[:, :, 1]=image[:,:,1]/np.max(image[:,:,1])
                ax[i,j].imshow(image)
                ax[i, j].set(xticklabels=())
                ax[i, j].set(yticklabels=())
                ind=ind+1
        return fig

    def Figure38(self):
        DetectedNumCellsInROI = [0, 1, 3, 5, 0, 1, 1, 0, 0, 2, 8, 3, 0, 2, 9, 7, 0, 0, 3, 4, 0, 3, 3, 1, 0, 0, 9, 0, 2,
                                 0, 0,
                                 1, 1, 2, 2, 6, 0, 0, 3, 2, 0, 2, 4, 0, 0, 0, 4, 2, 3, 0, 6, 4, 0, 0, 3, 0, 3, 0, 0, 5,
                                 1, 2,
                                 3, 4]
        TrueNumCellsInROI = [0, 1, 2, 5, 1, 1, 3, 0, 0, 1, 8, 3, 2, 3, 7, 7, 0, 0, 2, 5, 1, 2, 5, 1, 0, 1, 6, 2, 2, 2,
                             0, 1, 1, 1, 5, 5, 1, 0, 3, 3, 0, 3, 3, 0, 0, 0, 4, 2, 3, 0, 5, 5, 0, 0, 3, 1, 3, 0, 2, 5,
                             1, 2, 3, 4]
        fig,ax=plt.subplots(1,1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives=[]
        setOfFalsePositives=[]
        setOfTrueNegatives=[]
        setOfFalseNegatives=[]
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i]>=3) & (TrueNumCellsInROI[i]>=3):
                setOfTruePositives.append((DetectedNumCellsInROI[i]+(np.random.rand()-.5)*.2,TrueNumCellsInROI[i]+(np.random.rand()-.5)*.2))
            elif (DetectedNumCellsInROI[i]>=3) & (TrueNumCellsInROI[i]<3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i]+(np.random.rand()-.5)*.2,TrueNumCellsInROI[i]+(np.random.rand()-.5)*.2))
            elif (DetectedNumCellsInROI[i]<3) & (TrueNumCellsInROI[i]<3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i]+(np.random.rand()-.5)*.2,TrueNumCellsInROI[i]+(np.random.rand()-.5)*.2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i]+(np.random.rand()-.5)*.2,TrueNumCellsInROI[i]+(np.random.rand()-.5)*.2))
        setOfTruePositives=np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives=np.array(setOfTrueNegatives)
        setOfFalseNegatives=np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:,1],setOfTruePositives[:,0],c='g',marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c='r', marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c='k', marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        total=(len(setOfFalsePositives)+len(setOfFalseNegatives)+len(setOfTruePositives)+len(setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives))/ total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives))/total)
        print(np.array(len(setOfTruePositives)+len(setOfTrueNegatives))/total)
        return fig

    def Figure39(self):
        DetectedNumCellsInROI = [6, 3, 1, 7, 0, 5, 2, 0, 4, 5, 1, 8, 0, 5, 5, 5, 5, 5, 3, 6, 4, 1, 8, 8, 0, 2, 1, 2, 1, 2, 4, 3, 5, 4, 2, 4, 5, 4, 4, 4, 6, 2, 3, 2, 8, 2, 4, 5, 6, 5, 5, 3, 3, 2, 5, 5, 5, 3, 6, 0, 0, 2, 5, 0]
        TrueNumCellsInROI = [4,3,2,4,1,6,2,0,3,4,1,6,0,3,4,7,6,2,1,5,3,0,5,6,1,1,2,2,1,4,6,1,5,6,2,5,4,2,5,3,5,2,2,3,5,4,4,5,7,1,7,3,4,4,4,8,4,3,4,0,1,3,7,0]
        fig,ax=plt.subplots(1,1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives=[]
        setOfFalsePositives=[]
        setOfTrueNegatives=[]
        setOfFalseNegatives=[]
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i]>=3) & (TrueNumCellsInROI[i]>=3):
                setOfTruePositives.append((DetectedNumCellsInROI[i]+(np.random.rand()-.5)*.2,TrueNumCellsInROI[i]+(np.random.rand()-.5)*.2))
            elif (DetectedNumCellsInROI[i]>=3) & (TrueNumCellsInROI[i]<3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i]+(np.random.rand()-.5)*.2,TrueNumCellsInROI[i]+(np.random.rand()-.5)*.2))
            elif (DetectedNumCellsInROI[i]<3) & (TrueNumCellsInROI[i]<3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i]+(np.random.rand()-.5)*.2,TrueNumCellsInROI[i]+(np.random.rand()-.5)*.2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i]+(np.random.rand()-.5)*.2,TrueNumCellsInROI[i]+(np.random.rand()-.5)*.2))
        setOfTruePositives=np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives=np.array(setOfTrueNegatives)
        setOfFalseNegatives=np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:,1],setOfTruePositives[:,0],c='g',marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c='r', marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c='k', marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        print(np.array(len(setOfTruePositives)+len(setOfTrueNegatives))/(len(setOfFalsePositives)+len(setOfFalseNegatives)+len(setOfTruePositives)+len(setOfTrueNegatives)))
        total=(len(setOfFalsePositives)+len(setOfFalseNegatives)+len(setOfTruePositives)+len(setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / total)
        return fig

    def Figure40(self):
        DetectedNumCellsInROI = [6, 3, 1, 7, 0, 5, 2, 0, 4, 5, 1, 8, 0, 5, 5, 5, 5, 5, 3, 6, 4, 1, 8, 8, 0, 2, 1, 2, 1,
                                 2, 4, 3, 5, 4, 2, 4, 5, 4, 4, 4, 6, 2, 3, 2, 8, 2, 4, 5, 6, 5, 5, 3, 3, 2, 5, 5, 5, 3,
                                 6, 0, 0, 2, 5, 0]
        TrueNumCellsInROI = [4, 3, 2, 4, 1, 6, 2, 0, 3, 4, 1, 6, 0, 3, 4, 7, 6, 2, 1, 5, 3, 0, 5, 6, 1, 1, 2, 2, 1, 4,
                             6, 1, 5, 6, 2, 5, 4, 2, 5, 3, 5, 2, 2, 3, 5, 4, 4, 5, 7, 1, 7, 3, 4, 4, 4, 8, 4, 3, 4, 0,
                             1, 3, 7, 0]
        fig,ax=plt.subplots(1,1)
        #ax.scatter(TrueNumCellsInROI,DetectedNumCellsInROI)
        slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(TrueNumCellsInROI, DetectedNumCellsInROI)
        print(r_value ** 2)
        xRange = np.linspace(-1, 10)
        ax.plot(xRange, slope * xRange + intercept)

        for i in range(len(DetectedNumCellsInROI)):
            DetectedNumCellsInROI[i]=DetectedNumCellsInROI[i]+(np.random.rand() - .5) * .3
            TrueNumCellsInROI[i] = TrueNumCellsInROI[i] + (np.random.rand() - .5) * .3
        ax.scatter(TrueNumCellsInROI, DetectedNumCellsInROI)
        return fig

    def Figure41(self):
        DetectedNumCellsInROI = [6, 3, 1, 7, 0, 5, 2, 0, 4, 5, 1, 8, 0, 5, 5, 5, 5, 5, 3, 6, 4, 1, 8, 8, 0, 2, 1, 2, 1,
                                 2, 4, 3, 5, 4, 2, 4, 5, 4, 4, 4, 6, 2, 3, 2, 8, 2, 4, 5, 6, 5, 5, 3, 3, 2, 5, 5, 5, 3,
                                 6, 0, 0, 2, 5, 0]
        TrueNumCellsInROI = [4, 3, 2, 4, 1, 6, 2, 0, 3, 4, 1, 6, 0, 3, 4, 7, 6, 2, 1, 5, 3, 0, 5, 6, 1, 1, 2, 2, 1, 4,
                             6, 1, 5, 6, 2, 5, 4, 2, 5, 3, 5, 2, 2, 3, 5, 4, 4, 5, 7, 1, 7, 3, 4, 4, 4, 8, 4, 3, 4, 0,
                             1, 3, 7, 0]
        print(len(TrueNumCellsInROI))
        sortedDetectedIndeces=np.argsort(DetectedNumCellsInROI)
        sortedTrueIndeces = np.argsort(TrueNumCellsInROI)
        print(sorted(DetectedNumCellsInROI))
        print(sorted(TrueNumCellsInROI))

        SelectedDetectedROI=sortedDetectedIndeces[-42:] #pick Roi with at least 3 or more
        SelectedTrueROI = sortedTrueIndeces[-41:]
        print(len(SelectedTrueROI))
        print(sorted(SelectedTrueROI))
        print(sorted(SelectedDetectedROI))
        fig, ax = plt.subplots(8,8)
        im=tifffile.imread('data/analysis/TimBrianSearchPart1/exampleMileStone1_Part1_NDTiffStack.tif')
        ind=0
        for i in range(8):
            for j in range(8):
                image=np.zeros([512,512,3])
                image[:,:,1]=im[ind,:,:]
                image[:, :, 1]=image[:,:,1]/np.max(image[:,:,1])
                ax[i,j].imshow(image)
                ax[i, j].set(xticklabels=())
                ax[i, j].set(yticklabels=())
                ind=ind+1
        return fig

    def Figure42(self):
        im = tifffile.imread('data/analysis/TimBrianSearchPart1/exampleMileStone1_Part1_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1,2)
        image = np.zeros([512, 512, 3])
        image[:, :, 1] = np.array(im[13,:,:])/np.max(im[13,:,:])

        ax[0].imshow(image)
        ax[0].set(xticklabels=())
        ax[0].set(yticklabels=())

        detector=SpotCountLocationsDoughnut()
        positions=detector.process(im[1,:,:],sig=[3,8])
        points=np.array(positions[0]['positions'][0:5])
        detector=CellDetectorCellMask(model_type='cyto')
        mask=np.array(detector.process(im[13,:,:]))
        print(mask)
        for i in range(512):
            for j in range(512):
                if mask[i,j]==0:
                    mask[i,j]=np.nan
        cmap = plt.cm.get_cmap()
        cmap.set_bad('white', 1.)
        ax[1].imshow(mask,cmap=cmap)
        ax[1].set(xticklabels=())
        ax[1].set(yticklabels=())
        cmap=plt.cm.get_cmap()
        cmap.set_bad('white',1.)
        return fig

    def Figure43(self):
        #SLIDE 2!!
        DetectedNumCellsInROI = [7, 4, 3, 5, 6, 6, 5, 4, 4, 2, 5, 5, 3, 4, 6, 4, 7, 6, 3, 4, 5, 5, 4, 5, 3, 2, 6, 7, 4, 6, 2, 7, 3, 4, 7, 4, 7, 1, 3, 5, 8, 7, 6, 4, 5, 4, 4, 6, 3, 5, 5, 4, 5, 5, 6, 2, 5, 6, 3, 6, 5, 6, 5, 5] #at 250
        DetectedNumCellsInROI =[6, 4, 2, 4, 6, 6, 5, 5, 3, 3, 4, 6, 2, 4, 7, 4, 7, 5, 2, 4, 3, 6, 3, 5, 3, 2, 4, 6, 4, 4, 2, 6, 2, 4, 6, 3, 6,
         7, 3, 4, 8, 3, 6, 4, 5, 4, 1, 5, 3, 6, 8, 4, 5, 5, 6, 2, 5, 5, 3, 4, 6, 6, 3, 1] #at 300

        TrueNumCellsInROI = [6,4,2,5,4,5,3,3,3,3,3,4,2,3,3,3,4,4,3,2,2,5,3,5,3,1,1,6,4,2,1,4,2,3,7,6,6,1,2,4,5,4,6,4,5,3,1,4,2,4,5,3,4,3,6,2,5,4,2,5,5,5,3,1]
        print(len(DetectedNumCellsInROI))
        print(len(TrueNumCellsInROI))
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] >= 3):
                setOfTruePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] < 3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] < 3) & (TrueNumCellsInROI[i] < 3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c=[0,1,0], marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c=[1,0,0], marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c=[.4,.4,.4], marker='x')
        #ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / (
                    len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
                setOfTrueNegatives)))
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / total)
        # SLIDE 3!!
        DetectedNumCellsInROI = [6, 6, 6, 9, 6, 5, 5, 2, 8, 5, 4, 4, 7, 7, 5, 3, 7, 7, 12, 6, 6, 4, 4, 4, 5, 7, 6, 5, 4, 3, 1, 7, 5, 5, 2, 1, 2, 3, 4, 4, 4, 1, 1, 0, 2, 1, 2, 0, 4, 3, 2, 2, 0, 1, 3, 4, 2, 2, 1, 3, 7, 7, 0, 1]#at DIAMETER 250
        DetectedNumCellsInROI = [6, 5, 4, 5, 7, 3, 5, 2, 4, 4, 2, 4, 7, 7, 4, 2, 5, 5, 8, 7, 6, 6, 5, 4, 7, 5, 3, 3, 4,
                                 2, 2, 5, 3, 4, 8, 2, 9, 2, 2, 3, 1, 0, 2, 2, 1, 1, 3, 5, 3, 5, 2, 0, 4, 0, 5, 2, 3, 8,
                                 1, 3, 2, 0, 0, 4] # Diameter 300
        TrueNumCellsInROI = [6,4,4,5,4,3,5,2,4,3,4,4,6,6,5,5,6,5,7,5,4,3,2,4,4,6,5,4,1,0,1,4,5,3,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        print(len(DetectedNumCellsInROI))
        print(len(TrueNumCellsInROI))
        ## SLIDE 3
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] >= 3):
                setOfTruePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] < 3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] < 3) & (TrueNumCellsInROI[i] < 3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c=[0,.6,0], marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c=[.6,0,0], marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c=[0,0,0], marker='x')
        # ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / (
                len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives)))
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / total)
        return fig

    def Figure44(self):
        #SLIDE 2!!
        DetectedNumCellsInROI =[3989.0137367248535, 2363.922908782959, 1937.8845443725586, 2954.589527130127, 3927.2260971069336, 3174.22843170166, 2756.257522583008, 2934.046298980713, 2377.2355918884277, 2402.580390930176, 2965.2723541259766, 2797.018928527832, 2501.6575050354004, 2604.571990966797, 3338.1754302978516, 2872.8711128234863, 3667.0263748168945, 3110.434223175049, 3781.3336448669434, 2963.4996376037598, 2481.9612464904785, 3851.5508193969727, 2600.8480911254883, 3451.048282623291, 3272.6326026916504, 2031.4643363952637, 2295.590305328369, 4343.644397735596, 3628.7377967834473, 2614.1914024353027, 2393.918483734131, 3637.5155296325684, 2558.645565032959, 2408.993850708008, 4123.456184387207, 5061.322078704834, 4638.639499664307, 1874.4660720825195, 2025.5014152526855, 3414.4785652160645, 3722.697914123535, 3991.3555488586426, 4022.059169769287, 3807.8363037109375, 3827.86531829834, 3003.8594856262207, 2143.954620361328, 3681.4939880371094, 2107.800262451172, 3123.316635131836, 3670.9181365966797, 2583.442035675049, 3312.1317558288574, 2772.2317543029785, 3964.063976287842, 2550.1824493408203, 3219.4915733337402, 3577.986888885498, 2446.066307067871, 2524.7328491210938, 4276.421337127686, 3590.1212425231934, 2597.196804046631, 2844.803840637207]


        TrueNumCellsInROI = [6,4,2,5,4,5,3,3,3,3,3,4,2,3,3,3,4,4,3,2,2,5,3,5,3,1,1,6,4,2,1,4,2,3,7,6,6,1,2,4,5,4,6,4,5,3,1,4,2,4,5,3,4,3,6,2,5,4,2,5,5,5,3,1]
        print(len(DetectedNumCellsInROI))
        print(len(TrueNumCellsInROI))
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i] >= 2500) & (TrueNumCellsInROI[i] >= 3):
                setOfTruePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] >= 2500) & (TrueNumCellsInROI[i] < 3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] < 2500) & (TrueNumCellsInROI[i] < 3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c=[0,1,0], marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c=[1,0,0], marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c=[.4,.4,.4], marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c=[1,0,0], marker='x')
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / (
                    len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
                setOfTrueNegatives)))
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / total)
        # SLIDE 3!!
        DetectedNumCellsInROI =[3535.5781745910645, 2860.5414848327637, 3323.7938652038574, 4122.043575286865, 3684.3115768432617, 2240.745460510254, 3397.3284950256348, 2302.07865524292, 3966.036190032959, 2757.198196411133, 3289.811176300049, 3567.5684394836426, 3836.709674835205, 3155.9120445251465, 2749.423572540283, 3068.004047393799, 3872.1553993225098, 3190.613929748535, 2968.8615341186523, 2531.095485687256, 2241.978900909424, 1552.2986030578613, 1865.337604522705, 2428.466293334961, 2417.908721923828, 2773.5197372436523, 3757.3026733398438, 1986.263599395752, 1141.9486274719238, 813.7097358703613, 1032.6162338256836, 1642.1758842468262, 2326.2222862243652, 1778.4802284240723, 916.3241920471191, 1007.2599296569824, 1005.0108909606934, 1119.0669288635254, 1115.5578002929688, 1133.5458374023438, 1194.1702423095703, 884.0382270812988, 968.5502243041992, 831.1238250732422, 767.1623191833496, 871.8792152404785, 854.2553863525391, 846.6224937438965, 935.0656852722168, 986.842170715332, 941.5374488830566, 949.1858978271484, 887.2684288024902, 910.4161338806152, 764.1092758178711, 726.8873558044434, 891.3366432189941, 1012.6684303283691, 1114.11470413208, 1130.930362701416, 1007.5049514770508, 868.6217002868652, 853.8570976257324, 821.3057098388672]

        TrueNumCellsInROI = [6,4,4,5,4,3,5,2,4,3,4,4,6,6,5,5,6,5,7,5,4,3,2,4,4,6,5,4,1,0,1,4,5,3,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        print(len(DetectedNumCellsInROI))
        print(len(TrueNumCellsInROI))
        ## SLIDE 3
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i] >= 2500) & (TrueNumCellsInROI[i] >= 3):
                setOfTruePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .1,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .1))
            elif (DetectedNumCellsInROI[i] >= 2500) & (TrueNumCellsInROI[i] < 3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .1,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .1))
            elif (DetectedNumCellsInROI[i] < 2500) & (TrueNumCellsInROI[i] < 3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .1,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .1))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .1,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .1))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c=[0,.3,0], marker='o')
        #ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c=[.3,0,0], marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c=[0,0,0], marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c=[.3,0,0], marker='x')
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / (
                len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives)))
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / total)
        return fig

    def Figure45(self):
        DetectedNumCellsInROI = [2912.4879417419434, 3249.573844909668, 2463.518581390381, 3251.835178375244, 2209.5182495117188, 3324.3364028930664, 2984.725685119629, 2127.7232627868652, 3609.596996307373, 2964.907295227051, 2829.9480743408203, 3532.3376121520996, 2116.6866874694824, 2956.112651824951, 2906.5930252075195, 3399.328567504883, 3477.8462409973145, 3112.1557807922363, 3056.1069297790527, 3258.576457977295, 2840.2037620544434, 2186.3534049987793, 3165.240146636963, 3228.40625, 2349.9675216674805, 2667.5297775268555, 2856.1201515197754, 2309.8883934020996, 2480.741653442383, 2812.941806793213, 3417.7159538269043, 2687.0265769958496, 2827.1444091796875, 3081.3290252685547, 2785.787078857422, 3181.43998336792, 3157.1973037719727, 2442.1327514648438, 2932.326671600342, 3571.824882507324, 3483.9537391662598, 2553.7291145324707, 2792.730739593506, 2768.469680786133, 3404.054599761963, 3718.480827331543, 2848.480667114258, 3253.043285369873, 3469.944435119629, 2144.002395629883, 3435.5425910949707, 2715.0759239196777, 3330.567207336426, 2968.6814346313477, 3085.5460815429688, 3539.195255279541, 3241.6587295532227, 3411.2763023376465, 2935.038143157959, 2052.6682624816895, 2245.7949180603027, 3118.2815437316895, 3567.8528480529785, 2372.658145904541]



        TrueNumCellsInROI = [4,3,2,4,1,6,2,0,3,4,1,6,0,3,4,7,6,2,1,5,3,0,5,6,1,1,2,2,1,4,6,1,5,6,2,5,4,2,5,3,5,2,2,3,5,4,4,5,7,1,7,3,4,4,4,8,4,3,4,0,1,3,7,0]
        fig,ax=plt.subplots(1,1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives=[]
        setOfFalsePositives=[]
        setOfTrueNegatives=[]
        setOfFalseNegatives=[]
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i]>=2500) & (TrueNumCellsInROI[i]>=3):
                setOfTruePositives.append((DetectedNumCellsInROI[i]+(np.random.rand()-.5)*.2,TrueNumCellsInROI[i]+(np.random.rand()-.5)*.2))
            elif (DetectedNumCellsInROI[i]>=2500) & (TrueNumCellsInROI[i]<3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i]+(np.random.rand()-.5)*.2,TrueNumCellsInROI[i]+(np.random.rand()-.5)*.2))
            elif (DetectedNumCellsInROI[i]<2500) & (TrueNumCellsInROI[i]<3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i]+(np.random.rand()-.5)*.2,TrueNumCellsInROI[i]+(np.random.rand()-.5)*.2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i]+(np.random.rand()-.5)*.2,TrueNumCellsInROI[i]+(np.random.rand()-.5)*.2))
        setOfTruePositives=np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives=np.array(setOfTrueNegatives)
        setOfFalseNegatives=np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:,1],setOfTruePositives[:,0],c='g',marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c='r', marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c='k', marker='x')
#        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        total=(len(setOfFalsePositives)+len(setOfFalseNegatives)+len(setOfTruePositives)+len(setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives))/ total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives))/total)
        print(np.array(len(setOfTruePositives)+len(setOfTrueNegatives))/total)
        return fig

    def Figure46(self):
        DetectedNumCellsInROI = [2912.4879417419434, 3249.573844909668, 2463.518581390381, 3251.835178375244,
                                 2209.5182495117188, 3324.3364028930664, 2984.725685119629, 2127.7232627868652,
                                 3609.596996307373, 2964.907295227051, 2829.9480743408203, 3532.3376121520996,
                                 2116.6866874694824, 2956.112651824951, 2906.5930252075195, 3399.328567504883,
                                 3477.8462409973145, 3112.1557807922363, 3056.1069297790527, 3258.576457977295,
                                 2840.2037620544434, 2186.3534049987793, 3165.240146636963, 3228.40625,
                                 2349.9675216674805, 2667.5297775268555, 2856.1201515197754, 2309.8883934020996,
                                 2480.741653442383, 2812.941806793213, 3417.7159538269043, 2687.0265769958496,
                                 2827.1444091796875, 3081.3290252685547, 2785.787078857422, 3181.43998336792,
                                 3157.1973037719727, 2442.1327514648438, 2932.326671600342, 3571.824882507324,
                                 3483.9537391662598, 2553.7291145324707, 2792.730739593506, 2768.469680786133,
                                 3404.054599761963, 3718.480827331543, 2848.480667114258, 3253.043285369873,
                                 3469.944435119629, 2144.002395629883, 3435.5425910949707, 2715.0759239196777,
                                 3330.567207336426, 2968.6814346313477, 3085.5460815429688, 3539.195255279541,
                                 3241.6587295532227, 3411.2763023376465, 2935.038143157959, 2052.6682624816895,
                                 2245.7949180603027, 3118.2815437316895, 3567.8528480529785, 2372.658145904541]

        TrueNumCellsInROI = [4, 3, 2, 4, 1, 6, 2, 0, 3, 4, 1, 6, 0, 3, 4, 7, 6, 2, 1, 5, 3, 0, 5, 6, 1, 1, 2, 2, 1, 4,
                             6, 1, 5, 6, 2, 5, 4, 2, 5, 3, 5, 2, 2, 3, 5, 4, 4, 5, 7, 1, 7, 3, 4, 4, 4, 8, 4, 3, 4, 0,
                             1, 3, 7, 0]
        fig,ax=plt.subplots(1,1)
        #ax.scatter(TrueNumCellsInROI,DetectedNumCellsInROI)
        slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(TrueNumCellsInROI, DetectedNumCellsInROI)
        print(r_value ** 2)
        xRange = np.linspace(-1, 10)
        ax.plot(xRange, slope * xRange + intercept)

        for i in range(len(DetectedNumCellsInROI)):
            DetectedNumCellsInROI[i]=DetectedNumCellsInROI[i]+(np.random.rand() - .5) * .3
            TrueNumCellsInROI[i] = TrueNumCellsInROI[i] + (np.random.rand() - .5) * .3
        ax.scatter(TrueNumCellsInROI, DetectedNumCellsInROI)
        return fig

    def Figure47(self):
        DetectedPunctaInROI = [133.7795202537527, 1224.583108483713, 829.5349305223615, 63.191070997011586, 899.6849010914483, 50.35807803649545, 1333.0033502492054, 70.9433268201231, 1729.6089347341215, 784.9424217013236, 596.8161647693909, 468.1561843274561, 260.4236901882528, 52.88885970535239, 144.16489731215106, 2342.610605320217, 111.33059187625668, 393.395268449682, 748.3805782663574, 285.2949120483472, 213.6657104496479, 740.0547365724378, 44.408477440930206, 72.69053598725547, 187.5972284091628, 378.65863655999624, 822.6471403120153, 137.25914552426505]

        '''
        DetectedPunctaInROI =[137.71401809140767, 1093.4470658201574, 624.4267047163784, 71.81842561122704, 796.9366073734374,
         42.179411885922335, 1138.997526894126, 115.73612422669675, 1292.641830835062, 784.4115003752773,
         594.8226643802465, 662.4028605522969, 435.04243416792957, 52.36666563996034, 224.7236243621157,
         1465.459758622557, 193.38217203454892, 278.28091950583797, 724.8792380696932, 169.86596870456617,
         357.7980392693413, 582.3296169741211, 32.94436512274017, 64.7746291827748, 214.89047100367108,
         409.8579746038588, 678.0135846524628, 213.97604076243567]
        '''

        TruePunctaInROI = [0,2,2,0,2,0,2,0,1,1,1,0,0,0,0,1,0,1,3,2,0,0,0,0,1,1,0,0]
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedPunctaInROI)):
            if (DetectedPunctaInROI[i] >= 300) & (TruePunctaInROI[i] >= 1):
                setOfTruePositives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                           TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedPunctaInROI[i] >= 300) & (TruePunctaInROI[i] < 1):
                setOfFalsePositives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                            TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedPunctaInROI[i] < 300) & (TruePunctaInROI[i] < 1):
                setOfTrueNegatives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                           TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                            TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c='g', marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c='r', marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c='k', marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / total)
        return fig

    def Figure48(self):
        im = tifffile.imread('data/analysis/saveagainbecausebroken.tif')
        print(im.shape)
        fig, ax = plt.subplots(1,2)
        image = np.zeros([512, 512, 3])
        image[:, :, 0] = np.array(im[0, :, :]) / np.max(im[0, :, :])/4
        image[:, :, 1] = np.array(im[1, :, :]) / np.max(im[1, :, :])/2
        image[:, :, 2] = np.array(im[2, :, :]) / np.max(im[2, :, :])/2

        ax[0].imshow(image)
        ax[0].set(xticklabels=())
        ax[0].set(yticklabels=())
        image[:, :, 0] = np.array(im[3, :, :]) / np.max(im[3, :, :])
        image[:, :, 1] = np.array(im[4, :, :]) / np.max(im[4, :, :])/2
        image[:, :, 2] = np.array(im[5, :, :]) / np.max(im[5, :, :])/2
        ax[1].imshow(image)
        ax[1].set(xticklabels=())
        ax[1].set(yticklabels=())
        return fig

    def Figure49(self):
        DetectedPunctaInROI = [114.60653657088544, 61.49274254644043, 695.5425892206601, 1309.786603388862, 825.1908926018145, 1475.966511628056, 1080.6838947291715, 314.1104702026654, 227.2673742789628, 289.09163397326677, 124.4992269372656, 91.67877321211571, 1175.2120065175247, 101.29208688523786, 88.94190442049108, 1265.1656351382114, 935.9732089194575, 206.38850742142816, 1241.711910472709, 2195.42768981351, 236.17191515325868, 1543.6509382156594, 1561.7989337231913, 674.0831969777938, 115.71756670963566, 155.3751462092233, 238.20076651401456, 162.59010543106598, 361.56065066293525, 1224.4859790825233, 216.2819580337969, 157.72602138175134, 377.5341463189898, 365.07790941686125, 725.2477239027756, 612.0166302005291, 51.93495508675585, 210.89057990431215, 95.91323619916201, 309.2536818654094, 152.59656595260773, 55.22231390581298, 338.1837057664175, 147.7456550768828, 160.51167797961375, 56.99180100609036, 405.884080439023, 286.31753387699735, 219.3069259471154, 359.86110624491994, 378.7637077000479, 466.60914745226796, 316.6833387287766, 165.99508461941053, 596.4145360517327, 490.65176029280786, 163.36317568985714, 151.42376708380738, 1449.960000058474, 330.8920228013747, 1535.4214760588043, 797.1341087203278, 1845.6882974981, 594.1957202415074]


        '''
        DetectedPunctaInROI =[137.71401809140767, 1093.4470658201574, 624.4267047163784, 71.81842561122704, 796.9366073734374,
         42.179411885922335, 1138.997526894126, 115.73612422669675, 1292.641830835062, 784.4115003752773,
         594.8226643802465, 662.4028605522969, 435.04243416792957, 52.36666563996034, 224.7236243621157,
         1465.459758622557, 193.38217203454892, 278.28091950583797, 724.8792380696932, 169.86596870456617,
         357.7980392693413, 582.3296169741211, 32.94436512274017, 64.7746291827748, 214.89047100367108,
         409.8579746038588, 678.0135846524628, 213.97604076243567]
        '''

        TruePunctaInROI = [0,0,1,1,1,1,2,1,2,1,0,0,2,0,0,2,1,1,1,2,0,1,1,2,0,0,0,0,1,1,0,0,1,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,1,1,0,0,0,1,2,2,1,1]
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        detectionTreshold=500
        for i in range(len(DetectedPunctaInROI)):
            if (DetectedPunctaInROI[i] >= detectionTreshold) & (TruePunctaInROI[i] >= 1):
                setOfTruePositives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                           TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedPunctaInROI[i] >= detectionTreshold) & (TruePunctaInROI[i] < 1):
                setOfFalsePositives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                            TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
                print('TruePositiveAt:{0}'.format(i))
            elif (DetectedPunctaInROI[i] < detectionTreshold) & (TruePunctaInROI[i] < 1):
                setOfTrueNegatives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                           TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                            TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c='g', marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c='r', marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c='k', marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives))/( len(setOfTruePositives)+len(setOfFalsePositives)))
        return fig

    def Figure42(self):
        im = tifffile.imread('data/analysis/TimBrianSearchPart1/exampleMileStone1_Part1_NDTiffStack.tif')
        print(im.shape)
        fig, ax = plt.subplots(1,2)
        image = np.zeros([512, 512, 3])
        image[:, :, 1] = np.array(im[13,:,:])/np.max(im[13,:,:])

        ax[0].imshow(image)
        ax[0].set(xticklabels=())
        ax[0].set(yticklabels=())

        detector=SpotCountLocationsDoughnut()
        positions=detector.process(im[1,:,:],sig=[3,8])
        points=np.array(positions[0]['positions'][0:5])
        detector=CellDetectorCellMask(model_type='cyto')
        mask=np.array(detector.process(im[13,:,:]))
        print(mask)
        for i in range(512):
            for j in range(512):
                if mask[i,j]==0:
                    mask[i,j]=np.nan
        cmap = plt.cm.get_cmap()
        cmap.set_bad('white', 1.)
        ax[1].imshow(mask,cmap=cmap)
        ax[1].set(xticklabels=())
        ax[1].set(yticklabels=())
        cmap=plt.cm.get_cmap()
        cmap.set_bad('white',1.)
        return fig

    def Figure50(self):
        #SLIDE 2!!
        DetectedNumCellsInROI = [7, 4, 3, 5, 6, 6, 5, 4, 4, 2, 5, 5, 3, 4, 6, 4, 7, 6, 3, 4, 5, 5, 4, 5, 3, 2, 6, 7, 4, 6, 2, 7, 3, 4, 7, 4, 7, 1, 3, 5, 8, 7, 6, 4, 5, 4, 4, 6, 3, 5, 5, 4, 5, 5, 6, 2, 5, 6, 3, 6, 5, 6, 5, 5]
        TrueNumCellsInROI = [6, 4, 2, 5, 4, 5, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 4, 4, 3, 2, 2, 5, 3, 5, 3, 1, 1, 6, 4, 2,
                             1, 4, 2, 3, 7, 6, 6, 1, 2, 4, 5, 4, 6, 4, 5, 3, 1, 4, 2, 4, 5, 3, 4, 3, 6, 2, 5, 4, 2, 5,
                             5, 5, 3, 1]


        print(len(DetectedNumCellsInROI))
        print(len(TrueNumCellsInROI))
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] >= 3):
                setOfTruePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] < 3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] < 3) & (TrueNumCellsInROI[i] < 3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c=[0,1,0], marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c=[1,0,0], marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c=[.4,.4,.4], marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / (
                    len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
                setOfTrueNegatives)))
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / total)
        # SLIDE 3!!
        DetectedNumCellsInROI = []#at DIAMETER 250
        DetectedNumCellsInROI = [3, 0, 0, 1, 8, 0, 0, 5, 1, 2, 3, 1, 6, 1, 5, 1, 1, 1, 0, 4, 3, 1, 2, 1, 0, 0, 0, 3, 0, 7, 2, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 3, 0, 1, 1, 1, 4, 1, 1, 2, 0, 0, 3, 1, 0, 2, 0, 3, 4]
        #DetectedNumCellsInROI=np.array(DetectedNumCellsInROI)/np.mean(DetectedNumCellsInROI)
 # Diameter 300
        TrueNumCellsInROI = [2,3,1,5,4,1,3,3,2,3,3,0,3,2,1,5,2,2,5,0,3,4,2,2,0,3,2,2,4,3,1,3,0,5,5,5,0,1,1,2,2,0,5,2,4,0,5,5,3,3,2,5,0,2,2,1,2,3,3,5,3,2,3,5]
        print(len(DetectedNumCellsInROI))
        print(len(TrueNumCellsInROI))
        ## SLIDE 3
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] >= 3):
                setOfTruePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] < 3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] < 3) & (TrueNumCellsInROI[i] < 3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c=[0,.6,0], marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c=[.6,0,0], marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c=[0,0,0], marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / (
                len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives)))
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / total)
        return fig

    def Figure51(self):
        # SLIDE 2!!
        DetectedNumCellsInROI = [3989.0137367248535, 2363.922908782959, 1937.8845443725586, 2954.589527130127,
                                 3927.2260971069336, 3174.22843170166, 2756.257522583008, 2934.046298980713,
                                 2377.2355918884277, 2402.580390930176, 2965.2723541259766, 2797.018928527832,
                                 2501.6575050354004, 2604.571990966797, 3338.1754302978516, 2872.8711128234863,
                                 3667.0263748168945, 3110.434223175049, 3781.3336448669434, 2963.4996376037598,
                                 2481.9612464904785, 3851.5508193969727, 2600.8480911254883, 3451.048282623291,
                                 3272.6326026916504, 2031.4643363952637, 2295.590305328369, 4343.644397735596,
                                 3628.7377967834473, 2614.1914024353027, 2393.918483734131, 3637.5155296325684,
                                 2558.645565032959, 2408.993850708008, 4123.456184387207, 5061.322078704834,
                                 4638.639499664307, 1874.4660720825195, 2025.5014152526855, 3414.4785652160645,
                                 3722.697914123535, 3991.3555488586426, 4022.059169769287, 3807.8363037109375,
                                 3827.86531829834, 3003.8594856262207, 2143.954620361328, 3681.4939880371094,
                                 2107.800262451172, 3123.316635131836, 3670.9181365966797, 2583.442035675049,
                                 3312.1317558288574, 2772.2317543029785, 3964.063976287842, 2550.1824493408203,
                                 3219.4915733337402, 3577.986888885498, 2446.066307067871, 2524.7328491210938,
                                 4276.421337127686, 3590.1212425231934, 2597.196804046631, 2844.803840637207]
        TrueNumCellsInROI = [6, 4, 2, 5, 4, 5, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 4, 4, 3, 2, 2, 5, 3, 5, 3, 1, 1, 6, 4, 2,
                             1, 4, 2, 3, 7, 6, 6, 1, 2, 4, 5, 4, 6, 4, 5, 3, 1, 4, 2, 4, 5, 3, 4, 3, 6, 2, 5, 4, 2, 5,
                             5, 5, 3, 1]

        print(len(DetectedNumCellsInROI))
        print(len(TrueNumCellsInROI))
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] >= 3):
                setOfTruePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] < 3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] < 3) & (TrueNumCellsInROI[i] < 3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c=[0, 1, 0], marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c=[1, 0, 0], marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c=[.4, .4, .4], marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / (
                len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives)))
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / total)
        # SLIDE 3!!
        DetectedNumCellsInROI = []
        # DetectedNumCellsInROI=np.array(DetectedNumCellsInROI)/np.mean(DetectedNumCellsInROI)
        # Diameter 300
        TrueNumCellsInROI = [2, 3, 1, 5, 4, 1, 3, 3, 2, 3, 3, 0, 3, 2, 1, 5, 2, 2, 5, 0, 3, 4, 2, 2, 0, 3, 2, 2, 4, 3,
                             1, 3, 0, 5, 5, 5, 0, 1, 1, 2, 2, 0, 5, 2, 4, 0, 5, 5, 3, 3, 2, 5, 0, 2, 2, 1, 2, 3, 3, 5,
                             3, 2, 3, 5]
        print(len(DetectedNumCellsInROI))
        print(len(TrueNumCellsInROI))
        ## SLIDE 3
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] >= 3):
                setOfTruePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] < 3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] < 3) & (TrueNumCellsInROI[i] < 3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c=[0, .6, 0], marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c=[.6, 0, 0], marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c=[0, 0, 0], marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / (
                len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives)))
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives) + len(setOfTrueNegatives)) / total)
        return fig

    def Figure52(self):
        DetectedPunctaInROI = [114.60653657088544, 61.49274254644043, 695.5425892206601, 1309.786603388862, 825.1908926018145, 1475.966511628056, 1080.6838947291715, 314.1104702026654, 227.2673742789628, 289.09163397326677, 124.4992269372656, 91.67877321211571, 1175.2120065175247, 101.29208688523786, 88.94190442049108, 1265.1656351382114, 935.9732089194575, 206.38850742142816, 1241.711910472709, 2195.42768981351, 236.17191515325868, 1543.6509382156594, 1561.7989337231913, 674.0831969777938, 115.71756670963566, 155.3751462092233, 238.20076651401456, 162.59010543106598, 361.56065066293525, 1224.4859790825233, 216.2819580337969, 157.72602138175134, 377.5341463189898, 365.07790941686125, 725.2477239027756, 612.0166302005291, 51.93495508675585, 210.89057990431215, 95.91323619916201, 309.2536818654094, 152.59656595260773, 55.22231390581298, 338.1837057664175, 147.7456550768828, 160.51167797961375, 56.99180100609036, 405.884080439023, 286.31753387699735, 219.3069259471154, 359.86110624491994, 378.7637077000479, 466.60914745226796, 316.6833387287766, 165.99508461941053, 596.4145360517327, 490.65176029280786, 163.36317568985714, 151.42376708380738, 1449.960000058474, 330.8920228013747, 1535.4214760588043, 797.1341087203278, 1845.6882974981, 594.1957202415074]

        TruePunctaInROI = [0,0,1,1,1,1,2,1,2,1,0,0,0,0,0,2,1,1,1,2,0,1,1,2,0,0,0,0,1,1,0,0,1,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,1,1,0,0,0,1,2,2,1,1]


        fig,ax=plt.subplots(1,1)
        #ax.scatter(TrueNumCellsInROI,DetectedNumCellsInROI)
        slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(TruePunctaInROI, DetectedPunctaInROI)
        print(r_value ** 2)
        xRange = np.linspace(-1, 10)
        ax.plot(xRange, slope * xRange + intercept)

        for i in range(len(DetectedPunctaInROI)):
            DetectedPunctaInROI[i]=DetectedPunctaInROI[i]+(np.random.rand() - .5) * .3
            TruePunctaInROI[i] = TruePunctaInROI[i] + (np.random.rand() - .5) * .3
        ax.scatter(TruePunctaInROI, DetectedPunctaInROI)
        return fig

    def Figure53(self):
        numROI=[1**2,3**2,10**2,31**2]
        z1=[6.474319696426392,10.933887720108032,63.25856280326843,539.3931000232697]
        z3=[8.222338199615479,29.21641755104065,251.5087170600891,2342.1971101760864]
        z5=[8.547067403793335,32.5227735042572,303.24682331085205,2842.0697486400604]
        lz1 = np.log(z1)
        lz3 = np.log(z3)
        lz5 = np.log(z5)
        logROI=np.log(numROI)
        slope1=(lz1[3]-lz1[2])/(logROI[3]-logROI[2])
        slope3 = (lz3[3] - lz3[2]) / (logROI[3] - logROI[2])
        slope5 = (lz5[3] - lz5[2]) / (logROI[3] - logROI[2])
        print(slope1)
        print(slope3)
        print(slope5)
        fig, ax = plt.subplots(1, 1)
        ax.loglog(numROI,z1)
        ax.loglog(numROI,z3)
        ax.loglog(numROI,z5)
        plt.grid(True, which="both")
        slope1 = (lz1[1] - lz1[0]) / (logROI[1] - logROI[0])
        slope3 = (lz3[1] - lz3[0]) / (logROI[1] - logROI[0])
        slope5 = (lz5[1] - lz5[0]) / (logROI[1] - logROI[0])
        print(slope1)
        print(slope3)
        print(slope5)
        return fig


    def Figure54(self):
        # SLIDE 2!! data/analysis/FindNumCellsSlide2/findNumCells_Part1_1/findNumCells_Part1_NDTiffStack.tif
        DetectedNumCellsInROI = [7, 4, 3, 5, 6, 6, 5, 4, 4, 2, 5, 5, 3, 4, 6, 4, 7, 6, 3, 4, 5, 5, 4, 5, 3, 2, 6, 7, 4, 6, 2, 7, 3, 4, 7, 4, 7, 1, 3, 5, 8, 7, 6, 4, 5, 4, 4, 6, 3, 5, 5, 4, 5, 5, 6, 2, 5, 6, 3, 6, 5, 6, 5, 5]
        TrueNumCellsInROI = [6, 4, 2, 5, 4, 5, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 4, 4, 3, 2, 2, 5, 3, 5, 3, 1, 1, 6, 4, 2,
                             1, 4, 2, 3, 7, 6, 6, 1, 2, 4, 5, 4, 6, 4, 5, 3, 1, 4, 2, 4, 5, 3, 4, 3, 6, 2, 5, 4, 2, 5,
                             5, 5, 3, 1]
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] >= 3):
                setOfTruePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] < 3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] < 3) & (TrueNumCellsInROI[i] < 3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c=[0, 1, 0], marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c=[1, 0, 0], marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c=[.4, .4, .4], marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c=[1,0,0], marker='x')
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        # SLIDE 3!!
        DetectedNumCellsInROI = [2, 4, 4, 5, 5, 2, 1, 5, 1, 1, 6, 2, 3, 3, 0, 2, 2, 4, 4, 6, 6, 3, 3, 7, 4, 6, 6, 9, 0,
                                 1,
                                 3, 5, 3, 8, 5, 9, 15, 5, 6, 2, 6, 5, 4, 6, 4, 4, 4, 4, 8, 6, 7, 4, 2, 4, 3, 1, 4, 6, 6,
                                 5,
                                 2, 2, 5, 4]
        TrueNumCellsInROI = [2, 3, 2, 5, 5, 1, 1, 4, 2, 2, 3, 3, 3, 4, 0, 2, 3, 3, 4, 4, 5, 3, 3, 5, 4, 6, 5, 5, 0, 1,
                             4, 5,
                             4, 5, 4, 5, 6, 5, 4, 2, 4, 3, 6, 4, 4, 4, 4, 1, 4, 5, 6, 3, 2, 4, 5, 2, 4, 5, 5, 5, 3, 1,
                             2, 3]
        ## SLIDE 3 data/analysis/renameof9by9_part1_bcause_pycharm_bad.tif
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] >= 3):
                setOfTruePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] >= 3) & (TrueNumCellsInROI[i] < 3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] < 3) & (TrueNumCellsInROI[i] < 3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c=[0, .4, 0], marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c=[[.4, 0, 0]], marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c=[[0, 0, 0]], marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c=[[.4,0,0]], marker='x')
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        return fig

    def Figure55(self):
        # SLIDE 2!!data/analysis/FindNumCellsSlide2/findNumCells_Part1_1/findNumCells_Part1_NDTiffStack.tif
        DetectedNumCellsInROI = [3989.0137367248535, 2363.922908782959, 1937.8845443725586, 2954.589527130127, 3927.2260971069336, 3174.22843170166, 2756.257522583008, 2934.046298980713, 2377.2355918884277, 2402.580390930176, 2965.2723541259766, 2797.018928527832, 2501.6575050354004, 2604.571990966797, 3338.1754302978516, 2872.8711128234863, 3667.0263748168945, 3110.434223175049, 3781.3336448669434, 2963.4996376037598, 2481.9612464904785, 3851.5508193969727, 2600.8480911254883, 3451.048282623291, 3272.6326026916504, 2031.4643363952637, 2295.590305328369, 4343.644397735596, 3628.7377967834473, 2614.1914024353027, 2393.918483734131, 3637.5155296325684, 2558.645565032959, 2408.993850708008, 4123.456184387207, 5061.322078704834, 4638.639499664307, 1874.4660720825195, 2025.5014152526855, 3414.4785652160645, 3722.697914123535, 3991.3555488586426, 4022.059169769287, 3807.8363037109375, 3827.86531829834, 3003.8594856262207, 2143.954620361328, 3681.4939880371094, 2107.800262451172, 3123.316635131836, 3670.9181365966797, 2583.442035675049, 3312.1317558288574, 2772.2317543029785, 3964.063976287842, 2550.1824493408203, 3219.4915733337402, 3577.986888885498, 2446.066307067871, 2524.7328491210938, 4276.421337127686, 3590.1212425231934, 2597.196804046631, 2844.803840637207]
        TrueNumCellsInROI = [6, 4, 2, 5, 4, 5, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 4, 4, 3, 2, 2, 5, 3, 5, 3, 1, 1, 6, 4, 2,
                             1, 4, 2, 3, 7, 6, 6, 1, 2, 4, 5, 4, 6, 4, 5, 3, 1, 4, 2, 4, 5, 3, 4, 3, 6, 2, 5, 4, 2, 5,
                             5, 5, 3, 1]
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i] >= 2500) & (TrueNumCellsInROI[i] >= 3):
                setOfTruePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] >= 2500) & (TrueNumCellsInROI[i] < 3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] < 2500) & (TrueNumCellsInROI[i] < 3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c=[0, 1, 0], marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c=[1, 0, 0], marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c=[.4, .4, .4], marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c=[1, 0.,0.], marker='x')
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        # SLIDE 3!! data/analysis/renameof9by9_part1_bcause_pycharm_bad.tif
        DetectedNumCellsInROI = [877.539436340332, 900.2954711914062, 877.7280578613281, 961.8105239868164, 1008.0705795288086, 934.499828338623, 799.8093223571777, 914.5134391784668, 804.097297668457, 898.9718933105469, 866.0592002868652, 933.308032989502, 866.2737159729004, 912.677806854248, 766.1723136901855, 838.2944602966309, 911.5742416381836, 851.1363639831543, 932.6011734008789, 958.6245918273926, 1033.2759284973145, 908.899959564209, 926.8636207580566, 979.6846580505371, 968.1467819213867, 1072.3412017822266, 960.1724662780762, 939.6127128601074, 817.3055572509766, 827.8040809631348, 899.7435646057129, 1015.5048217773438, 1017.7018814086914, 1072.0128059387207, 1037.4292221069336, 1026.9334716796875, 951.6791114807129, 985.963695526123, 1019.3832092285156, 915.8719062805176, 1060.39497756958, 1114.527500152588, 1019.0015487670898, 999.0434303283691, 1058.523281097412, 1012.0490646362305, 1020.9975814819336, 821.9219779968262, 1041.0665092468262, 1026.5809898376465, 1118.5650939941406, 964.90625, 870.5610733032227, 1027.56636428833, 953.2656211853027, 857.8272895812988, 1012.5972862243652, 1066.2261123657227, 1112.134750366211, 1074.7863731384277, 959.4482307434082, 947.3973083496094, 917.4506301879883, 1008.468620300293]
        TrueNumCellsInROI = [2, 3, 2, 5, 5, 1, 1, 4, 2, 2, 3, 3, 3, 4, 0, 2, 3, 3, 4, 4, 5, 3, 3, 5, 4, 6, 5, 5, 0, 1,
                             4, 5,
                             4, 5, 4, 5, 6, 5, 4, 2, 4, 3, 6, 4, 4, 4, 4, 1, 4, 5, 6, 3, 2, 4, 5, 2, 4, 5, 5, 5, 3, 1,
                             2, 3]
        ## SLIDE 3
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        for i in range(len(DetectedNumCellsInROI)):
            if (DetectedNumCellsInROI[i] >= 2500) & (TrueNumCellsInROI[i] >= 3):
                setOfTruePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] >= 2500) & (TrueNumCellsInROI[i] < 3):
                setOfFalsePositives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedNumCellsInROI[i] < 2500) & (TrueNumCellsInROI[i] < 3):
                setOfTrueNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                           TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedNumCellsInROI[i] + (np.random.rand() - .5) * .2,
                                            TrueNumCellsInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        #ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c=[0, .4, 0], marker='o')
        #ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c=[.4, 0, 0], marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c=[0, 0, 0], marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c=[.4, 0.,0.], marker='x')
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        return fig

    def Figure56(self):
        DetectedPunctaInROI = [0, 0, 1, 1, 1, 2, 3, 1, 0, 0, 0, 0, 8, 0, 0, 3, 2, 0, 5, 25, 0, 4, 3, 7, 0, 0, 0, 0, 1, 4, 0, 0, 1, 2, 6, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 17, 1, 5, 1, 8, 1]





        '''
        DetectedPunctaInROI =[137.71401809140767, 1093.4470658201574, 624.4267047163784, 71.81842561122704, 796.9366073734374,
         42.179411885922335, 1138.997526894126, 115.73612422669675, 1292.641830835062, 784.4115003752773,
         594.8226643802465, 662.4028605522969, 435.04243416792957, 52.36666563996034, 224.7236243621157,
         1465.459758622557, 193.38217203454892, 278.28091950583797, 724.8792380696932, 169.86596870456617,
         357.7980392693413, 582.3296169741211, 32.94436512274017, 64.7746291827748, 214.89047100367108,
         409.8579746038588, 678.0135846524628, 213.97604076243567]
        '''

        TruePunctaInROI = [0,0,1,1,1,1,2,1,2,1,0,0,2,0,0,2,1,1,1,2,0,1,1,2,0,0,0,0,1,1,0,0,1,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,1,1,0,0,0,1,2,2,1,1]
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        detectionTreshold=.99
        for i in range(len(DetectedPunctaInROI)):
            if (DetectedPunctaInROI[i] >= detectionTreshold) & (TruePunctaInROI[i] >= 1):
                setOfTruePositives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                           TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedPunctaInROI[i] >= detectionTreshold) & (TruePunctaInROI[i] < 1):
                setOfFalsePositives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                            TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
                print('TruePositiveAt:{0}'.format(i))
            elif (DetectedPunctaInROI[i] < detectionTreshold) & (TruePunctaInROI[i] < 1):
                setOfTrueNegatives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                           TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                            TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c='g', marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c='r', marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c='k', marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives))/( len(setOfTruePositives)+len(setOfFalsePositives)))
        return fig

    def Figure57(self):
        fig, ax = plt.subplots(8, 8)
        im = tifffile.imread('data/analysis/PunctaScan/findNumCells_Part1_1/findNumCells_Part1_NDTiffStack.tif')
        ind = 0
        for i in range(8):
            for j in range(8):
                image = np.zeros([512, 512, 3])
                image[:, :, 0] = im[ind, :, :]
                image[:, :, 0] = image[:, :, 0] / np.max(image[:, :,0])
                ax[i, j].imshow(image)
                ax[i, j].set(xticklabels=())
                ax[i, j].set(yticklabels=())
                ind = ind + 1
        return fig

    def Figure58(self):
        fig, ax = plt.subplots(8, 8)
        im = tifffile.imread('data/analysis/PunctaSearch/firstSearch/exampleMileStone1_Part1_NDTiffStack.tif')
        ind = 0
        for i in range(8):
            for j in range(8):
                image = np.zeros([512, 512, 3])
                image[:, :, 0] = im[ind, :, :]
                image[:, :, 0] = image[:, :, 0] / np.max(image[:, :,0])
                ax[i, j].imshow(image)
                ax[i, j].set(xticklabels=())
                ax[i, j].set(yticklabels=())
                ind = ind + 1
        return fig

    def Figure59(self):
        DetectedPunctaInROI = [0, 0, 1, 1, 1, 2, 3, 1, 0, 0, 0, 0, 8, 0, 0, 3, 2, 0, 5, 25, 0, 4, 3, 7, 0, 0, 0, 0, 1,
                               4, 0, 0, 1, 2, 6, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0,
                               17, 1, 5, 1, 8, 1]

        TruePunctaInROI = [0, 0, 1, 1, 1, 1, 2, 1, 2, 1, 0, 0, 2, 0, 0, 2, 1, 1, 1, 2, 0, 1, 1, 2, 0, 0, 0, 0, 1, 1, 0,
                           0, 1, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 1, 1, 0, 0, 0, 1, 2, 2,
                           1, 1]
        fig, ax = plt.subplots(1, 1)
        fig.set_figwidth = 10
        fig.set_figheight = 15
        setOfTruePositives = []
        setOfFalsePositives = []
        setOfTrueNegatives = []
        setOfFalseNegatives = []
        detectionTreshold = .99
        for i in range(len(DetectedPunctaInROI)):
            if (DetectedPunctaInROI[i] >= detectionTreshold) & (TruePunctaInROI[i] >= 1):
                setOfTruePositives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                           TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
            elif (DetectedPunctaInROI[i] >= detectionTreshold) & (TruePunctaInROI[i] < 1):
                setOfFalsePositives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                            TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
                print('TruePositiveAt:{0}'.format(i))
            elif (DetectedPunctaInROI[i] < detectionTreshold) & (TruePunctaInROI[i] < 1):
                setOfTrueNegatives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                           TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
            else:
                setOfFalseNegatives.append((DetectedPunctaInROI[i] + (np.random.rand() - .5) * .2,
                                            TruePunctaInROI[i] + (np.random.rand() - .5) * .2))
        setOfTruePositives = np.array(setOfTruePositives)
        setOfFalsePositives = np.array(setOfFalsePositives)
        setOfTrueNegatives = np.array(setOfTrueNegatives)
        setOfFalseNegatives = np.array(setOfFalseNegatives)
        ax.scatter(setOfTruePositives[:, 1], setOfTruePositives[:, 0], c='g', marker='o')
        ax.scatter(setOfFalsePositives[:, 1], setOfFalsePositives[:, 0], c='r', marker='o')
        ax.scatter(setOfTrueNegatives[:, 1], setOfTrueNegatives[:, 0], c='k', marker='x')
        ax.scatter(setOfFalseNegatives[:, 1], setOfFalseNegatives[:, 0], c='r', marker='x')
        total = (len(setOfFalsePositives) + len(setOfFalseNegatives) + len(setOfTruePositives) + len(
            setOfTrueNegatives))
        print(np.array(len(setOfTruePositives)) / total)
        print(np.array(len(setOfTrueNegatives)) / total)
        print(np.array(len(setOfFalsePositives)) / total)
        print(np.array(len(setOfFalseNegatives)) / total)
        print(np.array(len(setOfTruePositives)) / (len(setOfTruePositives) + len(setOfFalsePositives)))
        return fig

    def Figure60(self):
        fig, ax = plt.subplots(8, 8)
        im = tifffile.imread('data/analysis/PunctaSearch/firstSearch/exampleMileStone1_Part1_NDTiffStack.tif')
        ind = 0
        for i in range(8):
            for j in range(8):
                image = np.zeros([512, 512, 3])
                image[:, :, 0] = im[ind, :, :]
                image[:, :, 0] = image[:, :, 0] / np.max(image[:, :,0])
                ax[i, j].imshow(image)
                ax[i, j].set(xticklabels=())
                ax[i, j].set(yticklabels=())
                ind = ind + 1
        return fig


    def Figure61(self):
        fig, ax = plt.subplots(1,3)
        fig.set_figwidth(12)
        fig.set_figheight(3.5)
        # THRESHOLD OF 10 FOR ALL 3 SLIDES
        spots1=[142, 261, 353, 13, 18, 205, 59, 93, 61, 316, 337, 8, 84, 168, 179, 162, 115, 96, 126, 208, 118, 158, 127, 68, 9, 280, 55, 159, 140, 321, 194, 167, 46, 7, 104, 109, 169, 341, 81, 222, 211, 122, 430, 250, 270, 187, 126, 79, 54, 65, 41, 116, 160, 78, 322, 317, 269, 146, 132, 213, 66, 208, 182, 246, 196, 73, 128, 203, 68, 33, 168, 407, 212, 121, 238, 218, 273, 190, 131, 211, 302, 55, 152, 133, 122, 196, 160, 104, 206, 184, 170, 75, 435, 286, 218, 47, 208, 144, 141, 144, 296, 268, 285, 129, 96, 201, 190, 70]
        spots2=[10, 231, 119, 110, 152, 131, 205, 54, 129, 183, 575, 231, 368, 210, 44, 56, 372, 210, 316, 19, 143, 434, 209, 67, 113, 0, 46, 28, 592, 48, 238, 58, 261, 290, 164, 206, 378, 103, 319, 166, 42, 193, 86, 550, 134, 186, 105, 206, 30, 340, 270, 32, 91, 122, 508, 222, 0, 618, 335, 29, 152, 513, 291, 8, 12, 226, 26, 383, 238, 164, 102, 288, 428, 1, 142, 40, 244, 200, 277, 64, 61, 71, 378, 144, 229, 103, 153, 338, 265, 152, 136, 422, 172, 0, 745, 199, 11, 62, 160, 345, 409, 118, 82, 567, 175, 31, 312, 125, 189, 295, 19, 382, 444, 412, 456, 253, 112, 168, 287, 23, 12, 239, 256, 103, 280, 43, 138, 241, 302, 218, 5, 122, 190, 200, 253, 168, 742, 183, 127, 6, 53, 67, 537, 44, 33, 157, 551, 184, 28, 36, 235, 611, 1, 4, 200, 19, 288, 197, 131, 74, 218, 426, 133, 85, 49, 37, 248, 145, 179, 233, 428, 194, 331, 230, 97, 100, 413, 298, 48, 21, 4, 88, 349, 74, 135, 229, 60, 0, 32, 138, 32, 306, 65, 249, 174, 86, 116, 244, 191, 147, 14, 19, 167, 238, 86, 149, 337, 303, 95, 7, 147, 326, 495, 25, 109, 600, 138, 4, 285, 127, 153, 340, 55, 72, 399, 458, 98, 75, 400, 260, 57, 1, 41, 56, 383, 59, 117, 273, 64, 494, 131, 264, 288, 258, 35, 38, 18, 107, 384, 416, 33, 107, 122, 216, 295, 202, 403, 485, 100, 196, 296, 129, 225, 0, 67, 148, 87, 410, 46, 35, 187, 643, 5, 42, 85, 351, 253, 153, 0, 159, 120, 331, 230, 32, 38, 110, 437, 213, 137, 84, 23, 326, 171, 347, 154, 438, 275]

        spots3=[36, 113, 19, 77, 364, 257, 14, 5, 187, 307, 71, 294, 23, 207, 51, 116, 323, 227, 0, 21, 213, 125, 14, 351, 74, 106, 56, 116, 228, 21, 120, 357, 94, 107, 286, 58, 170, 228, 146, 115, 162, 308, 171, 717, 207, 0, 16, 54, 265, 68, 104, 251, 67, 35, 1, 66, 180, 255, 12, 53, 343, 213, 124, 251, 138, 330, 37, 11, 210, 110, 276, 92, 226, 3, 15, 112, 157, 375, 203, 112, 52, 135, 91, 395, 287, 141, 378, 114, 19, 139, 126, 74, 221, 358, 44, 23, 13, 6, 274, 18, 331, 206, 0, 80, 0, 0, 0, 0, 0, 59, 78, 357, 274, 121, 12, 30, 191, 207, 369, 182, 33, 165, 101, 557, 0, 51, 227, 176, 406, 158, 184, 52, 428, 21, 192, 467, 276, 3, 129, 393, 70, 319, 28, 16, 0, 326, 243, 47, 276, 11, 302, 229, 34, 157, 239, 1, 272, 194, 125, 374, 667, 232, 0, 90, 616, 160, 149, 234, 0, 0, 0, 327, 23, 316, 0, 366, 150, 61, 196, 202, 159, 185, 243, 0, 232, 214, 68, 340, 240, 184, 370, 319, 267, 0, 336, 262, 62, 0, 0, 328, 0, 374, 304, 397, 577, 0, 0, 0, 0, 0, 322, 231]
        ax[0].hist(spots1,bins=np.linspace(0,500,20+1),density=True)
        ax[1].hist(spots2,bins=np.linspace(0,500,20+1),density=True)
        ax[2].hist(spots3,bins=np.linspace(0,500,20+1),density=True)
        return fig

    def Figure62(self):
        fig, ax = plt.subplots(1, 3)
        fig.set_figwidth(12)
        fig.set_figheight(3.5)
        # THRESHOLD OF 100 FOR ALL 3 SLIDES
        spots1 = [89, 261, 353, 13, 18, 205, 2, 3, 4, 224, 247, 8, 84, 168, 179, 162, 115, 96, 126, 187, 77, 148, 101, 11, 6, 262, 55, 159, 140, 321, 194, 167, 46, 7, 88, 105, 165, 333, 79, 220, 205, 97, 371, 214, 213, 187, 126, 79, 54, 65, 41, 116, 160, 78, 253, 267, 153, 116, 97, 206, 66, 208, 182, 246, 196, 73, 21, 173, 39, 27, 166, 380, 212, 121, 238, 218, 174, 126, 38, 211, 302, 55, 152, 133, 122, 196, 160, 104, 206, 184, 170, 38, 368, 187, 164, 47, 208, 144, 141, 144, 259, 242, 262, 120, 96, 201, 190, 70]
        spots2 = [10, 231, 119, 110, 152, 131, 205, 54, 129, 183, 575, 231, 368, 210, 44, 56, 372, 210, 316, 19, 143, 434, 209, 67, 113, 0, 46, 28, 592, 48, 238, 58, 261, 290, 164, 206, 378, 103, 319, 166, 42, 193, 86, 550, 134, 186, 105, 206, 30, 340, 270, 32, 91, 122, 508, 222, 0, 618, 335, 29, 152, 513, 291, 8, 12, 226, 26, 383, 238, 164, 102, 288, 428, 1, 142, 40, 244, 200, 277, 64, 61, 71, 378, 144, 229, 103, 153, 338, 265, 152, 136, 422, 172, 0, 745, 199, 11, 62, 160, 345, 409, 118, 82, 567, 175, 31, 312, 125, 189, 295, 19, 382, 444, 412, 456, 253, 112, 168, 287, 23, 12, 239, 256, 103, 280, 43, 138, 241, 302, 218, 5, 122, 190, 200, 253, 168, 742, 183, 127, 6, 53, 67, 537, 44, 33, 157, 551, 184, 28, 36, 235, 611, 1, 4, 200, 19, 288, 197, 131, 74, 218, 426, 133, 85, 49, 37, 248, 145, 179, 233, 428, 194, 331, 230, 97, 100, 413, 298, 48, 21, 4, 88, 349, 74, 135, 229, 60, 0, 32, 138, 32, 306, 65, 249, 174, 86, 116, 244, 191, 147, 14, 19, 167, 238, 86, 149, 337, 303, 95, 7, 147, 326, 495, 25, 109, 600, 138, 4, 285, 127, 153, 340, 55, 72, 399, 458, 98, 75, 400, 260, 57, 1, 41, 56, 383, 59, 117, 273, 64, 494, 131, 264, 288, 258, 35, 38, 18, 107, 384, 416, 33, 107, 122, 216, 295, 202, 403, 485, 100, 196, 296, 129, 225, 0, 67, 148, 87, 410, 46, 35, 187, 643, 5, 42, 85, 351, 253, 153, 0, 159, 120, 331, 230, 32, 38, 110, 437, 213, 137, 84, 23, 326, 171, 347, 154, 438, 275]
        spots3 = [36, 113, 19, 77, 364, 257, 14, 5, 187, 307, 71, 294, 23, 207, 51, 116, 323, 227, 0, 21, 213, 125, 14, 351, 74, 106, 56, 116, 228, 21, 120, 357, 94, 107, 286, 58, 170, 228, 146, 115, 162, 308, 171, 717, 207, 0, 16, 54, 265, 68, 104, 251, 67, 35, 1, 66, 180, 255, 12, 53, 343, 213, 124, 251, 138, 330, 37, 11, 210, 110, 276, 92, 226, 3, 15, 112, 157, 375, 203, 112, 52, 135, 91, 395, 287, 141, 378, 114, 19, 139, 126, 74, 221, 358, 44, 23, 13, 6, 274, 18, 331, 206, 0, 80, 0, 0, 0, 0, 0, 59, 78, 357, 274, 121, 12, 30, 191, 207, 369, 182, 33, 165, 101, 557, 0, 51, 227, 176, 406, 158, 184, 52, 428, 21, 192, 467, 276, 3, 129, 393, 70, 319, 28, 16, 0, 326, 243, 47, 276, 11, 302, 229, 34, 157, 239, 1, 272, 194, 125, 374, 223, 4, 0, 0, 62, 131, 114, 213, 0, 0, 0, 296, 23, 316, 0, 366, 150, 61, 196, 202, 159, 185, 2, 0, 1, 2, 0, 16, 58, 42, 4, 2, 0, 0, 1, 1, 1, 0, 0, 13, 0, 1, 0, 9, 15, 0, 0, 0, 0, 0, 3, 0]

        ax[0].hist(spots1, bins=np.linspace(0, 500, 20 + 1),density=True)
        ax[0].set_ylim(0, .014)
        ax[1].hist(spots2, bins=np.linspace(0, 500, 20 + 1),density=True)
        ax[1].set_ylim(0, .014)
        ax[2].hist(spots3, bins=np.linspace(0, 500, 20 + 1),density=True)
        ax[2].set_ylim(0, .014)
        return fig

    def Figure63(self):
        fig, ax = plt.subplots(1, 3)
        fig.set_figwidth(12)
        fig.set_figheight(3.5)
        # THRESHOLD OF 1000 FOR ALL 3 SLIDES
        spots1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        spots2 = [0, 6, 2, 1, 8, 8, 12, 0, 0, 0, 22, 0, 0, 3, 0, 0, 10, 9, 16, 0, 5, 28, 16, 8, 4, 0, 0, 0, 29, 2, 16, 0, 2, 9, 1, 14, 9, 0, 13, 8, 0, 0, 0, 12, 0, 1, 2, 6, 0, 19, 29, 0, 0, 1, 17, 9, 0, 26, 10, 0, 2, 8, 6, 0, 0, 8, 0, 13, 23, 3, 0, 8, 23, 0, 7, 0, 3, 9, 23, 0, 0, 0, 20, 5, 17, 8, 6, 38, 43, 1, 2, 16, 12, 0, 21, 0, 0, 2, 6, 23, 41, 0, 0, 39, 0, 0, 11, 0, 9, 14, 0, 11, 23, 4, 2, 0, 0, 2, 14, 0, 1, 18, 18, 7, 29, 3, 1, 8, 22, 33, 0, 0, 2, 12, 14, 14, 14, 0, 3, 0, 0, 0, 21, 1, 0, 0, 21, 4, 0, 0, 1, 8, 0, 0, 4, 1, 17, 9, 9, 0, 10, 47, 8, 0, 0, 0, 18, 8, 18, 41, 0, 0, 1, 2, 2, 0, 17, 21, 1, 0, 0, 3, 15, 1, 6, 4, 3, 0, 0, 4, 0, 24, 0, 22, 3, 0, 3, 6, 4, 3, 0, 0, 4, 25, 0, 5, 29, 18, 5, 0, 4, 4, 24, 0, 0, 8, 6, 0, 9, 4, 4, 22, 0, 0, 0, 1, 0, 1, 5, 8, 1, 0, 0, 0, 12, 0, 0, 2, 0, 4, 4, 9, 7, 4, 2, 1, 0, 0, 6, 16, 0, 2, 6, 11, 27, 11, 18, 26, 0, 1, 11, 1, 3, 0, 1, 4, 5, 12, 0, 0, 0, 10, 0, 0, 0, 4, 2, 6, 0, 5, 2, 20, 20, 1, 0, 2, 28, 12, 3, 0, 0, 0, 4, 7, 0, 4, 19]
        spots3 = [0, 0, 0, 0, 2, 3, 0, 0, 0, 2, 0, 6, 0, 4, 0, 3, 11, 14, 0, 0, 10, 2, 0, 27, 2, 6, 1, 3, 11, 0, 3, 17, 2, 0, 2, 0, 0, 9, 2, 1, 4, 3, 10, 31, 1, 0, 0, 1, 8, 1, 1, 14, 2, 0, 0, 0, 1, 2, 0, 0, 4, 4, 0, 1, 0, 12, 0, 0, 2, 1, 7, 2, 5, 0, 0, 0, 1, 3, 0, 2, 0, 0, 0, 1, 1, 0, 7, 2, 0, 0, 0, 0, 6, 10, 0, 0, 0, 0, 4, 0, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ax[0].hist(spots1, bins=np.linspace(0, 500, 20 + 1), density=True)
        ax[1].hist(spots2, bins=np.linspace(0, 500, 20 + 1), density=True)
        ax[2].hist(spots3, bins=np.linspace(0, 500, 20 + 1), density=True)
        return fig

    def Figure64(self):
        fig, ax = plt.subplots(1, 3)
        fig.set_figwidth(12)
        fig.set_figheight(3.5)
        # THRESHOLD OF 500 FOR ALL 3 SLIDES
        spots1 = [0, 1, 19, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 4, 8, 0, 0, 3, 2, 0, 1, 0, 0, 0, 4, 0, 0, 0, 8, 37, 3, 0, 0, 0, 0, 0, 15, 0, 8, 16, 0, 8, 18, 17, 7, 0, 1, 2, 0, 0, 0, 11, 0, 0, 5, 0, 1, 0, 4, 0, 4, 2, 21, 6, 0, 0, 0, 0, 0, 8, 11, 2, 1, 5, 0, 0, 0, 0, 0, 4, 1, 0, 0, 2, 3, 6, 0, 5, 1, 6, 0, 11, 2, 0, 0, 6, 15, 0, 0, 0, 2, 0, 11, 2, 1, 0, 0]
        spots2 = [3, 108, 56, 60, 87, 71, 129, 0, 8, 18, 179, 0, 19, 30, 10, 15, 150, 78, 140, 10, 94, 286, 149, 40, 77, 0, 10, 9, 294, 16, 139, 14, 88, 102, 59, 107, 165, 41, 128, 75, 4, 28, 13, 163, 9, 49, 50, 69, 8, 185, 163, 3, 25, 25, 242, 126, 0, 243, 139, 1, 35, 162, 99, 3, 4, 103, 8, 194, 147, 40, 14, 100, 199, 0, 82, 16, 129, 120, 189, 34, 32, 45, 254, 91, 153, 71, 117, 295, 235, 54, 54, 181, 86, 0, 218, 39, 8, 48, 109, 255, 325, 12, 6, 244, 43, 8, 164, 56, 104, 165, 3, 168, 244, 35, 66, 35, 25, 52, 114, 19, 10, 209, 213, 84, 252, 35, 103, 185, 255, 185, 0, 27, 53, 97, 121, 95, 194, 36, 55, 0, 19, 22, 291, 21, 16, 27, 216, 59, 1, 3, 42, 171, 0, 1, 112, 9, 194, 143, 97, 48, 155, 346, 100, 68, 40, 30, 228, 130, 159, 210, 49, 3, 33, 33, 53, 43, 228, 188, 26, 6, 1, 38, 214, 32, 74, 123, 27, 0, 17, 97, 24, 239, 39, 193, 93, 44, 63, 149, 105, 82, 2, 10, 84, 162, 56, 94, 242, 214, 62, 2, 63, 137, 270, 0, 0, 151, 33, 2, 160, 70, 84, 231, 33, 0, 20, 51, 27, 29, 166, 125, 24, 0, 11, 23, 200, 22, 14, 55, 6, 134, 55, 102, 141, 117, 19, 11, 1, 15, 147, 178, 29, 81, 100, 190, 252, 176, 178, 224, 24, 62, 132, 45, 98, 0, 29, 86, 47, 275, 32, 0, 37, 195, 0, 3, 12, 94, 75, 59, 0, 111, 79, 254, 184, 14, 18, 66, 286, 131, 73, 18, 2, 75, 49, 136, 2, 69, 102]
        spots3 = []
        ax[0].hist(spots1, bins=np.linspace(0, 500, 20 + 1), density=True)
        ax[1].hist(spots2, bins=np.linspace(0, 500, 20 + 1), density=True)
        ax[2].hist(spots3, bins=np.linspace(0, 500, 20 + 1), density=True)
        return fig



fLayer=FigureLayerPA()
fLayer.runAndSave('Figure59')
1+1